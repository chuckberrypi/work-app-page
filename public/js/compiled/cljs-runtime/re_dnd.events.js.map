{"version":3,"sources":["re_dnd/events.cljs"],"mappings":"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","names":["js/re-dnd","js/re-dnd.events","js/re-dnd.events.reg-event-listeners","re-dnd.events/reg-event-listeners","cljs.core/memoize","p1__33678#","js/document.body","re-frame.core/dispatch","js/window","re-dnd.events/flip-args","f","x","y","re-dnd.events/bounding-rect","e","rect","pos","pos'","cljs.core.update","cljs.core/+","p__33698","p__33699","map__33700","cljs.core/--destructure-map","cljs.core.get","map__33701","re-dnd.events/collides?","r1","l1","t1","b1","r2","l2","t2","b2","re-dnd.events/translate","sub","cljs.core/-","re-dnd.events/set-all-draggables-to-idle","db","cljs.core.update_in","o","cljs.core.into","cljs.core.map","p__33702","vec__33703","cljs.core.nth","k","v","v'","cljs.core.assoc","cljs.core.dissoc","p__33707","vec__33708","re-dnd.events/insert-at-pos","hmap","vec__33714","h","t","cljs.core/split-at","cljs.core.concat","re-dnd.events/move-element-in-list","m","new-pos","vec__33717","comparator","cljs.core.comp","cljs.core.filter","cljs.core/first","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.remove","re-dnd.events/positions","pred","coll","cljs.core.keep_indexed","idx","re-dnd.events/index-of","search","re-dnd.events/get-position-of-element","dz-id","elt-id","elts","cljs.core.get_in","cljs.core.mapv","re_frame.core.reg_event_fx","p__33720","p__33721","map__33722","vec__33723","_","options","disp","p__33726","p__33727","map__33728","vec__33729","num-elts","cljs.core/count","re_frame.core.reg_event_db","p__33734","vec__33735","p1__33733#","p2__33732#","p__33738","map__33739","id","cljs.core._EQ_","p__33740","vec__33741","e-id","or__5045__auto__","p__33744","vec__33745","map__33748","drop-zone-id","type","elt","dropped-position","js/Error","cljs.core/not","cljs.core.partial","p__33749","p__33750","map__33751","vec__33752","opts","initial-elements","initial-disps","cljs.core/assoc-in","re-dnd.events/find-first-dragging-element","d","p__33755","vec__33756","cljs.core/ffirst","d'","p__33759","vec__33760","dz","cljs.core/=","cljs.core/nil?","cljs.core/second","p__33763","p__33764","map__33765","vec__33766","down?","vec__33769","draggable-id","G__33772","and__5043__auto__","p__33773","p__33774","map__33775","vec__33776","db'","vec__33779","re-dnd.events/clear-selection","sel","js/document","temp__5802__auto__","ae","tag-name","re-dnd.events/update-dz-elt","id'","p__33782","vec__33783","change","prev","offset","cljs.core.merge","p__33786","vec__33787","hover-in?","p__33790","vec__33791","w","re_frame.core.inject_cofx","p__33794","p__33795","map__33796","vec__33797","drop-zones-being-hit?","source-draggable-id","source-drop-zone-id","disps","iter__5523__auto__","s__33801","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__33803","cljs.core/chunk-buffer","i__33802","vec__33804","cljs.core/-nth","vec__33807","vec__33810","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33800","cljs.core/chunk-rest","vec__33813","vec__33816","vec__33819","cljs.core/cons","cljs.core/rest","dropped-element-id","index","drag-target-hit-dispatch","cljs.core/vec","p__33822","vec__33823","drag-box","drop-zone","cljs.core/chunk-first"],"sourcesContent":["(ns re-dnd.events\n  (:require [re-frame.core :as re-frame]\n            [re-frame.core :as rf]\n            [reagent.core :as reagent]\n            [taoensso.timbre :as timbre\n             :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                 logf tracef debugf infof warnf errorf fatalf reportf\n                                 spy get-env log-env)]\n            [vimsical.re-frame.cofx.inject :as inject]))\n\n(defonce reg-event-listeners\n  (memoize ; evaluate fn only once\n   (fn []\n     (.addEventListener js/document.body \"mousemove\" #(re-frame/dispatch [:dnd/mouse-moves\n                                                                          (+ (.-clientX %)\n                                                                             (.-scrollX js/window))\n                                                                          (+\n                                                                           (.-clientY %)\n                                                                           (.-scrollY js/window))]))\n     (.addEventListener js/document.body \"mousedown\" #(rf/dispatch [:dnd/set-mouse-button-status true]))\n     (.addEventListener js/document.body \"mouseup\" #(rf/dispatch [:dnd/set-mouse-button-status false])))))\n\n(defn flip-args\n  [f x y]\n  (f y x))\n\n(defn bounding-rect\n  [e]\n  (if (nil? e)\n    nil\n    (let [rect (.getBoundingClientRect e)\n          pos  {:top    (.-top rect)\n                :left   (.-left rect)\n                :bottom (.-bottom rect)\n                :right  (.-right rect)}\n\n          pos' (-> pos\n                  (update :top    + (.-scrollY js/window))\n                  (update :right  + (.-scrollX js/window))\n                  (update :bottom + (.-scrollY js/window))\n                  (update :left   + (.-scrollX js/window)))]\n\n      ;;(debug pos)\n      ;;(debug pos')\n      pos')))\n\n\n(defn collides?\n  [{r1 :right l1 :left t1 :top b1 :bottom}\n   {r2 :right l2 :left t2 :top b2 :bottom}]\n  (not (or (< r1 l2) (> l1 r2) (< b1 t2) (> t1 b2))))\n\n(defn translate\n  \"Moves a boundingClientRect with x and y pixels\"\n  [sub x y]\n  (-> sub\n      (update :left + x)\n      (update :right - x)\n      (update :top + y)\n      (update :bottom - y)))\n\n(defn set-all-draggables-to-idle\n  [db]\n  (-> db\n      (update-in [:dnd/state :drop-zones]\n              (fn [o]\n                (into {}\n                      (map (fn [[k v]]\n                             [k\n                              (map (fn [v']\n                                     (-> v'\n                                         (assoc :status :idle)\n                                         (dissoc :position)))\n                                   v)])\n                           o))))\n      (update-in [:dnd/state :draggables]\n              (fn [o]\n                (into {}\n                      (map (fn [[k v]]\n                             [k (assoc v :status :idle)])\n                           o))))))\n\n(defn insert-at-pos\n  [pos hmap e]\n  (let [[h t] (split-at pos hmap)]\n    (concat h [e] t)))\n\n(defn move-element-in-list\n  [m k new-pos]\n  (let [comparator (comp #{k} :id)\n        e          (->> m\n                        (filter comparator)\n                        first)\n        [h t]      (split-at new-pos m)]\n    (debug (map :id m) k (:id e) new-pos)\n    (concat (remove comparator h) [e] (remove comparator t))))\n\n(defn positions\n  [pred coll]\n  (keep-indexed (fn [idx x]\n                  (when (pred x)\n                    idx))\n                coll))\n\n(defn index-of\n  [search coll]\n  (first (positions #{search} coll)))\n\n(defn get-position-of-element\n  [db dz-id elt-id]\n  (let [elts (get-in db [:dnd/state :drop-zones dz-id])]\n    (index-of elt-id (mapv :id elts))))\n\n(rf/reg-event-fx\n :dnd/move-up\n (fn [{db :db} [_ dz-id elt-id]]\n   (let [options (get-in db [:dnd/state :drop-zone-options dz-id])\n         idx     (get-position-of-element db dz-id elt-id)\n         disp    (if (:drop-dispatch options)\n                   (into (:drop-dispatch options)\n                         [[dz-id elt-id]\n                          [dz-id elt-id (dec idx)]])\n                   [:dnd/move-drop-zone-element dz-id elt-id (dec idx)])]\n     (if (pos? idx)\n       {:db       db\n        :dispatch disp}\n       ;;else\n       {:db db}))))\n\n(rf/reg-event-fx\n :dnd/move-down\n (fn [{db :db} [_ dz-id elt-id]]\n   (let [options  (get-in db [:dnd/state :drop-zone-options dz-id])\n         num-elts (count (get-in db [:dnd/state :drop-zones dz-id]))\n         idx      (get-position-of-element db dz-id elt-id)\n         disp     (if (:drop-dispatch options)\n                    (into (:drop-dispatch options)\n                          [[dz-id elt-id]\n                           [dz-id elt-id (inc (inc idx))]])\n                    [:dnd/move-drop-zone-element dz-id elt-id (inc (inc idx))])]\n     {:db       db\n      :dispatch disp})))\n\n\n(re-frame/reg-event-db\n :dnd/delete-drop-zone-element\n (fn [db [_ dz-id elt-id]]\n   (update-in db [:dnd/state :drop-zones dz-id]\n              #(remove (fn [{id :id}]\n                         (= %2 id))\n                       %1)\n              elt-id)))\n\n(re-frame/reg-event-db\n :dnd/move-drop-zone-element\n (fn [db [_ dz-id e-id new-pos]]\n   (update-in db [:dnd/state :drop-zones dz-id] move-element-in-list e-id (or new-pos 0))))\n\n(re-frame/reg-event-db\n :dnd/add-drop-zone-element\n (fn [db [_ drop-zone-id {:keys [id type] :as elt} dropped-position]]\n   (assert id \"Please set a :id key in the second parameter of options.\")\n   (when-not type\n     (warn \"Please set a :type key in the second parameter of options\"))\n   (if-not dropped-position ;;append\n     (update-in db [:dnd/state :drop-zones drop-zone-id]\n                (let [elts             (get-in db [:dnd/state :drop-zones drop-zone-id])\n                      dropped-position (count elts)]\n                  (partial insert-at-pos dropped-position))\n                elt)\n     (update-in db\n                [:dnd/state :drop-zones drop-zone-id]\n                (partial insert-at-pos dropped-position)\n                elt))))\n\n(re-frame/reg-event-fx\n :dnd/initialize-drop-zone\n (fn [{db :db} [_ id opts initial-elements]]\n   (reg-event-listeners)\n   (let [initial-disps (map (fn [elt]\n                              [:dnd/add-drop-zone-element id elt])\n                            initial-elements)]\n     {:db\n      (-> db\n          (assoc-in [:dnd/state :drop-zone-options id] opts)\n          (assoc-in [:dnd/state :drop-zones id] []))\n      :dispatch-n initial-disps})))\n\n(defn find-first-dragging-element\n  [db]\n  (let [d (->> (get-in db [:dnd/state :draggables])\n               (filter (fn [[k v]] (= (:status v) :dragging)))\n               ;;gets the key\n               ffirst)\n        d' (->> (get-in db [:dnd/state :drop-zones])\n                (map (fn [[dz-id dz]]\n                       [dz-id (->> dz\n                                   (filter\n                                    (comp (partial = :dragging) :status))\n                                   first\n                                   :id)]))\n                (remove (comp nil? second))\n                first)]\n    (if d\n      [nil d]\n      d')))\n\n(re-frame/reg-event-fx\n :dnd/set-mouse-button-status\n (fn [{db :db} [_ down?]]\n   ;;when not down?, check first dragging id, and handle a drop\n   ;; through a re-dispatch for cleanliness\n   (let [[drop-zone-id draggable-id] (find-first-dragging-element db)]\n     (cond->\n         {:db (assoc db :mouse-button down?)}\n       (and (not down?) draggable-id)\n       (assoc :dispatch [:dnd/end-drag draggable-id drop-zone-id])))))\n\n(re-frame/reg-event-fx\n :dnd/mouse-moves\n (fn [{db :db} [_ x y]]\n;;   (debug \"mouse-moves:\" x y)\n   (let [db' (assoc-in db [:dnd/state :mouse-position] {:x x :y y})]\n     (if (:mouse-button db)\n       (let [[drop-zone-id draggable-id] (find-first-dragging-element db)]\n         (if draggable-id\n           {:db       db'\n            :dispatch [:dnd/drag-move draggable-id drop-zone-id x y]}\n           {:db db'}))\n       {:db db'}))))\n\n(defn clear-selection\n  []\n  (let [sel (.-selection js/document)]\n    (if (and sel (.hasOwnProperty sel \"empty\"))\n      (.empty sel)\n      ;;else\n      (do\n        (when (.-getSelection js/window)\n          (.removeAllRanges (.getSelection js/window)))\n        (if-let [ae (.-activeElement js/document)]\n          (let [tag-name (-> ae .-nodeName .toLowerCase)]\n            (if (or\n                 (and\n                  (= \"text\" (.-type ae))\n                  (= \"input\" tag-name))\n                 (= \"textarea\" tag-name))\n              (set! (.-selectionStart ae) (.-selectionEnd ae)))))))))\n\n(defn update-dz-elt\n  [db drop-zone-id elt-id f]\n  (update-in db [:dnd/state :drop-zones drop-zone-id]\n             (fn [elts id']\n               (map (fn [e]\n                      (if (= id' (:id e))\n                        (f e)\n                        e))\n                    elts))\n             elt-id))\n\n(re-frame/reg-event-db\n :dnd/drag-move\n (fn [db [_ id drop-zone-id x y]]\n   ;;(debug \"drag-move\" id x y)\n   (assert id)\n   (when id\n     (clear-selection))\n   (let [pos     {:x (- (- x (.-scrollX js/window)) 20)\n                  :y (- (- y (.-scrollY js/window)) 20)}\n         change (fn [prev]\n                  (let [offset (or (:offset prev)\n                                   {:x (- (:x pos)(:x prev))\n                                    :y (- (:y pos)(:y prev))})]\n                    (-> (merge prev pos)\n                        (update :x - (:x offset))\n                        (update :y - (:y offset))\n                        (assoc :offset offset))))]\n     (if drop-zone-id\n       (update-dz-elt db drop-zone-id id (fn [e]\n                                           (update e :position change)))\n       (update-in db [:dnd/state :draggables id :position] change)))))\n\n(re-frame/reg-event-db\n :dnd/hover\n (fn  [db [_ id drop-zone-id hover-in?]]\n   (let []\n     (if (:mouse-button db)\n       db\n       (if drop-zone-id\n         (update-dz-elt db drop-zone-id id\n                        (fn [e]\n                          (assoc e :status (if hover-in? :hover :idle))))\n         ;;else just a normal draggable\n         (assoc-in db [:dnd/state :draggables id :status] (if hover-in? :hover nil)))))))\n\n(re-frame/reg-event-db\n :dnd/start-drag\n (fn  [db [_ id drop-zone-id x y w h]]\n   (let []\n     (debug (str \"start-drag \" drop-zone-id \",\" id \", x: \" x \", y: \" y \", w: \" w \", h: \" h))\n     (let [pos {:x      (- x (.-scrollX js/window))\n                :y      (- y (.-scrollY js/window)) ;;discount for scroll pos\n                :width  w\n                :height h}]\n       (debug (:y pos) y (.-scrollY js/window))\n       (if drop-zone-id\n\n         (-> db\n             (update-dz-elt drop-zone-id id\n                            (fn [e]\n                              (assoc e\n                                     :status :dragging\n                                     :position pos))))\n         ;;else just a normal draggable\n         (-> db\n             (assoc-in [:dnd/state :draggables id :status] :dragging)\n             (assoc-in [:dnd/state :draggables id :position] pos)))))))\n\n\n(re-frame/reg-event-fx\n :dnd/end-drag\n [(re-frame/inject-cofx ::inject/sub [:dnd/get-colliding-drop-zone-and-index])]\n (fn  [{db                    :db\n        drop-zones-being-hit? :dnd/get-colliding-drop-zone-and-index}\n       [_ source-draggable-id source-drop-zone-id]]\n   (debug drop-zones-being-hit?)\n   (let [disps (for [[drop-zone-id [[dropped-element-id index]]] drop-zones-being-hit?]\n                 (let [options                  (get-in db [:dnd/state :drop-zone-options drop-zone-id])\n                       _                        (debug options)\n                       drag-target-hit-dispatch (if (:drop-dispatch options)\n                                                  (into (:drop-dispatch options)\n                                                        [[source-drop-zone-id source-draggable-id]\n                                                         [drop-zone-id dropped-element-id index]])\n                                                  (do\n                                                    (warn \"No options found for drop-zone-id: \" drop-zone-id \", make sure it is properly initialized. Ignoring\")\n                                                    nil))\n\n                       ]\n                   drag-target-hit-dispatch))\n         disps (remove nil? disps)]\n     (debug \"dispatches: \" disps)\n     {:db         (set-all-draggables-to-idle db)\n      :dispatch-n (vec disps)})))\n\n(re-frame/reg-event-db\n :dnd/reorder-drop\n (fn [db [_ drop-zone-id dropped-element-id]]\n   (let [drag-box    (bounding-rect (.getElementById js/document \"drag-box\"))\n         drop-zone   (bounding-rect (.getElementById js/document (str \"drop-zone-\" drop-zone-id)))]\n     (cond\n       (or\n        (nil? drop-zone)\n        (nil? drag-box))\n       (do\n         (debug \"No dragbox / dropzone\")\n         db)\n\n       (collides? drag-box drop-zone)\n       (do (debug \"Colliding!\")\n           db) ;; TODO fix this\n\n       :otherwise ;;no-op\n       (do\n         (debug \"No collide\")\n         db)))))\n"]}