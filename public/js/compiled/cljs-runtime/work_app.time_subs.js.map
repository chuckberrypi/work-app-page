{"version":3,"sources":["work_app/time_subs.cljs"],"mappings":"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","names":["work-app.time-subs/secs->tenths","secs","js/Math.ceil","work-app.time-subs/tenths->secs","tenths","js/Math.round","work-app.time-subs/task->tenths","task","work-app.time-subs/secs->string","start","end","date","js/Date","work-app.time-subs/float-to-tenth","num","work-app.time-subs/task-text","clojure.string/replace","p__33047","map__33048","cljs.core/--destructure-map","cljs.core.get","work-app.time-subs/code-pull->menu-opts","key","label","children","id","base","cljs.core/count","cljs.core.assoc","cljs.core.mapv","re_frame.core.reg_sub","p__33058","vec__33059","cljs.core.nth","db","_","m-id","cljs.core._EQ_","work-app.schema/schema-get","G__33062","G__33063","G__33064","G__33065","re-posh.core/reg-sub","t-id","G__33066","G__33067","re-posh.core/reg-query-sub","re_frame.core.subscribe","p__33069","vec__33070","matter-task-ids","p1__33068#","cljs.core/filterv","work_app.schema.schema_get","cljs.core.map","cljs.core/second","p__33074","vec__33075","t-ids","p1__33073#","cljs.core/group-by","G__33078","G__33079","G__33080","G__33081","p__33082","vec__33083","p__33086","vec__33087","G__33090","re-posh.core/subscribe","G__33091","G__33092","G__33093","p__33094","vec__33095","G__33098","cljs.core.into","p__33099","vec__33100","tasks","clojure.string.join","p__33103","vec__33104","G__33107","cljs.core.reduce","cljs.core/+","p__33108","vec__33109","G__33112","G__33113","G__33114","re-posh.core/reg-pull-sub","p__33115","vec__33116","G__33119","p__33120","vec__33121","p__33124","map__33125","time","p__33126","vec__33127","G__33130","p__33131","map__33132","G__33133","G__33134","p__33135","vec__33136","p__33139","vec__33140","c-name","m-name","p__33143","vec__33144","p__33147","vec__33151","G__33154","G__33155","G__33156","G__33157","p__33158","vec__33159","p__33163","vec__33164","cljs.core/coll?","codes","p1__33162#","cljs.core.sort_by","p__33171","vec__33172","acc","k","v","cljs.core.update_in","l","cljs.core/empty?","cljs.core.conj","p__33176","vec__33177","G__33180","G__33181","G__33182","G__33183","pairs","p__33185","vec__33186","p1__33184#","G__33189","G__33190","G__33191","p__33194","vec__33195","p__33198","vec__33199","p__33202","vec__33203","last-active","last-added","or__5045__auto__","G__33206","G__33207","p__33209","vec__33210","p1__33208#","p__33214","vec__33215","G__33218","G__33219","p__33220","vec__33221","p1__33213#","p__33224","vec__33225","t","G__33230","G__33231","G__33232","G__33233","G__33234","G__33235","G__33236","name-id-pairs","p__33239","vec__33241","G__33245","matter-times","cljs.core/reverse","cljs.core/first","cljs.core.take","cm-names","p__33253","vec__33254","c-id","cljs.core.update","p__33246","vec__33247","vec__33250","G__33258","G__33259","G__33260","G__33261","G__33262","p__33263","vec__33264","G__33267","c-ids","p__33270","vec__33271","G__33274","G__33275","p__33276","vec__33277","code-opts","cljs.core.js__GT_clj","cljs.core/tree-seq","cljs.core.comp","cljs.core/not","cljs.core.filter","x","p__33280","map__33281","work-app.time-subs/code-unpack","m","p__33283","vec__33284","ks","clojure.set/union","p__33287","map__33288","cljs.core/assoc-in","matters-tasks","p__33290","vec__33291","temp__5802__auto__","existing","p1__33289#","G__33296","G__33297","G__33298","G__33299","G__33300","G__33301","G__33302","G__33303","p__33304","vec__33305","G__33308","G__33309","G__33310","G__33311","p__33312","vec__33313","p__33316","vec__33317","dragged","cljs.core/deref","re-frame.db/app-db","code-map","p__33321","vec__33322","attrs"],"sourcesContent":[";; (c) David F Stearns 2023\n;; (c) David Stearns 2023\n(ns work-app.time-subs\n  (:require\n   [work-app.schema :as schema :refer [app-schema path schema-get]]\n   [work-app.macs :as mcr :include-macros true]\n\n   [re-frame.core :as rf]\n   [re-posh.core :as rp]\n   [malli.core :as m]\n   [malli.error :as me]\n   [malli.generator :as mg]\n   [malli.provider :as mp]\n   [malli.util :as mu]\n   [reagent.core :as r]\n   [goog.object :as go]\n\n   [datascript.core :as ds]\n   [work-app.subs :as s]))\n\n(defn secs->tenths [secs]\n  (-> secs\n      (/ 6)\n      (/ 60)\n      js/Math.ceil\n      (/ 10)))\n\n(defn tenths->secs [tenths]\n  (js/Math.round (* tenths 3600)))\n\n(secs->tenths (tenths->secs 2.3))\n\n(defn task->tenths [task]\n  (-> task\n      :time\n      secs->tenths))\n\n(defn secs->string [secs]\n  (let [start (if (< secs (* 60 60)) 14 11)\n        end (if (< secs (* 60 60)) 5 8)\n        date (js/Date. (* secs 1000))]\n    (.substr (.toISOString date) start end)))\n\n(defn float-to-tenth [num]\n  (-> num\n      (* 10)\n      js/Math.round\n      (/ 10)))\n\n(defn task-text [task]\n  (clojure.string/replace\n   (str (:task/description task)\n        \". (\"\n        (-> task :task/time secs->tenths)\n        \") \")\n   #\"\\.{2,}\"\n   \".\"))\n\n(defn code-pull->menu-opts [{:code/keys [key label children]\n                             :db/keys   [id]}]\n  (let [base {:data  id\n              :key   key\n              :label label}]\n    (if (< 0 (count children))\n      (assoc base :children (mapv code-pull->menu-opts children))\n      (assoc base :leaf true))))\n\n(rf/reg-sub ::matter-active?\n            (fn [db [_ m-id]]\n              (= (schema-get db \"active-timer-m-id\") m-id)))\n\n(rp/reg-sub ::active-timer-m-id\n            :<- [::s/timer-id]\n            (fn [t-id _]\n              {:type :query\n               :variables [t-id]\n               :query '[:find ?m-id\n                       :where [?m-id :matter/tasks ?t-id]]}))\n\n(rp/reg-query-sub ::c-id-by-m-id\n                  '[:find ?c .\n                    :in $ ?m-id\n                    :where\n                    [?c :client/matters ?m-id]])\n\n(rf/reg-sub ::checked-on-date\n            (fn [_]\n              [(rf/subscribe [::s/db])\n               (rf/subscribe [::matter-tasks-selected-date])])\n            (fn [[db matter-task-ids]]\n              (filterv #(schema-get db \"t-checked\" %) (map second matter-task-ids))))\n\n(rf/reg-sub ::locked-unlocked-tids\n            (fn [db [_ t-ids]]\n              (group-by #(if (schema-get db \"t-slider-locked\" %) true false) t-ids)))\n\n(rp/reg-sub ::matter-tasks-ds\n            :<- [::s/time-selected-date]\n            (fn [date [_ m-id]]\n              {:type      :query\n               :variables [m-id date]\n               :query     '[:find [?t-id ...]\n                            :in $ ?m-id ?date\n                            :where\n                            [?t-id :task/date ?date]\n                            [?m-id :matter/tasks ?t-id]\n                            ]}))\n;;\n;; TODO: Need to turn this into a sum of the tenths for all tasks to make sure this syncs up.\n(rf/reg-sub ::matter-time-tenths\n            (fn [[_ m-id]]\n              (rp/subscribe [::time-matter-total-time m-id]))\n            (fn [secs]\n              (secs->tenths secs)))\n\n(rp/reg-sub ::pull-matter-tasks\n            (fn [[_ m-id]]\n              (rp/subscribe [::matter-tasks-ds m-id]))\n            (fn [t-ids]\n              {:type :pull-many\n               :pattern '[:task/time :db/id]\n               :ids (into [] t-ids)}))\n\n(rf/reg-sub ::tasks-string\n            (fn [[_ t-ids]]\n              (rf/subscribe [::s/pull-entities t-ids]))\n            (fn [tasks]\n              (->> tasks\n                   (map task-text)\n                   (clojure.string/join \" \"))))\n\n(rf/reg-sub ::tasks-tenths\n            (fn [[_ t-ids]]\n              (rp/subscribe [::s/pull-entities t-ids]))\n            (fn [tasks]\n              (->> tasks\n                   (map :task/time)\n                   (map secs->tenths)\n                   (reduce +)\n                   float-to-tenth)))\n\n(rf/reg-sub ::tasks-time\n            (fn [[_ t-ids]]\n              (rp/subscribe [::s/pull-entities t-ids]))\n            (fn [tasks]\n              (->> tasks\n                   (map :task/time)\n                   (reduce +))))\n\n(rp/reg-pull-sub ::task-time-ds\n                 '[:task/time])\n\n(rf/reg-sub ::time-matter-total-time\n            (fn [[_ m-id]]\n              (rp/subscribe [::pull-matter-tasks m-id]))\n            (fn [tasks]\n              (->> tasks\n                   (map :task/time)\n                   (map secs->tenths)\n                   (reduce +)\n                   float-to-tenth)))\n\n(rf/reg-sub ::time-tenths\n            (fn [[_ t-id]]\n              (rf/subscribe [::task-time-ds t-id]))\n            (fn [{:task/keys [time]}] ;[{:time/keys [time]}]\n              (secs->tenths time)))\n\n(rf/reg-sub ::time-string\n            (fn [[_ t-id]]\n              (rp/subscribe [::task-time-ds t-id]))\n            (fn [{:task/keys [time]}]\n              (secs->string time)))\n\n(rp/reg-query-sub ::cm-number-str-query\n                  '[:find [?c-num ?m-num ?c-name ?m-name]\n                    :in $ ?m-id\n                    :where\n                    [?m-id :matter/number ?m-num]\n                    [?c-id :client/matters ?m-id]\n                    [?c-id :client/number ?c-num]\n                    [?c-id :client/name ?c-name]\n                    [?m-id :matter/name ?m-name]\n              ])\n\n\n(rf/reg-sub ::cm-name-old\n            (fn [[_ m-id]]\n              (rf/subscribe [::cm-number-str-query m-id]))\n            (fn [[_ _ c-name m-name] _]\n              (str c-name \" - \" m-name)))\n\n(rf/reg-sub ::cm-name\n            (fn [[_ m-id]]\n              (rf/subscribe [::cm-number-str-query m-id]))\n            (fn [[_ _ c-name m-name] _]\n              (str c-name \" - \" m-name)))\n\n(comment\n  (ds/pull @@re-posh.db/store '[:task/code :task/order :task/date :matter/_tasks] 220)\n  (ds/q '[:find ?t-id ?order\n          :in $ ?t-id-prev\n          :where\n          [?m-id :matter/tasks ?t-id-prev]\n          [?m-id :matter/tasks ?t-id]\n          [?t-id :task/order ?order]\n          [?t-id-prev :task/order ?old-order]\n          [(< ?old-order ?order)]\n          ]\n        @@re-posh.db/store 221)\n\n  (map (fn [a b] [b a]) (range 10) (range 100 0 -1))\n\n  )\n\n(rp/reg-sub ::task-codes-intermediate\n            :<- [::s/time-selected-date]\n            (fn [date [_ m-id]]\n              {:type :query\n               :variables [m-id date]\n               :query '[:find ?c ?t ?o\n                        :in $ [?m ...] ?d\n                        :where\n                        [?m :matter/tasks ?t]\n                        [?t :task/date ?d]\n                        [?t :task/code ?c]\n                        [?t :task/order ?o]]}))\n\n(rf/reg-sub ::task-codes\n (fn [[_ m-id]]\n   (rf/subscribe [::task-codes-intermediate (if (coll? m-id) m-id [m-id])]))\n (fn [codes]\n   (->> codes\n        (sort-by #(nth % 2))\n        (reduce\n         (fn [acc [k v _]] (update-in acc [k] (fn [l]\n                                                (if (empty? l)\n                                                  [v]\n                                                  (conj l v)))))\n         {}))))\n\n(rf/reg-sub ::tasks-by-code\n            (fn [[_ t-ids]]\n              (rf/subscribe [:work-app.subs/pull-entities t-ids]))\n            (fn [tasks]\n              (group-by :task/code tasks)))\n\n(rp/reg-sub ::selected-date-matters-codes-query\n                  :<- [::matter-tasks-selected-date]\n                  (fn [date]\n                    {:type      :query\n                     :variables [date]\n                     :query     '[:find ?m-id ?c-id\n                                  :where\n                                  [?t-id :task/date ?date]\n                                  [?m-id :matter/tasks ?t-id]\n                                  [?t-id :task/code ?c-id]\n                                  ]}))\n\n(rf/reg-sub ::selected-date-matters-codes\n            :<- [::selected-date-matters-codes-query]\n            (fn [pairs]\n              (reduce (fn [acc v] (into acc v))\n                      #{}\n                      pairs)))\n\n(rf/reg-sub ::expanded-map\n            (fn [db [_ codes]]\n              (group-by #(if (schema-get db \"collapsed\" %) :collapsed :expanded) codes)))\n\n(rp/reg-sub ::c-by-m-id\n            (fn [_ m-id]\n              (rf/subscribe [::c-id-by-m-id m-id]))\n            (fn [t-id _]\n              {:type    :pull\n               :pattern '[*]\n               :id      t-id}))\n\n(rf/reg-sub ::timer-active?\n            (fn [db [_ t-id]]\n              (= t-id\n                 (schema/schema-get db \"timer-id\"))))\n\n(rf/reg-sub ::default-next-task-timer\n            (fn [[_ m-id]]\n              [(rf/subscribe [::s/matter-last-active-timer m-id])\n               (rf/subscribe [::matter-last-added-task-on-date m-id])])\n            (fn [[last-active last-added] _]\n              (or last-active last-added)))\n\n(rp/reg-query-sub ::m-id-by-t-id\n                  '[:find ?m-id .\n                    :in $ ?t-id\n                    :where\n                    [?m-id :matter/tasks ?t-id]])\n\n(rf/reg-sub ::checked-tasks\n            (fn [db [_ t-ids]]\n              (filterv #(schema-get db \"t-checked\" %) t-ids)))\n\n(rf/reg-sub ::matter-checked-tasks-ds\n            (fn [[_ m-id]]\n              [(rp/subscribe [::s/db])\n               (rp/subscribe [::matter-tasks-ds m-id])])\n            (fn [[db t-ids]]\n              (->> t-ids\n                   (filterv #(schema-get db \"t-checked\" %)))))\n\n(rf/reg-sub ::tasks-filter-checked\n            (fn [db [_ tasks]]\n              (filterv (fn [t] (schema-get db \"t-checked\" t)) tasks)))\n\n(rp/reg-query-sub ::matters-by-time\n                  '[:find ?m-id (max ?date)\n                    :where\n                    [?m-id :matter/tasks ?t]\n                    [?t :task/date ?date]])\n\n(rp/reg-sub ::client-matter-ids\n            (fn [_]\n              {:type  :query\n               :query '[:find ?c ?m\n                        :where [?c :client/matters ?m]]}))\n\n(rp/reg-sub ::client-matter-names\n            (fn [_]\n              (rf/subscribe [::client-matter-ids]))\n            (fn [pairs]\n              {:type :query\n               :query '[:find ?c-name ?c-id ?m-name ?m-id\n                        :in $ [[?c-id ?m-id] ...]\n                        :where\n                        [?c-id :client/matters ?m-id]\n                        [?c-id :client/name ?c-name]\n                        [?m-id :matter/name ?m-name]\n                        ]\n               :variables [pairs]}))\n\n(rf/reg-sub ::client-matter-opts\n            (fn [_]\n              (rf/subscribe [::client-matter-names]))\n            (fn [name-id-pairs]\n              (->> name-id-pairs\n                   (mapv (fn [[c-name _ m-name m-id]]\n                           {:label (str c-name \" - \" m-name)\n                            :value m-id})))))\n\n(rf/reg-sub ::recent-matters-ids\n            (fn [_]\n              (rp/subscribe [::matters-by-time]))\n            (fn [matter-times]\n              (->> matter-times\n                   (sort-by second)\n                   reverse\n                   (map first)\n                   (take 10))))\n\n(rf/reg-sub ::all-client-matter-nodes\n            :<- [::client-matter-names]\n            (fn [cm-names]\n              (->> cm-names\n                   (reduce (fn [acc [c-name c-id m-name m-id]]\n                             (update acc [c-name c-id] (fn [v]\n                                                         (conj\n                                                          v\n                                                          {:label m-name\n                                                           :data m-id\n                                                           :key m-id}))))\n                           {})\n                   (mapv (fn [[[c-name c-id] children]]\n                           {:label      c-name\n                            :selectable false\n                            :key        c-id\n                            :children   (into [] children)})))))\n\n(rp/reg-query-sub ::matter-code-ids\n                  '[:find [?e ...]\n                    :in $ ?m-id\n                    :where [?m-id :matter/codes ?e]])\n\n(rp/reg-sub ::matter-codes-pull\n                      (fn [[_ m-id]]\n                        (rp/subscribe [::matter-code-ids m-id]))\n                      (fn [c-ids]\n                        {:type   :pull-many\n                         :pattern '[*]\n                         :ids    (into [] c-ids)}))\n\n(rf/reg-sub ::matter-codes-opts\n            (fn [[_ m-id]]\n              (rf/subscribe [::matter-codes-pull m-id]))\n            (fn [codes]\n              (mapv code-pull->menu-opts codes)))\n\n(rp/reg-pull-sub ::matter-code-keys\n                 '[:db/id :code/key {:matter/codes ...} {:code/children ...}])\n\n(rf/reg-sub ::default-key-and-code\n            (fn [[_ m-id]]\n              (rf/subscribe [:work-app.matter-subs/matter-code-menu-opts m-id]))\n            (fn [code-opts]\n              (->> (js->clj code-opts :keywordize-keys true)\n                   first\n                   (tree-seq (comp not :leaf) :children)\n                   (filter :leaf)\n                   first\n                   ((fn [x] [(:key x) (:data x)])))))\n\n(defn code-unpack [{:code/keys [key children]\n                    :db/keys   [id]\n                    :as m}]\n  (reduce (fn [acc v] (into acc (code-unpack v))) #{{:id id :key key}} children))\n\n(rf/reg-sub ::matter-code-maps\n            (fn [[_ m-id]]\n              (rf/subscribe [::matter-code-keys m-id]))\n            (fn [ks]\n             (->> ks\n                  :matter/codes\n                  (map code-unpack)\n                  (reduce clojure.set/union)\n                  (reduce (fn [acc {:keys [id key]}]\n                            (-> acc\n                                (assoc-in [:ek id] key)\n                                (assoc-in [:ke key] id)))\n                          {}))))\n\n(rf/reg-sub ::matter->task-selected-date\n            (fn [_]\n              (rf/subscribe [::matter-tasks-selected-date]))\n            (fn [matters-tasks]\n              (reduce (fn [acc [m t]]\n                        (if-let [existing (get acc m)]\n                          (update acc m #(conj % t))\n                          (assoc acc m [t]))) {} matters-tasks)))\n\n(rp/reg-sub ::matter-tasks-selected-date\n            :<- [::s/time-selected-date]\n            (fn [date _]\n              {:type :query\n               :variables [date]\n               :query '[:find ?m-id ?t-id\n                        :in $ ?date\n                        :where\n                        [?t-id :task/date ?date]\n                        [?m-id :matter/tasks ?t-id]]}))\n\n(rp/reg-sub ::matter-last-added-task-on-date-old\n            :<- [::s/time-selected-date]\n            (fn [date [_ m-id]]\n              {:type      :query\n               :variables [m-id date]\n               :query     '[:find ?t-id .\n                            :in $ ?m-id ?date\n                            :where\n                            [?t-id :task/date ?date]\n                            [?m-id :matter/tasks ?t-id]\n                            ]}))\n\n(rp/reg-sub ::matter-last-added-task-on-date\n            :<- [::s/time-selected-date]\n            (fn [date [_ m-id]]\n              {:type      :query\n               :variables [m-id date]\n               :query     '[:find (max ?t-id) .\n                            :in $ ?m-id ?date\n                            :where\n                            [?t-id :task/date ?date]\n                            [?m-id :matter/tasks ?t-id]\n                            ]}))\n\n\n(rf/reg-sub ::dragging?\n            :<- [:work-app.subs/dragged-task]\n            (fn [dragged [_ t-id]]\n              (= t-id dragged)))\n\n(schema-get @re-frame.db/app-db \"active-timer-t-id\")\n\n(schema-get @re-frame.db/app-db \"code-map\")\n\n(rf/reg-sub ::codes-in-edit-mode\n            (fn [_]\n              (rf/subscribe [:work-app.subs/code-map]))\n            (fn [code-map _]\n              (filter (fn [[c-id attrs]]\n                        (:code-edit-mode attrs)) code-map)))\n\n;; (rf/reg-sub ::cm-number-str\n;;             (fn [[_ m-id]]\n;;               (rf/subscribe [::cm-number-str-query m-id]))\n;;             (fn [[c-num m-num _ _] _]\n;;               (str c-num \"-\" m-num)))\n"]}