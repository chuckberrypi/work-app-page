{"version":3,"sources":["posh/lib/update.cljc"],"mappings":"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","names":["p__24786","map__24787","cljs.core/--destructure-map","cljs.core.get","posh.lib.update/update-pull","dcfg","retrieve","posh-tree","storage-key","vec__24790","cljs.core.nth","_","poshdb","pull-pattern","eid","analysis","posh.lib.pull-analyze/pull-analyze","cljs.core/cons","posh.lib.db/poshdb->analyze-db","cljs.core.dissoc","cljs.core.merge","p__24798","map__24800","posh.lib.update/update-filter-pull","vec__24802","cljs.core.concat","cljs.core/first","cljs.core/vals","p__24806","map__24807","posh.lib.update/update-pull-many","vec__24808","eids","posh.lib.pull-analyze/pull-many-analyze","p__24811","map__24812","posh.lib.update/update-q-with-dbvarmap","vec__24815","query","args","cljs.core.remove","qm","posh.lib.q-analyze/query-to-map","dbvarmap","posh.lib.q-analyze/make-dbarg-map","poshdbmap","cljs.core.map","p__24818","vec__24819","db-sym","cljs.core.apply","cljs.core/merge","fixed-args","cljs.core/zipmap","p__24822","vec__24823","sym","arg","or__5045__auto__","posh.lib.q-analyze/q-analyze","posh.lib.update/update-q","posh.lib.update/reduce-entities","r","cljs.core.reduce","acc","xs","x","cljs.core.conj","posh.lib.update/filter-q-transform-analysis","posh.lib.update/update-filter-q","posh.lib.update/update-posh-item","G__24826","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns posh.lib.update\n  (:require [posh.lib.util :as util]\n            [posh.lib.datom-matcher :as dm]\n            [posh.lib.pull-analyze :as pa]\n            [posh.lib.q-analyze :as qa]\n            [posh.lib.db :as db]))\n\n(defn update-pull [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated pull: \" storage-key)\n  (let [[_ poshdb pull-pattern eid] storage-key]\n    (let [analysis (pa/pull-analyze dcfg\n                                    (cons :patterns retrieve)\n                                    (db/poshdb->analyze-db posh-tree poshdb)\n                                    pull-pattern\n                                    eid)]\n      (dissoc\n       (merge analysis\n              {:reload-patterns (:patterns analysis)\n               :reload-fn posh.lib.update/update-pull})\n       :patterns))))\n\n(defn update-filter-pull [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated filter-pull: \" storage-key)\n  (let [[_ poshdb pull-pattern eid] storage-key]\n    (let [analysis (pa/pull-analyze dcfg\n                                    (concat [:patterns :ref-patterns] retrieve)\n                                    (db/poshdb->analyze-db posh-tree poshdb)\n                                    pull-pattern\n                                    eid)]\n      (dissoc\n       (merge analysis\n              {:pass-patterns (first (vals (:patterns analysis)))\n               :reload-patterns (:ref-patterns analysis)\n               :reload-fn posh.lib.update/update-filter-pull})\n       :patterns :ref-patterns))))\n\n(defn update-pull-many [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  ;;(println \"updated pull-many: \" storage-key)\n  (let [[_ poshdb pull-pattern eids] storage-key]\n    (let [analysis (pa/pull-many-analyze dcfg\n                                         (cons :patterns retrieve)\n                                         (db/poshdb->analyze-db posh-tree poshdb)\n                                         pull-pattern\n                                         eids)]\n      (dissoc\n       (merge analysis\n              {:reload-patterns (:patterns analysis)\n               :reload-fn posh.lib.update/update-pull-many})\n       :patterns))))\n\n(declare update-q)\n\n(defn update-q-with-dbvarmap [{:keys [dcfg retrieve] :as posh-tree} storage-key]\n  \"Returns {:dbvarmap .. :analysis ..}\"\n  (let [[_ query args] storage-key\n        retrieve       (concat [:results :simple-patterns] (remove #{:patterns} retrieve))\n        qm             (merge {:in '[$]} (qa/query-to-map query))\n        dbvarmap       (qa/make-dbarg-map (:in qm) args)\n        ;; no longer using\n        ;poshdbs        (vals dbvarmap)\n        poshdbmap      (->> dbvarmap\n                            (map (fn [[db-sym poshdb]]\n                                   {db-sym\n                                    (db/poshdb->analyze-db posh-tree poshdb)}))\n                            (apply merge))\n        fixed-args     (->> (zipmap (:in qm) args)\n                            (map (fn [[sym arg]]\n                                   (or (get poshdbmap sym) arg))))\n        analysis       (qa/q-analyze dcfg retrieve query fixed-args)]\n    {:dbvarmap dbvarmap\n     :analysis (dissoc\n                (merge analysis\n                       {:reload-patterns (:patterns analysis)\n                        :reload-fn posh.lib.update/update-q})\n                :patterns)}))\n\n(defn update-q [posh-tree storage-key]\n  ;;(println \"updated q: \" storage-key)\n  (:analysis (update-q-with-dbvarmap posh-tree storage-key)))\n\n(defn reduce-entities [r]\n    (reduce (fn [acc xs] (reduce (fn [acc x] (conj acc x)) acc xs)) #{} r))\n\n(declare update-filter-q)\n\n(defn filter-q-transform-analysis [analysis]\n  (dissoc\n   (merge analysis\n          {:pass-patterns [[(reduce-entities (:results analysis))]]\n           :reload-patterns (:patterns analysis)\n           :reload-fn posh.lib.update/update-filter-q})\n   :results :patterns))\n\n(defn update-filter-q [posh-tree storage-key]\n  ;;(println \"update-filter-q\" storage-key)\n  (filter-q-transform-analysis (:analysis (update-q-with-dbvarmap posh-tree storage-key))))\n\n(defn update-posh-item [posh-tree storage-key]\n  (case (first storage-key)\n    :pull (update-pull posh-tree storage-key)\n    :q    (:analysis (update-q posh-tree storage-key))\n    :filter-pull (update-filter-pull posh-tree storage-key)))\n"]}