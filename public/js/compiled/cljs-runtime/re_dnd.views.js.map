{"version":3,"sources":["re_dnd/views.cljs"],"mappings":"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","names":["js/re-dnd","js/re-dnd.views","js/re-dnd.views.dropped-widget","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__33830","cljs.core/MultiFn","cljs.core.symbol","re-dnd.views/dropped-widget","p__33831","map__33832","cljs.core/--destructure-map","type","id","p__33833","map__33834","js/re-dnd.views.drag-handle","fexpr__33836","re-dnd.views/drag-handle","p__33837","map__33838","p__33842","map__33843","p__33844","map__33845","re-dnd.views/start-drag-fn","drop-zone-id","e","e2","p","or__5045__auto__","goog.dom/getAncestorByClass","bounds","goog.style/getBounds","re-frame.core/dispatch","re-dnd.views/hover-fn","elt-id","hover-in?","var_args","G__33855","re-dnd.views/draggable","js/Error","body","drag-status","re_frame.core.subscribe","cljs.core.partial","cljs.core/deref","cljs.core._EQ_","re-dnd.views/reorder-fn","dropped-element-id","re-dnd.views/dropped-element","de","options","cljs.core/name","G__33875","re-dnd.views/drop-zone","dropped-elements","overlaps?","cljs.core.map","re-dnd.views/drag-box","s","map__33889","width","height","x","y","drag-box"],"sourcesContent":["(ns re-dnd.views\n  (:require [goog.dom :as dom]\n            [goog.style :as style]\n            [re-dnd.events :as dnd]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [taoensso.timbre :as timbre\n             :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                 logf tracef debugf infof warnf errorf fatalf reportf\n                                 spy get-env log-env)]))\n\n(defmulti dropped-widget\n  (fn [{:keys [type id]}] type))\n\n(defmethod dropped-widget\n  :dnd/drop-marker\n  [{:keys [type id]}]\n  [:div.drop-marker])\n\n(defmulti drag-handle\n  (fn [{:keys [type id]}] type))\n\n(defmethod drag-handle\n  :dnd/drop-marker\n  [{:keys [type id]}]\n  [:div.drop-marker])\n\n(defmethod drag-handle\n  :default\n  [{:keys [type id]}]\n  [:div.drop-marker])\n\n(defn start-drag-fn\n  [id drop-zone-id e e2]\n  (let  [p (or (dom/getAncestorByClass (.-target e) \"dropped-element\")\n               (dom/getAncestorByClass (.-target e) \"draggable\"))\n         bounds (style/getBounds p)]\n    (rf/dispatch [:dnd/start-drag id\n                  drop-zone-id\n                  (.-left bounds)\n                  (.-top bounds)\n                  (.-width bounds)\n                  (.-height bounds)])))\n\n(defn hover-fn\n  [elt-id drop-zone-id hover-in?]\n  (rf/dispatch [:dnd/hover elt-id drop-zone-id hover-in?]))\n\n(defn draggable\n  ([id]\n   [draggable id nil])\n  ([id body]\n   (let [drag-status (rf/subscribe [:dnd/drag-status id nil])]\n     (fn [id body]\n       [:div.draggable\n        {:on-mouse-down (partial start-drag-fn id nil)\n         :on-mouse-over (partial hover-fn id nil true)\n         :on-mouse-out (partial hover-fn id nil false)}\n        (when (= :hover @drag-status)\n          [:div.drag-mask\n           {:style {:width \"100%\"\n                    :height \"100%\"}}])\n        (when body\n          body)]))))\n\n(defn reorder-fn\n  [drop-zone-id dropped-element-id e]\n  (rf/dispatch [:dnd/reorder-drop drop-zone-id dropped-element-id]))\n\n(defn dropped-element\n  [id de]\n  (let [drag-status (rf/subscribe [:dnd/drag-status (:id de) id])\n        options     (rf/subscribe [:dnd/dragdrop-options id])]\n    (fn [id de]\n      [:div.dropped-element.row\n       {:id (str \"dropped-element-\" (name (:id de)))}\n       #_(when (= :hover @drag-status)\n          [:div.drag-mask\n           {:style {:width  \"100%\"\n                    :height \"100%\"}}])\n\n       [:div.drag-handle.col-md-1\n        (when-not (:three-part-drag-handle @options)\n          {:on-mouse-over (partial hover-fn (:id de) id true)\n           :on-mouse-out  (partial hover-fn (:id de) id false)\n           :on-mouse-down (partial start-drag-fn (:id de) id)\n           :on-mouse-up   (partial reorder-fn id (:id de))})\n        (when (:three-part-drag-handle @options)\n          [:i.zmdi.zmdi-caret-up\n           {:on-click #(rf/dispatch [:dnd/move-up id (:id de)])}])\n        (when (:three-part-drag-handle @options)\n          [:i.zmdi.zmdi-menu\n           {:on-mouse-over (partial hover-fn (:id de) id true)\n            :on-mouse-out  (partial hover-fn (:id de) id false)\n            :on-mouse-down (partial start-drag-fn (:id de) id)\n            :on-mouse-up   (partial reorder-fn (:id de) id)}])\n        (when (:three-part-drag-handle @options)\n          [:i.zmdi.zmdi-caret-down\n           {:on-click #(rf/dispatch [:dnd/move-down id (:id de)])}])\n        [drag-handle de]]\n       [:div.dropped-element-body.col-md-11\n        ^{:key (:id de)#_(hash de)} ;;force rerender everytime `de` changes. since it's an multimethod, this might otherwise fail sometimes.\n        [dropped-widget de]]\n       [:div {:style {:clear :both}}]])))\n\n(defn drop-zone\n  ([id]\n   [drop-zone id nil])\n  ([id body]\n   (let [dropped-elements (rf/subscribe [:dnd/dropped-elements-with-drop-marker id])\n         overlaps?        (rf/subscribe [:dnd/draggable-overlaps? id])]\n     (fn [id body]\n       [:div.drop-zone\n        {:id        (str \"drop-zone-\" (name id))\n         :className (if @overlaps? \"highlight\" \"\")}\n        (map (fn [de]\n               ^{:key (:id de)}\n               [dropped-element id de])\n             @dropped-elements)\n        (when body body)]))))\n\n(defn drag-box\n  \"Box floating around following the mouse\"\n  []\n  (let [s (rf/subscribe [:dnd/drag-box])]\n    (fn []\n      (let [{:keys [width height x y] :as drag-box} @s]\n        [:div#drag-box.drag-box\n         {:style {:display (if (nil? drag-box) \"none\")\n                  :width  (str width \"px\")\n                  :height (str height \"px\")\n                  :top    (str y \"px\")\n                  :left   (str x \"px\")}}]))))\n"]}