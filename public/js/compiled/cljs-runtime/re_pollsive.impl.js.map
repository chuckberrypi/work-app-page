{"version":3,"sources":["re_pollsive/impl.cljs"],"mappings":"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","names":["re-pollsive.impl/ns-root","var_args","G__28861","re-pollsive.impl/ns-keyword","js/Error","re_pollsive.impl.ns_keyword","suffix","cljs.core.keyword","re-pollsive.impl/register-subs","re_frame.core.reg_sub","db","_","cljs.core.get_in","p__28905","map__28907","cljs.core/--destructure-map","cljs.core.get","re-pollsive.impl/inc-counter!","cljs.core.update_in","cljs.core/inc","p__28911","p__28912","map__28913","vec__28914","cljs.core.nth","map__28917","re-pollsive.impl/rule-started-at!","started-at","stopped-time-since-last-poll","rule-index","rules","rules-updated","G__28918","cljs.core/assoc-in","re-pollsive.impl/register-events","re_frame.core.reg_event_fx","re-pollsive.impl/set-interval-handler","cljs.core/deref","counter","or__5045__auto__","re_frame.core.subscribe","seq__28933","cljs.core/seq","chunk__28934","count__28935","i__28936","vec__28952","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__28956","cljs.core/first","cljs.core/next","i","rule","cljs.core.map_indexed","cljs.core/vector","map__28955","map__28959","interval","event","dispatch-event-on-start?","poll-when","started-before?","poll?","time-elapsed","started-at-effective","interval-rem","cljs.core/rem","and__5043__auto__","cljs.core/not","re-frame.core/dispatch-sync","re-frame.core/dispatch","interval-met?","cljs.core._EQ_","re-frame.core/reg-fx","opts","js/window.setInterval"],"sourcesContent":["(ns re-pollsive.impl\n  (:require\n   [clojure.set :as set]\n   [re-frame.core :as rf]\n   ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Vars\n\n(def ns-root \"re-pollsive.core/\")\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Util\n\n(defn ns-keyword\n  ([]\n   (ns-keyword nil))\n  ([suffix]\n   (keyword\n    (str ns-root\n         \"polling\"\n         suffix))))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Subs\n\n(defn register-subs []\n  (rf/reg-sub\n   (ns-keyword \"-counter\")\n   (fn [db _]\n     (get-in db [(ns-keyword) :counter])))\n\n  (rf/reg-sub\n   (ns-keyword \"-rules\")\n   (fn [db _]\n     (get-in db [(ns-keyword) :rules])))\n  )\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Events\n\n(defn inc-counter!\n  [{:keys [db]} _]\n  {:db\n   (-> db\n       (update-in [(ns-keyword) :counter] inc))})\n\n(defn rule-started-at!\n  [{:keys [db]} [_ {:keys [started-at\n                           stopped-time-since-last-poll\n                           rule-index]}]]\n  (let [rules         (get-in db [(ns-keyword) :rules])\n        rules-updated (some-> rules\n                              (assoc-in [rule-index :started-at] started-at)\n                              (assoc-in [rule-index :stopped-time-since-last-poll] stopped-time-since-last-poll)\n                              (assoc-in [rule-index :started-before?] true)\n                              )]\n    {:db\n     (-> db\n         (assoc-in [(ns-keyword) :rules] rules-updated))}))\n\n\n(defn register-events []\n  (rf/reg-event-fx\n   (ns-keyword \"-inc-counter\")\n   inc-counter!)\n\n  (rf/reg-event-fx\n   (ns-keyword \"-rule-started-at\")\n   rule-started-at!)\n  )\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Effects\n\n(defn set-interval-handler []\n  (let [counter        (or @(rf/subscribe [(ns-keyword \"-counter\")])\n                           0) ;; default counter to 0\n        rules          @(rf/subscribe [(ns-keyword \"-rules\")])]\n\n    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n    ;; DEBUG\n    #_(js/console.log counter)\n    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n    ;; 1. traverse rules\n    (doseq [[i rule] (map-indexed vector rules)]\n      (let [{:keys [;; defined by user\n                    interval\n                    event\n                    dispatch-event-on-start?\n                    poll-when\n                    ;; populated by re-pollsive\n                    started-at\n                    started-before? ;; goes with dispatch-event-on-start?\n                    stopped-time-since-last-poll]\n             :or   {dispatch-event-on-start? false}\n             } rule\n\n            poll? (if poll-when\n                    @(rf/subscribe poll-when)\n                    true ;; default: poll immediately\n                    )\n\n            time-elapsed (- counter\n                            started-at)\n\n            started-at-effective (- counter\n                                    stopped-time-since-last-poll)\n\n            interval-rem (rem time-elapsed\n                              interval)]\n\n\n        ;; a) if polling, but don't have started-at, set started-at\n        (when (and poll?\n                   (not started-at))\n          (rf/dispatch-sync [(ns-keyword \"-rule-started-at\")\n                             {:started-at                   started-at-effective\n                              :stopped-time-since-last-poll nil\n                              :rule-index                   i}])\n\n          ;; and also handle dispatching event on start\n          (when (and dispatch-event-on-start?\n                     (not started-before?))\n            (rf/dispatch event)))\n\n\n        ;; b) once started-at is set, see if you should dispatch the event\n        (when started-at\n          (cond\n            ;; if not polling, erase started-at and track how much\n            ;; time has elapsed\n            (not poll?)\n            (do\n              (rf/dispatch-sync [(ns-keyword \"-rule-started-at\")\n                                 {:started-at                   nil\n                                  ;; using `dec` to restart where left off\n                                  :stopped-time-since-last-poll (dec interval-rem)\n                                  :rule-index                   i}])\n              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n              ;; DEBUG\n              #_(rf/dispatch-sync [:re-pollsive.events/log\n                                 (str \"stopped after: \" interval-rem \" seconds\")])\n              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n              )\n\n            ;; dispatch event if interval is met\n            (let [interval-met? (= 0\n                                   interval-rem)]\n              interval-met?)\n            (rf/dispatch event)\n\n            ;; otherwise do nothing\n            :else\n\n            nil\n            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n            ;; DEBUG\n            #_(rf/dispatch [:re-pollsive.events/log\n                          (str \"since last poll: \" interval-rem)])\n            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n            ))))\n\n    ;; 2. increment counter\n    (rf/dispatch-sync [(ns-keyword \"-inc-counter\")])\n    ))\n\n\n(rf/reg-fx\n (ns-keyword \"-init\")\n\n (fn [opts]\n   (register-subs)\n   (register-events)\n\n   (js/window.setInterval\n    set-interval-handler\n    1000 ;; 1 second\n    )))\n"]}