{
"version":3,
"file":"goog.string.newlines.js",
"lineCount":40,
"mappings":"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",
"sources":["goog/string/newlines.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for string newlines.\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string.newlines');\ngoog.provide('goog.string.newlines.Line');\n\n\n\n/**\n * Splits a string into lines, properly handling universal newlines.\n * @param {string} str String to split.\n * @param {boolean=} opt_keepNewlines Whether to keep the newlines in the\n *     resulting strings. Defaults to false.\n * @return {!Array<string>} String split into lines.\n */\ngoog.string.newlines.splitLines = function(str, opt_keepNewlines) {\n  'use strict';\n  const lines = goog.string.newlines.getLines(str);\n  return lines.map(function(line) {\n    'use strict';\n    return opt_keepNewlines ? line.getFullLine() : line.getContent();\n  });\n};\n\n\n\n/**\n * Line metadata class that records the start/end indicies of lines\n * in a string.  Can be used to implement common newline use cases such as\n * splitLines() or determining line/column of an index in a string.\n * Also implements methods to get line contents.\n *\n * Indexes are expressed as string indicies into string.substring(), inclusive\n * at the start, exclusive at the end.\n *\n * Create an array of these with goog.string.newlines.getLines().\n * @param {string} string The original string.\n * @param {number} startLineIndex The index of the start of the line.\n * @param {number} endContentIndex The index of the end of the line, excluding\n *     newlines.\n * @param {number} endLineIndex The index of the end of the line, index\n *     newlines.\n * @constructor\n * @struct\n * @final\n */\ngoog.string.newlines.Line = function(\n    string, startLineIndex, endContentIndex, endLineIndex) {\n  'use strict';\n  /**\n   * The original string.\n   * @type {string}\n   */\n  this.string = string;\n\n  /**\n   * Index of the start of the line.\n   * @type {number}\n   */\n  this.startLineIndex = startLineIndex;\n\n  /**\n   * Index of the end of the line, excluding any newline characters.\n   * Index is the first character after the line, suitable for\n   * String.substring().\n   * @type {number}\n   */\n  this.endContentIndex = endContentIndex;\n\n  /**\n   * Index of the end of the line, excluding any newline characters.\n   * Index is the first character after the line, suitable for\n   * String.substring().\n   * @type {number}\n   */\n\n  this.endLineIndex = endLineIndex;\n};\n\n\n/**\n * @return {string} The content of the line, excluding any newline characters.\n */\ngoog.string.newlines.Line.prototype.getContent = function() {\n  'use strict';\n  return this.string.substring(this.startLineIndex, this.endContentIndex);\n};\n\n\n/**\n * @return {string} The full line, including any newline characters.\n */\ngoog.string.newlines.Line.prototype.getFullLine = function() {\n  'use strict';\n  return this.string.substring(this.startLineIndex, this.endLineIndex);\n};\n\n\n/**\n * @return {string} The newline characters, if any ('\\n', \\r', '\\r\\n', '', etc).\n */\ngoog.string.newlines.Line.prototype.getNewline = function() {\n  'use strict';\n  return this.string.substring(this.endContentIndex, this.endLineIndex);\n};\n\n\n/**\n * Splits a string into an array of line metadata.\n * @param {string} str String to split.\n * @return {!Array<!goog.string.newlines.Line>} Array of line metadata.\n */\ngoog.string.newlines.getLines = function(str) {\n  'use strict';\n  // We use the constructor because literals are evaluated only once in\n  // < ES 3.1.\n  // See http://www.mail-archive.com/es-discuss@mozilla.org/msg01796.html\n  const re = RegExp('\\r\\n|\\r|\\n', 'g');\n  let sliceIndex = 0;\n  let result;\n  const lines = [];\n\n  while (result = re.exec(str)) {\n    const line = new goog.string.newlines.Line(\n        str, sliceIndex, result.index, result.index + result[0].length);\n    lines.push(line);\n\n    // remember where to start the slice from\n    sliceIndex = re.lastIndex;\n  }\n\n  // If the string does not end with a newline, add the last line.\n  if (sliceIndex < str.length) {\n    const line =\n        new goog.string.newlines.Line(str, sliceIndex, str.length, str.length);\n    lines.push(line);\n  }\n\n  return lines;\n};\n"],
"names":["goog","provide","string","newlines","splitLines","goog.string.newlines.splitLines","str","opt_keepNewlines","lines","getLines","map","line","getFullLine","getContent","Line","goog.string.newlines.Line","startLineIndex","endContentIndex","endLineIndex","prototype","goog.string.newlines.Line.prototype.getContent","substring","goog.string.newlines.Line.prototype.getFullLine","getNewline","goog.string.newlines.Line.prototype.getNewline","goog.string.newlines.getLines","re","RegExp","sliceIndex","result","exec","index","length","push","lastIndex"]
}
