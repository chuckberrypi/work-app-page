{"version":3,"sources":["work_app/matter_subs.cljs"],"mappings":"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","names":["G__41637","G__41638","re-posh.core/reg-sub","_","re_frame.core.reg_sub","re_frame.core.subscribe","cms","cljs.core.map","p__41639","vec__41640","cljs.core.nth","m-id","c-id","m-name","c-name","m-num","c-num","cljs.core/clj->js","p__41643","vec__41644","cljs.core/vec","G__41651","G__41652","re-posh.core/reg-query-sub","G__41654","G__41655","G__41656","p__41658","vec__41662","code-ids","work-app.matter-subs/str-range","cljs.core.range","cljs.core/str","p__41669","map__41670","cljs.core/--destructure-map","cljs.core.get","work-app.matter-subs/give-code-key","code","label","children","id","code-map","key","G__41672","cljs.core.assoc","cljs.core.sort_by","cljs.core/vector","cljs.core.mapv","p__41676","vec__41677","sub-key","child","G__41680","G__41681","cljs.core/not","work-app.matter-subs/key-codes","codes","p__41686","vec__41687","k","c","cljs.core/tree-seq","cljs.core/first","p__41710","vec__41711","code-opts","test"],"sourcesContent":[";; (c) David F Stearns 2023\n(ns work-app.matter-subs\n  (:require\n   ;; [work-app.subs :as s :refer [<sub]]\n   [work-app.shared :as shared :refer [<sub]]\n   [re-posh.core :as rp]\n   [re-frame.core :as rf]))\n\n(rp/reg-sub ::client-matters-query\n            (fn [_]\n              {:type :query\n               :query '[:find ?m-id ?c-id ?m-name ?c-name ?m-num ?c-num\n                        :where\n                        [?m-id :matter/name ?m-name]\n                        [?m-id :matter/number ?m-num]\n                        [?c-id :client/name ?c-name]\n                        [?c-id :client/number ?c-num]\n                        [?c-id :client/matters ?m-id]]}))\n\n(rf/reg-sub ::client-matters\n            (fn [_]\n              (rf/subscribe [::client-matters-query]))\n            (fn [cms]\n              (map (fn [[m-id c-id m-name c-name m-num c-num]]\n                     (clj->js {:m-id m-id\n                               :cm (str c-num \"-\" m-num)\n                               :client-name c-name\n                               :matter-name m-name})) cms)))\n\n(rf/reg-sub ::client-opts\n            (fn [_]\n              (rf/subscribe [::client-matters-query]))\n            (fn [cms]\n              (->> cms\n                   (map (fn [[c-id m-name c-name m-num c-num]]\n                                   {:value c-id\n                                    :label (str c-name \" (\" c-num \")\")}))\n                   vec)))\n\n(rp/reg-query-sub ::code-ids\n                  '[:find [?code-id ...]\n                    :where [?m-id :matter/codes ?code-id]])\n\n(comment\n  (datascript.core/pull  @@re-posh.db/store '[{:matter/codes [:db/id]}] 186)\n  (+ 2 2)\n  )\n\n(rp/reg-sub ::get-matter-codes\n            (fn [[_ m-id]]\n              (rf/subscribe [::code-ids m-id]))\n            (fn [code-ids]\n              {:type :pull-many\n               :pattern '[*]\n               :ids (vec code-ids)}))\n\n(def str-range (->> (range) (map str)))\n\n(defn give-code-key [{:code/keys [code label children]\n                      :db/keys [id]\n                      :as code-map}\n                     key]\n  (cond-> {:key key :label (str code \" \u2014 \"  label) :data id} ;(assoc code :key key :label (:code/label code) :data (:code/code code))\n    children (assoc :children (->> children\n                                   (sort-by :code/code)\n                                   (map vector str-range)\n                                   (mapv (fn [[sub-key child]]\n                                          (give-code-key child (str key \"-\" sub-key))))))\n    (not children) (assoc :leaf true)))\n\n(defn key-codes [codes]\n  (->> codes\n       (sort-by :code/code)\n       (map vector str-range)\n       (mapv (fn [[k c]] (give-code-key c k)))\n       clj->js))\n\n(let [codes [{:code/label \"A Label\"\n              :code/code \"A\"\n              :code/children [{:code/label \"AA Label\"\n                               :code/code \"A1\"}\n                              {:code/label \"AA Label\"\n                               :code/code \"A2\"}]}\n             {:code/label \"B Label\"\n              :code/code \"B\"\n              :code/children [{:code/label \"BB Label\"\n                               :code/code \"B1\"}\n                              {:code/label \"BB Label\"\n                               :code/code \"B2\"}]}]]\n  ;; (key-codes codes)\n  (tree-seq (fn [_] true) :code/children (first codes)))\n\n(rf/reg-sub ::matter-code-menu-opts\n            (fn [m-id]\n              (rf/subscribe [::get-matter-codes]))\n            (fn [codes _]\n              (key-codes codes)))\n\n(rf/reg-sub ::key->code-id\n            (fn [m-id]\n              (rf/subscribe [::matter-code-menu-opts]))\n            (fn [code-opts [_ test]]\n              \"test\"))\n"]}