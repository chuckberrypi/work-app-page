{"version":3,"sources":["re_dnd/subs.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","p__33826","vec__33827","cljs.core.nth","db","_","id","cljs.core.get_in","re-dnd.subs/get-dz-element","dz-id","draggable-id","cljs.core.filter","cljs.core.comp","cljs.core.partial","cljs.core/=","cljs.core/first","re-dnd.subs/drag-box-parent-bounding-rect","e","js/document","p","G__33835","re-dnd.events/bounding-rect","vec__33839","drop-zone-id","re-dnd.events/find-first-dragging-element","and__5043__auto__","p__33846","vec__33847","p__33850","vec__33851","drop-zone","cljs.core/name","drag-box","collides?","re-dnd.events/collides?","re-dnd.subs/calculate-drop-zone-collisions","dropzone-elements","cljs.core.map_indexed","i","p__33860","vec__33861","cljs.core/not","dropped-rect","cljs.core.map","p__33856","vec__33857","cljs.core._EQ_","p__33864","vec__33865","re_frame.core.subscribe","p__33868","vec__33869","mouse-pos","draggable-overlaps?","cljs.core/ffirst","draggable-being-dragged","cljs.core/vals","p1__33872#","droppeditem-being-dragged","cljs.core/flatten","p1__33873#","or__5045__auto__","p__33876","vec__33877","p__33881","vec__33882","p__33885","vec__33886","dragged-element","options","overlap-id","overlap-dropzone?","dm","sep","parts","p1__33880#","cljs.core.partition_by","dragbox","overlap-elt","sz","cljs.core/count","G__33890","js/Error","cljs.core/last","cljs.core/second","p__33891","vec__33892","mouse","drop-zones","cljs.core.into","p__33895","vec__33896","dz","dz-box","k","cljs.core.remove","p__33900","vec__33901","p__33905","vec__33906"],"sourcesContent":["(ns re-dnd.subs\n  (:require-macros [reagent.ratom :refer [reaction]])\n  (:require [re-dnd.events :as h]\n            [re-frame.core :as re-frame]\n            [taoensso.timbre :as timbre\n             :refer-macros (log  trace  debug  info  warn  error  fatal  report\n                                 logf tracef debugf infof warnf errorf fatalf reportf\n                                 spy get-env log-env)]))\n\n(re-frame/reg-sub\n :dnd/position\n (fn [db [_ id]]\n   (get-in db [:dnd/state :draggables id :position])))\n\n(defn get-dz-element\n [db dz-id draggable-id]\n (->>\n  (get-in db [:dnd/state :drop-zones dz-id])\n  (filter (comp (partial = draggable-id) :id))\n  first))\n\n(defn drag-box-parent-bounding-rect\n  \"DOM lookup, returns {:x 0 :y 0} if not found\"\n  []\n  (let [e (.getElementById js/document \"drag-box\" )\n        p (when e\n            (some-> e\n                    .-parentNode\n                    .-parentNode\n                    h/bounding-rect))]\n    (or  {:left 0 :top 0})))\n\n(re-frame/reg-sub\n :dnd/drag-box\n (fn [db _]\n   (let [[drop-zone-id draggable-id] (h/find-first-dragging-element db)\n                   ]\n     (if (and drop-zone-id draggable-id)\n       (-> (get-dz-element db drop-zone-id draggable-id)\n           :position)\n       ;;else\n       (when draggable-id\n         (get-in db [:dnd/state :draggables draggable-id :position]))))))\n\n(re-frame/reg-sub\n :dnd/db\n (fn [db _]\n   db))\n\n(re-frame/reg-sub\n :dnd/drag-status\n (fn [db [_ id drop-zone-id]]\n   (if drop-zone-id\n     (:status (get-dz-element db drop-zone-id id))\n     (get-in db [:dnd/state :draggables id :status]))))\n\n(re-frame/reg-sub\n :dnd/draggable-overlaps?\n (fn [db [_ id]]\n   ;;returns true if the position of :drag-box overlaps the drop-zone with the supplied id.\n   (let [drop-zone (h/bounding-rect (.getElementById\n                                     js/document\n                                     (str \"drop-zone-\" (name id))))\n         drag-box  (h/bounding-rect (.getElementById\n                                     js/document\n                                     \"drag-box\"))\n         collides? (h/collides? drop-zone drag-box)]\n     collides?)))\n\n(re-frame/reg-sub\n :dnd/mouse-position\n (fn [db _]\n   (get-in db [:dnd/state :mouse-position])))\n\n(defn calculate-drop-zone-collisions\n  \"Returns a list of tuples of [<dropzone-id> <index>]\"\n  [dropzone-elements]\n  (let [drag-box (h/bounding-rect (.getElementById js/document \"drag-box\"))]\n    (->> dropzone-elements\n         (map-indexed (fn [i e]\n                        [(inc i) e]))\n         (filter\n          (fn [[i e]]\n            (if (not (:id e))\n              false\n              (let [dropped-rect (h/bounding-rect\n                                  (.getElementById\n                                   js/document\n                                   (str \"dropped-element-\" (name (:id e)))))]\n                (h/collides? dropped-rect drag-box)))))\n         (map (fn [[i e]]\n                [(:id e)\n                 (if  (= 1 i)\n                   ;; is top of dragbox higher than dropped rec?\n                   ;; then return index 0, 1 otherwise, to\n                   ;; allow special case of moving to top\n                   (let [dropped-rect (h/bounding-rect\n                                       (.getElementById\n                                        js/document\n                                        (str \"dropped-element-\" (name (:id e)))))]\n                     (if (<= (:top drag-box) (:top dropped-rect))\n                       0 1))\n                   i\n                   )])))))\n\n(re-frame/reg-sub\n :dnd/dropped-item-overlap-id\n (fn [[_ id] _]\n   ;; we need this to trigger a re-run of this sub when the mouse moves.\n   ;; these derived signal graphs only rerun if signal changes,\n   ;; but draggable-overlaps? can become stable\n   ;; we do need that one for improved efficiency\n   [(re-frame/subscribe [:dnd/mouse-position])\n    (re-frame/subscribe [:dnd/draggable-overlaps? id])\n    (re-frame/subscribe [:dnd/dropped-elements id])])\n (fn [[mouse-pos draggable-overlaps? dropzone-elements]]\n   ;;returns true if the position of :drag-box overlaps the dragtarget of the supplied id.\n   (if-not draggable-overlaps?\n     nil\n     ;;else ,we have overlap, calculate with which of the dropped elements we collide, and return the first one if there's more than one\n     (-> dropzone-elements\n         calculate-drop-zone-collisions\n         ffirst))))\n\n(re-frame/reg-sub\n :dnd/dragged-element\n (fn [db _]\n   (let [draggable-being-dragged   (->>\n                                    db\n                                    :dnd/state\n                                    :draggables\n                                    vals\n                                    (filter #(= :dragging (:status %)))\n                                    first)\n         droppeditem-being-dragged (->>\n                                    db\n                                    :dnd/state\n                                    :drop-zones\n                                    vals\n                                    flatten\n                                    (filter #(= :dragging (:status %)))\n                                    first)]\n     (or draggable-being-dragged droppeditem-being-dragged))))\n\n(re-frame/reg-sub\n :dnd/dragdrop-options\n (fn [db [_ id]]\n   (get-in db [:dnd/state :drop-zone-options id])))\n\n(re-frame/reg-sub\n :dnd/dropped-elements-with-drop-marker\n (fn [[_ id] _]\n   [(re-frame/subscribe [:dnd/dragged-element])\n    (re-frame/subscribe [:dnd/dragdrop-options id])\n    (re-frame/subscribe [:dnd/dropped-item-overlap-id id])\n    (re-frame/subscribe [:dnd/draggable-overlaps? id])\n    (re-frame/subscribe [:dnd/dropped-elements id])])\n (fn [[dragged-element options overlap-id overlap-dropzone? dropzone-elements]]\n   (if (and (or overlap-dropzone? overlap-id) dragged-element)\n     ;;we have overlap, and there is dragging going on, insert the separator in there.\n     (let [dm          (:drop-marker options)\n           sep         (if dm\n                         {:type dm\n                          :id   dm}\n                         {:type :dnd/drop-marker\n                          :id   :dnd/drop-marker})\n           parts       (partition-by #(= overlap-id (:id %)) dropzone-elements)\n           dragbox     (h/bounding-rect (.getElementById js/document \"drag-box\"))\n           overlap-elt (when overlap-id\n                         (h/bounding-rect\n                          (.getElementById\n                           js/document\n                           (str \"dropped-element-\" (name overlap-id)))))\n           sz          (count parts)]\n       (flatten\n        (case sz\n          0 [sep]\n          1 [(first parts) sep]\n          2 (if (= overlap-id (-> parts ffirst :id))\n              (if (<= (:top dragbox) (:top overlap-elt ))\n                [sep (first parts) (last parts)]\n                [(first parts) sep (last parts)])\n              ;;else, put sep at the back\n              [(first parts) (last parts) sep])\n          3 [(first parts) (second parts) sep (last parts)])))\n     ;;else no dragging going on, return the elements\n     dropzone-elements)))\n\n(re-frame/reg-sub\n :dnd/get-colliding-drop-zone-and-index\n ;; Returns collisions of currently dragged elements with drop-zone(s)\n ;; Returns a map from drop-zone-id\n :<- [:dnd/mouse-position]\n :<- [:dnd/drop-zones]\n :<- [:dnd/dragged-element]\n (fn [[mouse drop-zones dragged-element]]\n   (into {}\n         (comp\n          (map\n           (fn [[dz-id dz]]\n             (let [drag-box (h/bounding-rect (.getElementById js/document \"drag-box\"))\n                   dz-box   (h/bounding-rect (.getElementById js/document (str \"drop-zone-\" (name dz-id))))\n                   k        (when (h/collides? drag-box dz-box)\n                              dz-id)]\n               [k (calculate-drop-zone-collisions dz)])))\n          (remove\n           (fn [[k _]]\n             (nil? k))))\n         drop-zones)))\n\n(re-frame/reg-sub\n :dnd/drop-zones\n (fn [db _]\n   (get-in db [:dnd/state :drop-zones])))\n\n(re-frame/reg-sub\n :dnd/dropped-elements\n (fn [db [_ id]]\n   (get-in db [:dnd/state :drop-zones id])))\n"]}