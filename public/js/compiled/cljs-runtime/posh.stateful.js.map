{"version":3,"sources":["posh/stateful.cljc"],"mappings":"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","names":["posh.stateful/get-posh-atom","posh-item","cljs.core/meta","posh.stateful/poshdb->conn","poshdb","cljs.core/deref","posh.lib.db/poshdb->attrs","posh.stateful/new-posh","dcfg","retrieve","cljs.core.atom","posh.core/empty-tree","posh.stateful/add-db","posh-atom","db-id","conn","schema","opts","cljs.core/with-meta","cljs.core/reset!","posh.core.add_db","posh.stateful/add-pull","pull-pattern","eid","posh.core/add-pull","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","posh.stateful/add-q","seq25000","G__25001","cljs.core/first","cljs.core/next","self__5754__auto__","query","args","cljs.core.remove","cljs.core/nil?","cljs.core.map","cljs.core.apply","cljs.core.partial","posh.core/add-q","posh.stateful/add-filter-tx","tx-patterns","p1__25002#","cljs.core.swap_BANG_","posh.core/add-filter-tx","posh.stateful/add-filter-pull","p1__25005#","posh.core/add-filter-pull","posh.stateful/add-filter-q","seq25007","G__25008","p1__25006#","posh.core/add-filter-q","posh.stateful/rm","posh.core/remove-item","posh.stateful/transact","tx","posh.core/add-tx","posh.stateful/transact-all!","posh.core/process-tx!","posh.stateful/cache","posh-query","cljs.core.get","posh.stateful/results","posh.stateful/reload-patterns","posh.stateful/pass-patterns","posh.stateful/datoms","posh.stateful/datoms-t"],"sourcesContent":["(ns posh.stateful\n  (:require [posh.core :as p]\n            [posh.lib.db :as db]\n            [posh.lib.update :as u]))\n\n(defn get-posh-atom [posh-item]\n  (:posh (meta posh-item)))\n\n(defn poshdb->conn [poshdb]\n  (:conn (db/poshdb->attrs @(get-posh-atom poshdb) poshdb)))\n\n(defn new-posh [dcfg retrieve]\n  (atom (p/empty-tree dcfg retrieve)))\n\n(defn add-db [posh-atom db-id conn schema opts]\n  (with-meta\n    (:return (reset! posh-atom (p/add-db @posh-atom db-id conn schema opts)))\n    {:posh posh-atom}))\n\n;;;;;;;;; adding queries  ;;;;;;;;;;\n\n(defn add-pull [poshdb pull-pattern eid]\n  (let [posh-atom (get-posh-atom poshdb)]\n    (with-meta\n      (:return (reset! posh-atom (p/add-pull @posh-atom poshdb pull-pattern eid)))\n      {:posh posh-atom})))\n\n(defn add-q [query & args]\n  (let [posh-atom (first (remove nil? (map get-posh-atom args)))]\n    (with-meta\n      (:return (reset! posh-atom (apply (partial p/add-q @posh-atom query) args)))\n      {:posh posh-atom})))\n\n\n;;;;;;;;; adding filters  ;;;;;;;;;;\n\n(defn add-filter-tx [poshdb tx-patterns]\n  (let [posh-atom (get-posh-atom poshdb)]\n    (with-meta\n      (:return (swap! posh-atom #(p/add-filter-tx % poshdb tx-patterns)))\n      {:posh posh-atom})))\n\n(defn add-filter-pull [poshdb pull-pattern eid]\n  (let [posh-atom (get-posh-atom poshdb)]\n    (with-meta\n      (:return (swap! posh-atom #(p/add-filter-pull % poshdb pull-pattern eid)))\n      {:posh posh-atom})))\n\n(defn add-filter-q [query & args]\n  (let [posh-atom (first (remove nil? (map get-posh-atom args)))]\n    (with-meta\n      (:return (swap! posh-atom #(apply p/add-filter-q % query args)))\n      {:posh posh-atom})))\n\n;;;; removing item ;;;;\n\n(defn rm [posh-item]\n  (let [posh-atom (get-posh-atom posh-item)]\n    (reset! posh-atom (p/remove-item @posh-atom posh-item))))\n\n;;;;;;;;;; TX ;;;;;;;;;;;;;\n\n;; just adds tx to posh, call process-transact! to actually do them\n\n\n(defn transact [posh-item tx]\n  (let [posh-atom (get-posh-atom posh-item)]\n    (do\n      (reset! posh-atom (p/add-tx @posh-atom posh-item tx))\n      true)))\n\n(defn transact-all! [posh-atom]\n  (reset! posh-atom (p/process-tx! @posh-atom)))\n\n\n;;;;;;;;;  get info from a query ;;;;;;;;;;;;;;;\n(defn cache [posh-query]\n  (get (:cache @(get-posh-atom posh-query)) posh-query))\n\n(defn results [posh-query]\n  (:results (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn reload-patterns [posh-query]\n  (:reload-patterns (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn pass-patterns [posh-query]\n  (:pass-patterns (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn datoms [posh-query]\n  (:datoms (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n(defn datoms-t [posh-query]\n  (:datoms-t (get (:cache @(get-posh-atom posh-query)) posh-query)))\n\n"]}