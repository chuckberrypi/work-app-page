{"version":3,"sources":["posh/lib/datom_matcher.cljc"],"mappings":";AAGA,oDAAA,pDAAMA,gHAAsBC,QAAQC;;AAApC,AACE,GAAI,AAACC,uBAAOF;AAAZ;;AAEE,oBAAM,iBAAMG,IAAE,AAACC,gBAAMJ;AAAf,AACE,IAAAK,mBACC,+CAAA,AAAA,/CAACC,6CAAEH;AADJ,AAAA,GAAAE;AAAAA;;AAAA,IAAAA,uBAEC,iBAAAE,oBAAK,AAACC,qBAAKL;AAAX,AAAA,GAAAI;AAAc,IAAAE,WAAG,AAACL,gBAAMH;AAAV,AAAA,0EAAAQ,wBAAAA,1FAACN,kCAAAA,4CAAAA;;AAAfI;;;AAFD,AAAA,oBAAAF;AAAAA;;AAGC,OAACC,6CAAEH,EAAE,AAACC,gBAAMH;;;;AAJrB,AAKE,eAAO,AAACS,eAAKV;eAAS,AAACU,eAAKT;;;;;AAL9B;;;;;;AAOJ,4CAAA,5CAAMU,gGAAcC,SAASX;AAA7B,AACE,sBAAA,WAAAY,1BAACC;AAAD,AAAO,yDAAAD,lDAACd,mEAAuBE;GAAOW;;AAExC,iDAAA,jDAAMG,0GAAmBH,SAASI;AAAlC,AACE,IAAAC,WAAML;AAAN,AAAA,GAAA,AAAAN,6CAAA,KAAAW;AAAA;;AAAA,GAAA,AAAAX,6CAAA,iCAAAW;AAAA;;AAAA,GAAA,AAAAX,6CAAA,mFAAA,yCAAAW;AAAA;;AAAA,AAIE,sBAAA,WAAAC,1BAACJ;AAAD,AAAO,0DAAAI,nDAACP,0CAAaC;GAAYI;;;;;;AAErC,yCAAA,zCAAMG,0FAAiBP,SAASI;AAAhC,AACE,IAAAI,WAAMR;AAAN,AAAA,GAAA,AAAAN,6CAAA,iCAAAc;AACKJ;;AADL,GAAA,AAAAV,6CAAA,mFAAA,yCAAAc;AAEOJ;;AAFP,GAAA,AAAAV,6CAAA,KAAAc;AAAA;;AAAA,AAIE,sDAAA,WAAAC,1DAACC;AAAD,AAAS,0DAAAD,nDAACV,0CAAaC;GAAYI;;;;;;AAEvC,wCAAA,xCAAMO,wFAAgBC,OAAOC,WAAWb,SAASc,aAAaC;;AAA9D,AACE,GAAI,AAACzB,uBAAOU;AAAZ,kDAAA,kJAAA,9EACiB,AAACgB,eAAK,AAACC,cAAI,AAACD,eAAKJ,OAAOC,aAAaC,4FAChCC;;AACpB,GAAI,AAACrB,6CAAEmB,WAAW,AAACf,eAAK,AAACN,gBAAMQ;AAC7B,eAAO,AAACkB,gDAASN,OAAO,EAAI,AAAChB,qBAAK,AAACuB,iBAAOnB,YAChB,AAACmB,iBAAOnB,UACR,cAAA,dAACoB,iGAAK,AAACD,iBAAOnB;eACjCa;eACA,AAACf,eAAKE;eACNc;eACAC;;;;;;;;AACP,eAAOH;eAAOC;eAAW,AAACf,eAAKE;eAAUc;eAClC,AAACE,eAAK,AAACxB,gBAAMQ,UAAUe;;;;;;;;;;;;AAEpC,yCAAA,zCAAMM,0FAAiBrB;AAAvB,AACE,mBAAA,fAAOc;IACAC,oBAAkBf;;AADzB,AAEE,GAAI,AAACV,uBAAOyB;AACVD;;AACA,GAAI,iBAAMQ,KAAG,AAACH,iBAAOJ;AAAjB,AACE,SAAI,AAACnB,qBAAK0B,SAAI,OAASA;;AAC3B,IAAMC,IAAE,sCAAA,oHAAA,1JAACZ,wEAAmB,AAACb,eAAK,AAACN,gBAAMuB,oBACjBA,kBACAD;AAFxB,AAIE,eAAO,AAAA,kGAAeS;eAAG,AAAA,4GAAoBA;;;;;AAC/C,eAAO,AAACP,eAAK,AAACxB,gBAAMuB,mBAAmBD;eAAc,AAAChB,eAAKiB;;;;;;;;;AAEnE","names":["posh.lib.datom-matcher/datom-match-pattern?","pattern","datom","cljs.core/empty?","p","cljs.core/first","or__5045__auto__","cljs.core._EQ_","and__5043__auto__","cljs.core/set?","G__22445","cljs.core/rest","posh.lib.datom-matcher/datom-match?","patterns","p1__22446#","cljs.core/some","posh.lib.datom-matcher/any-datoms-match?","datoms","G__22449","p1__22448#","posh.lib.datom-matcher/matching-datoms","G__22454","p1__22453#","cljs.core.filter","posh.lib.datom-matcher/combine-entids","entids","rest-datom","new-patterns","leftover-patterns","cljs.core/cons","cljs.core/vec","clojure.set.union","cljs.core/ffirst","cljs.core/set","posh.lib.datom-matcher/reduce-patterns","id","r"],"sourcesContent":["(ns posh.lib.datom-matcher\n  (:require [clojure.set :as cs]))\n\n(defn datom-match-pattern? [pattern datom]\n  (if (empty? pattern)\n    true\n    (when (let [p (first pattern)]\n            (or\n             (= p '_)\n             (and (set? p) (p (first datom)))\n             (= p (first datom))))\n      (recur (rest pattern) (rest datom)))))\n\n(defn datom-match? [patterns datom]\n  (some #(datom-match-pattern? % datom) patterns))\n\n(defn any-datoms-match? [patterns datoms]\n  (case patterns\n    nil nil\n    [] nil\n    [[]] true\n    (some #(datom-match? patterns %) datoms)))\n\n(defn matching-datoms [patterns datoms]\n  (case patterns\n    [] datoms\n    [[]] datoms\n    nil nil\n    (filter #(datom-match? patterns %) datoms)))\n\n(defn combine-entids [entids rest-datom patterns new-patterns leftover-patterns]\n  (if (empty? patterns)\n    {:new-patterns (cons (vec (cons entids rest-datom)) new-patterns)\n     :leftover-patterns leftover-patterns}\n    (if (= rest-datom (rest (first patterns)))\n      (recur (cs/union entids (if (set? (ffirst patterns))\n                                (ffirst patterns)\n                                (set [(ffirst patterns)])))\n             rest-datom\n             (rest patterns)\n             new-patterns\n             leftover-patterns)\n      (recur entids rest-datom (rest patterns) new-patterns\n             (cons (first patterns) leftover-patterns)))))\n\n(defn reduce-patterns [patterns]\n  (loop [new-patterns []\n         leftover-patterns patterns]\n    (if (empty? leftover-patterns)\n      new-patterns\n      (if (let [id (ffirst leftover-patterns)]\n            (or (set? id) (number? id)))\n        (let [r (combine-entids #{} (rest (first leftover-patterns))\n                                leftover-patterns\n                                new-patterns\n                                [])]\n          (recur (:new-patterns r) (:leftover-patterns r)))\n        (recur (cons (first leftover-patterns) new-patterns) (rest leftover-patterns))))))\n\n(comment\n  (datom-match? '[#{123 88 32} :jimmy _] '[123 :jimmy \"hey\"])\n\n  (datom-match-patterns? '[[88 :deandog]\n                           [#{123 88 32} :jimmy _]] '[123 :jimmy \"hey\"])\n\n  (any-datoms-match? '[[88 :deandog]\n                       [#{123 88 32} :jimmy _]]\n                     '[[28882 :major \"billy\"] [123 :jimmy \"hey\"]])\n\n  \n  )\n"]}