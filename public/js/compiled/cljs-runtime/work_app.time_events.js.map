{"version":3,"sources":["work_app/time_events.cljs"],"mappings":"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","names":["work-app.time-events/quot-rem","cljs.core.juxt","cljs.core/quot","cljs.core/mod","work-app.time-events/order-step","work-app.time-events/log-var","var","js/console.log","cljs.core/name","var_args","G__35054","work-app.time-events/range-step","js/Error","work_app.time_events.range_step","step","start","cljs.core/LazySeq","cljs.core/cons","end","p1__35052#","cljs.core.take_while","work-app.time-events/chunks-of-gen","chunks-of","n","vec__35056","cljs.core.nth","q","r","cljs.core/abs","G__35059","cljs.core.repeat","cljs.core.not_EQ_","p1__35055#","cljs.core.map","re_frame.core.reg_event_db","db","_","work-app.schema/schema-update","cljs.core/not","G__35060","G__35061","re-posh.core/reg-event-fx","p__35062","vec__35063","t-ids","cljs.core.mapv","tid","p__35066","vec__35067","t-id","work_app.schema.schema_update","p__35070","vec__35071","key","c-id","work-app.schema/schema-assoc","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__35074","map__35075","cljs.core/--destructure-map","cljs.core.get","now","year","month","day","new-date","js/Date","p__35076","vec__35077","date","G__35080","G__35081","G__35082","re-posh.core/inject-cofx","p__35083","p__35084","map__35085","vec__35086","seq__35087","cljs.core/seq","first__35088","cljs.core/first","cljs.core/next","vec__35089","ds","m-id","val","work-app.schema/schema-get","max-id","G__35092","G__35093","G__35094","G__35095","datascript.core/q","work_app.schema.schema_assoc","G__35096","G__35097","G__35098","p__35099","p__35100","map__35101","vec__35102","vec__35105","starting-time","G__35108","G__35109","G__35110","p__35111","map__35112","cljs.core/dissoc","p__35113","p__35114","map__35115","vec__35116","eid","p__35119","vec__35120","codes","cljs.core.reduce","acc","v","p__35123","vec__35124","p__35127","p__35128","map__35129","vec__35130","work-app.time-events/candidates-to-tx","candidates","delta","candidates-map","cljs.core.assoc","G__35137","vec__35138","seq__35139","first__35140","vec__35148","seq__35149","first__35150","d-first","d-rest","cand-map","changed","target-task","G__35151","cljs.core/vals","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop_while","t","new-time","p1__35133#","cljs.core.filter","G__35154","p__35152","map__35153","e","time","cljs.core/assoc-in","js/Math.round","cljs.core.conj","work-app.time-events/time-filter","delt","G__35156","G__35157","G__35158","p__35159","p__35160","map__35161","vec__35162","map__35165","unlocked","task","datascript.core/entity","recipient-ids","p1__35155#","cljs.core.remove","cljs.core._EQ_","recipients","G__35166","G__35167","G__35168","G__35169","G__35170","recipient-total-time","cljs.core/+","transactions","cljs.core.into","cljs.core/count","G__35171","G__35172","G__35173","p__35174","p__35175","map__35176","vec__35177","map__35180","p__35181","p__35182","map__35183","vec__35184","start-timer","original-time","pull-result","G__35187","G__35188","G__35189","datascript.core/pull","old-time","p__35190","vec__35191","G__35194","G__35195","G__35196","p__35197","p__35198","map__35199","vec__35200","dropped-on","dragged-over-position","temp__5802__auto__","dragged","work-app.time-events/get-mid-by-tid","G__35203","G__35204","G__35205","work-app.time-events/get-sib-tasks-and-orders","G__35206","G__35207","G__35208","work-app.time-events/re-order-txs","index","sibs","beg","cljs.core.take","cljs.core.drop","new-raw","cljs.core.concat","txs","p1__35209#","p2__35210#","p__35211","map__35212","order","G__35213","G__35214","G__35215","p__35216","p__35217","map__35218","vec__35219","after?","map__35222","dropped-on-order","dropped-on-code","dropped-on-date","dropped-on-m","G__35223","G__35224","G__35225","dropped-on-mid","dragged-mid","p__35226","map__35227","p__35228","map__35229","o","fexpr__35230","cljs.core/>=","cljs.core/>","G__35231","G__35232","G__35233","p__35234","p__35235","map__35236","vec__35237","above","eids","G__35240","G__35241","G__35242","p__35243","p__35244","map__35245","vec__35246","map__35249","cofx","start?","description","id","matter-id","task-id","c","args","default-c","G__35250","G__35251","G__35252","new-t-id","new-order","or__5045__auto__","G__35253","G__35254","G__35255","G__35256","new-task","p__35257","vec__35258","seq__35259","first__35260","uncheck?","p__35261","vec__35262","pos","G__35265","G__35266","G__35267","p__35268","p__35269","map__35270","vec__35271","map__35274","uuid","before-t-id","map__35275","vec__35276","before-code","before-order","before-date","matter","G__35279","G__35280","G__35281","later-tasks","cljs.core/second","G__35282","G__35283","G__35284","next-eid","order-above","re-order-above","next-order","js/Math.ceil","iter__5523__auto__","s__35286","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__35288","cljs.core/chunk-buffer","i__35287","vec__35289","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35285","cljs.core/chunk-rest","vec__35292","cljs.core/rest","p__35295","vec__35296","no","G__35299","G__35300","G__35301","p__35302","p__35303","map__35304","vec__35305","map__35308","desc","cljs.core/chunk-first"],"sourcesContent":[";; (c) David F Stearns 2023\n(ns work-app.time-events\n  (:require\n   [work-app.schema :as schema :refer [app-schema schema-update schema-get schema-assoc]]\n   [work-app.macs :as mcr :include-macros true]\n\n   [re-frame.core :as rf]\n   [re-posh.core :as rp]\n   [malli.core :as m]\n   [malli.error :as me]\n   [malli.generator :as mg]\n   [malli.provider :as mp]\n   [malli.util :as mu]\n   [reagent.core :as r]\n   [goog.object :as go]\n\n   [datascript.core :as ds]\n   [work-app.subs :as s]))\n\n(def quot-rem\n  (juxt quot mod))\n\n(def order-step 64)\n\n(defn log-var [var]\n  (js/console.log (str (name (quote var)) \": \" var)))\n\n(defn range-step\n  ([] (range-step 1))\n  ([step] (range-step step 0))\n  ([step start] (lazy-seq (cons start (range-step step (+ start step)))))\n  ([step start end] (take-while #(> end %) (range-step step start))))\n\n(defn chunks-of-gen [chunks-of]\n  (fn [n]\n    (let [[q r] (quot-rem (abs n) chunks-of)]\n      (cond->> chunks-of\n        true (repeat q)\n        (not= 0 r) (cons r)\n        (neg? n) (map #(- %))))))\n\n(rf/reg-event-db ::toggle-move-dialog-visible\n                 (fn [db _]\n                   (schema-update db \"move-dialog-visible\" not)))\n\n(rp/reg-event-fx ::delete-tasks\n                 (fn [_ [_ t-ids]]\n                   {:transact (mapv (fn [tid] [:db/retractEntity tid]) t-ids)}))\n\n(rf/reg-event-db ::toggle-check\n                 (fn [db [_ t-id]]\n                   (schema-update db \"t-checked\" not {:sub-args [t-id]})))\n\n(rf/reg-event-db ::set-selected-code\n                 (fn [db [_ key c-id]]\n                   (schema-assoc db \"time-selected-code-key-and-id\" [key c-id])))\n\n(rf/reg-event-fx ::time-set-selected-date-today\n                 [(rf/inject-cofx :work-app.events/now)]\n                 (fn [{:keys [^js/Date now]} _]\n                   ;; extracting y-m-d prevents time from messing stuff up.\n                   (let [year (.getFullYear now)\n                         month (.getMonth now)\n                         day (.getDate now)\n                         new-date (js/Date. year month day)]\n                     {:fx [[:dispatch [::time-set-selected-date new-date]]]})))\n\n(rf/reg-event-db ::time-set-selected-date\n                 (fn [db [_ date]]\n                   (schema-assoc db \"time-selected-date\" date)))\n\n(rp/reg-event-fx ::set-matter-last-active-timer\n [(rp/inject-cofx :ds)]\n (fn [{:keys [db ds]} [_ m-id & [val]]]\n   (let [date (schema-get db \"time-selected-date\")\n         max-id (ds/q '[:find ?t-id .\n                        :in $ ?m-id ?date\n                        :where\n                        [?t-id :task/date ?date]\n                        [?m-id :matter/tasks ?t-id]\n                        ]\n                      ds m-id date)]\n     {:db (if val\n            (schema-assoc db \"matter-last-active-timer\" val m-id)\n            (schema-assoc db \"matter-last-active-timer\" max-id m-id))})))\n\n(rp/reg-event-fx ::start-task-timer\n                 [(rp/inject-cofx :ds)\n                  (rp/inject-cofx :work-app.events/now)]\n                 (fn [{:keys [db ds now]} [_ t-id]]\n                   (js/console.log now)\n                   (let [[m-id starting-time] ;(:db/id (ds/pull ds '[:matter/_tasks] t-id))\n                         (ds/q '[:find [?m ?time]\n                                 :in $ ?t-id\n                                 :where\n                                 [?m :matter/tasks ?t-id]\n                                 [?t-id :task/time ?time]]\n                                ds t-id)\n                         ]\n                     {:db (-> db\n                              (schema-assoc \"active-timer-m-id\" m-id)\n                              (schema-assoc \"active-timer-t-id\" t-id)\n                              (schema-assoc \"matter-last-active-timer\" t-id m-id))\n                     :fx [[:dispatch [:work-app.events/ticker-set-timed-event\n                                      {:id :active-timer\n                                       :interval 1\n                                       :task-id t-id\n                                       :event [::task-tick t-id now starting-time]}]]]})))\n\n(rf/reg-event-fx ::stop-task-timer\n                 (fn [{:keys [db]} _]\n                   {:db (-> db\n                            (schema-assoc \"active-timer-m-id\" false)\n                            (schema-assoc \"active-timer-t-id\" false)\n                            (schema-update \"ticker-tasks\" dissoc {:fn-args [:active-timer]}))}))\n\n(rf/reg-event-fx ::set-draggable\n                 (fn [{db :db} [_ eid val]]\n                   {:db (schema-assoc db \"draggable\" val eid)}))\n\n(rf/reg-event-db ::set-edit-mode\n                 (fn [db [_ codes val]]\n                   (reduce (fn [acc v]\n                             (schema-assoc acc \"code-edit-mode\" val v))\n                           db\n                           codes)\n                   ;; (schema-assoc db \"edit-mode\" val)\n                   ))\n\n(rf/reg-event-db ::toggle-code-edit\n                 (fn [db [_ c-id]]\n                   (schema-update db \"code-edit-mode\" not {:sub-args [c-id]})))\n\n(rf/reg-event-fx ::time-task-slider-lock-toggle\n                  (fn [{:keys [db]} [_ t-id]]\n                    {:db (schema-update db \"t-slider-locked\" not {:sub-args [t-id]})}))\n\n(defn candidates-to-tx [candidates delta]\n  (let [candidates-map (reduce (fn [acc v] (assoc acc (:e v) v)) {} candidates)]\n    (loop [[d-first & d-rest] ((chunks-of-gen 360) delta)\n           cand-map           candidates-map\n           changed            #{}]\n      (let [target-task (cond->> cand-map\n                          true           vals\n                          true           (sort-by :time)\n                          (pos? d-first) reverse\n                          (pos? delta)   (drop-while (fn [t] (< (:time t) 1)))\n                          true           first)\n            new-time    (- (:time target-task) d-first)]\n        (if (or\n             (nil? d-first)\n             (nil? target-task)\n             (> 0 new-time))\n          ;[changed cand-map]\n          (->> cand-map\n               vals\n               (filter #(changed (:e %)))\n               (mapv (fn [{:keys [e time]}] [:db/add e :task/time time])))\n          (recur d-rest\n                 (assoc-in cand-map [(:e target-task) :time] (js/Math.round new-time))\n                 (conj changed (:e target-task))))))))\n\n(defn time-filter [delt time]\n  (if (pos? delt)\n    (<= delt time)\n    true))\n\n(rp/reg-event-fx ::slider-change-locked-ds\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ {:keys [t-id time unlocked]}]]\n                   (let [task                 (ds/entity ds t-id)\n                         delta                (- time (:task/time task))\n                         recipient-ids        (remove #(= t-id %) unlocked)\n                         recipients           (ds/q '[:find ?e ?time\n                                                      :keys e time\n                                                      :in $ [?e ...] ?delt ?t-filter\n                                                      :where\n                                                      [?e :task/time ?time]\n                                                      [(?t-filter ?delt ?time)]]\n                                                    ds recipient-ids delta time-filter)\n                         recipient-total-time (->> recipients (map :time) (reduce +))\n                         transactions         (into [[:db/add t-id :task/time (js/Math.round time)]]\n                                                    (candidates-to-tx recipients delta))]\n                     {:fx       []\n                      :transact (if (or (< recipient-total-time delta)\n                                        (< (count recipients) 1))\n                                  []\n                                  transactions)})))\n\n(rp/reg-event-fx ::time-set-task-time-ds\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds]} [_ {:keys [t-id time]}]]\n                   {:transact [{:db/id t-id :task/time (js/Math.round time)}]}))\n\n(rf/reg-event-fx ::task-tick\n                 [(rp/inject-cofx :ds)\n                  (rp/inject-cofx :work-app.events/now)]\n                 (fn [{:keys [ds now]} [_ t-id start-timer original-time]]\n                   (let [pull-result (ds/pull ds '[:task/time] t-id)\n                         old-time    (:task/time pull-result)\n                         delt        (js/Math.round (/ (- now start-timer) 1000))\n                         new-time    (+ original-time delt)\n                         ]\n                     {:transact [[:db/add t-id :task/time new-time]]})))\n\n(rf/reg-event-db ::set-dragged-task\n                 (fn [db [_ t-id]]\n                   (schema-assoc db \"dragged-task\" t-id)))\n\n(rp/reg-event-fx ::task-drop\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ dropped-on dragged-over-position]]\n                   (if-let [dragged (schema-get db \"dragged-task\")]\n                     {:fx [[:dispatch [::insert-task-after-or-before dragged dropped-on (< 0.5 dragged-over-position)]]\n                           [:work-app.events/log (str \"dragged: \" dragged \"\\ndropped-on: \" dropped-on)]]})))\n\n(defn get-mid-by-tid [ds t-id]\n  (ds/q '[:find ?mid .\n          :in $ ?t-id\n          :where [?mid :matter/tasks ?t-id]]\n        ds t-id))\n\n(defn get-sib-tasks-and-orders [ds t-id]\n  (->>\n   (ds/q '[:find ?eid ?order\n               :keys eid order\n               :in $ ?t-id\n               :where\n                   [?t-id :task/date ?date]\n                   [?eid :task/date ?date]\n                   [?t-id :task/code ?code]\n                   [?eid :task/code ?code]\n                   [?m-id :matter/tasks ?t-id]\n                   [?m-id :matter/tasks ?eid]\n                   [?eid :task/order ?order]\n               ]\n             ds t-id)\n   (sort-by :order)\n   ;; (remove (fn [{eid :eid}] (= eid t-id)))\n   ))\n\n(defn re-order-txs [t-id index sibs]\n  (let [beg (take index sibs)\n        end (drop index sibs)\n        new-raw (concat beg [{:eid t-id}] end)\n        txs (->> (range-step order-step)\n         (map #(assoc %1 :order %2) new-raw)\n         (mapv (fn [{:keys [order eid]}] [:db/add eid :task/order order])))]\n    txs))\n\n(comment\n  (re-order-txs 999 -1 '({:order 0 :eid 0} {:order 1 :eid 1} {:order 2 :eid 2} {:order 3 :eid 3})))\n\n(rp/reg-event-fx ::insert-task-after-or-before\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ dragged dropped-on after?]]\n                   (let [{dropped-on-order :task/order\n                          dropped-on-code  :task/code\n                          dropped-on-date  :task/date\n                          dropped-on-m     :matter/_tasks} (ds/pull ds '[:matter/_tasks :task/order :task/code :task/date] dropped-on)\n                         dropped-on-mid                    (:db/id dropped-on-m)\n                         dragged-mid                       (get-mid-by-tid ds dragged)\n                         sibs                              (remove (fn [{eid :eid}] (= eid dragged)) (get-sib-tasks-and-orders ds dropped-on))\n                         index                             (count (take-while (fn [{o :order}] ((if after? >= >) dropped-on-order o)) sibs))\n                         txs                               (re-order-txs dragged index sibs)]\n                     {:transact (into\n                                 [[:db/retract dragged-mid :matter/tasks dragged]\n                                  [:db/add dropped-on-mid :matter/tasks dragged]\n                                  [:db/add dragged :task/code dropped-on-code]\n                                  [:db/add dragged :task/date dropped-on-date]\n                                  ]\n                                 txs)})))\n\n(rp/reg-event-fx ::re-order-above\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds]} [_ above eids]]\n                   {:fx [[:work-app.events/log (str \"re-order-above: \" above eids)]]\n                    :transact (mapv (fn [order eid]\n                                      [:db/add eid :task/order order])\n                                    (drop 1 (range-step order-step above))\n                                    eids)}))\n\n(rp/reg-event-fx ::add-task\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db] :as cofx}\n                      [_ {:keys [start? description order time id date matter-id task-id c]\n                          :or   {start?      false\n                                 description \"\"\n                                 time        1\n                                 }\n                          :as   args}]]\n                   (let [default-c (ds/q '[:find (min ?c-id) .\n                                           :in $ ?m-id\n                                           :where\n                                           [?m-id :matter/codes ?c-id]]\n                                         ds matter-id)\n                         new-t-id  (inc (:max-eid ds))\n                         new-order (or order\n                                       (+ order-step (ds/q '[:find (max ?order) .\n                                                     :in $ ?m-id ?date\n                                                     :where\n                                                     [?t-id :task/date ?date]\n                                                     [?m-id :matter/tasks ?t-id]\n                                                     [?t-id :task/order ?order]]\n                                                   ds matter-id date))\n                                       (* 10 new-t-id))\n                         ;; new-matter-task-vec (ds/pull ds )\n                         new-task  {:db/id            new-t-id\n                                    :task/time        time\n                                    :task/date        date\n                                    :task/code        (or c default-c \"0\")\n                                    :task/description description\n                                    :task/order       new-order}]\n                     (js/console.log (str \"new-task: \" new-task))\n                     {:transact [[:db/add matter-id :matter/tasks new-t-id]\n                                 new-task]\n                      :fx       (if start?\n                                  [[:dispatch [::start-task-timer new-t-id]]]\n                                  [])})))\n\n(rf/reg-event-db ::check-tasks\n                 (fn [db [_ t-ids & uncheck?]]\n                   (reduce (fn [acc v]\n                             (schema-assoc acc \"t-checked\" (not uncheck?) v))\n                           db\n                           t-ids)))\n\n(rf/reg-event-db ::set-drag-over-position\n                 (fn [db [_ t-id pos]]\n                   (schema-assoc db \"drag-over-position\" pos t-id)))\n\n(rp/reg-event-fx ::add-task-after\n                 [(rp/inject-cofx :ds)\n                  (rp/inject-cofx :work-app.events/uuid)]\n                 (fn [{:keys [ds db uuid] :as cofx}\n                      [_ {:keys [before-t-id start? description]\n                          :or {description \"\"}}]]\n                   (let [{before-code  :task/code\n                          before-order :task/order\n                          before-date  :task/date\n                          matter       :matter/_tasks} (ds/pull\n                                                        ds\n                                                        '[:task/code :task/order :task/date :matter/_tasks]\n                                                        before-t-id)\n                         m-id                          (:db/id matter)\n                         later-tasks                   (sort-by\n                                                        second\n                                                        (ds/q '[:find ?t-id ?order\n                                                                :in $ ?t-id-prev\n                                                                :where\n                                                                [?m-id :matter/tasks ?t-id-prev]\n                                                                [?t-id-prev :task/date ?date]\n                                                                [?t-id :task/order ?order]\n                                                                [?t-id-prev :task/order ?old-order]\n                                                                [?m-id :matter/tasks ?t-id]\n                                                                [?t-id :task/date ?date]\n                                                                [(< ?old-order ?order)]\n                                                                ]\n                                                              ds before-t-id))\n                         [next-eid order-above] (first later-tasks)\n                         delt (- order-above before-order)\n                         re-order-above (> 2 delt)\n                         next-order (if re-order-above\n                                      (+ before-order order-step)\n                                      (+ before-order (js/Math.ceil (/ delt 2))))]\n                     {:fx [[:dispatch [::add-task {:matter-id m-id\n                                                   :date      before-date\n                                                   :description description\n                                                   :time      1\n                                                   :order     (inc before-order)\n                                                   :c         before-code\n                                                   :start?    start?}]]]\n                      :transact (if re-order-above\n                                  (into []\n                                       (for [[t-id new-order] (map (fn [[t-id _] no] [t-id no])\n                                                                   later-tasks\n                                                                   (drop 1 (range-step order-step next-order)))]\n                                         [:db/add t-id :task/order new-order]))\n                                  [])})))\n\n(rp/reg-event-fx ::task-set-desc\n                 [(rf/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ {:keys [task-id desc]}]]\n                   {:transact [[:db/add task-id :task/description desc]]}))\n"]}