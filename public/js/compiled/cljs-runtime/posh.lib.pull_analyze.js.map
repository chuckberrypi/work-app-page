{"version":3,"sources":["posh/lib/pull_analyze.cljc"],"mappings":"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","names":["posh.lib.pull-analyze/reverse-lookup?","attr","cljs.core._EQ_","cljs.core/first","cljs.core/name","posh.lib.pull-analyze/reverse-lookup","cljs.core.keyword","cljs.core/namespace","cljs.core.reduce","cljs.core/str","cljs.core/rest","posh.lib.pull-analyze/dbid-into-vec","v","cljs.core/not","cljs.core/some","cljs.core/cons","posh.lib.pull-analyze/insert-dbid","pull-pattern","cljs.core/map?","cljs.core/zipmap","cljs.core/keys","cljs.core.map","cljs.core/vals","cljs.core/vector?","p1__23964#","cljs.core/coll?","cljs.core/vec","posh.lib.pull-analyze/pull-affected-datoms","pull-fn","db","eid","G__23972","G__23973","G__23974","posh.lib.pull-analyze/pull-ref-one?","and__5043__auto__","posh.lib.pull-analyze/pull-ref-many?","posh.lib.pull-analyze/ref?","schema","cljs.core.get","posh.lib.pull-analyze/cardinality-one?","temp__5804__auto__","e","posh.lib.pull-analyze/cardinality-many?","posh.lib.pull-analyze/tx-datoms-for-pull-map","entity-id","pull-map","cljs.core/empty?","vec__23989","cljs.core.nth","k","r?","G__23996","G__23997","G__23998","cljs.core.concat","G__23999","G__24000","G__24001","or__5045__auto__","p1__23983#","cljs.core.mapcat","cljs.core/PersistentVector","p1__23984#","G__24010","G__24011","G__24012","cljs.core.merge","G__24015","G__24016","G__24017","p1__23985#","G__24018","G__24019","G__24020","posh.lib.pull-analyze/generate-affected-tx-datoms-for-pull","affected-pull","posh.lib.pull-analyze/limit-spec?","x","cljs.core/seq?","G__24036","fexpr__24035","posh.lib.pull-analyze/limit-attr","limit-spec","cljs.core/second","posh.lib.pull-analyze/remove-limits","cljs.core.partial","clojure.walk/postwalk","posh.lib.pull-analyze/recursive-val?","posh.lib.pull-analyze/tx-pattern-for-pull","refs-only?","entity-keys","p1__24045#","cljs.core.remove","val-keys","p1__24046#","ref-keys","cljs.core/set","starred?","pull-maps","cljs.core/merge","cljs.core.filter","p__24054","vec__24055","ref-key","ref-pull","unrev-key","p1__24047#","p1__24048#","G__24062","G__24063","G__24064","p__24065","map__24066","cljs.core/--destructure-map","posh.lib.pull-analyze/pull-analyze","dcfg","retrieve","db-id","ent-id","cljs.core/seq","affected-datoms","fexpr__24074","datoms","posh.lib.util/t-for-datoms","prepped-pull-pattern","posh.lib.datom-matcher/reduce-patterns","p__24084","map__24085","posh.lib.pull-analyze/pull-many-analyze","ent-ids","resolved-ent-ids","p1__24081#","fexpr__24086","p1__24082#","patterns","p1__24083#","cljs.core/ffirst","cljs.core.apply","cljs.core/concat"],"sourcesContent":["(ns posh.lib.pull-analyze\n  (:require [posh.lib.util :as util]\n            [posh.lib.datom-matcher :as dm]))\n\n(defn reverse-lookup? [attr]\n  (= (first (name attr)) '\\_))\n\n(defn reverse-lookup [attr]\n  (when (= (first (name attr)) '\\_)\n    (keyword (str (namespace attr) \"/\" (reduce str (rest (name attr)))))))\n\n(defn dbid-into-vec [v]\n  (if (not (some #{'* :db/id} v))\n    (cons :db/id v)\n    v))\n\n(defn insert-dbid [pull-pattern]\n  (cond\n   (map? pull-pattern) (zipmap (keys pull-pattern)\n                               (map insert-dbid (vals pull-pattern)))\n\n   (vector? pull-pattern)\n   (->> (dbid-into-vec pull-pattern)\n        (map #(if (coll? %) (insert-dbid %) %))\n        vec)\n\n   :else pull-pattern))\n\n(defn pull-affected-datoms [pull-fn db pull-pattern eid]\n  (pull-fn db (insert-dbid pull-pattern) eid))\n\n(defn pull-ref-one? [v]\n  (and (map? v) (:db/id v)))\n\n(defn pull-ref-many? [v]\n  (and (vector? v) (pull-ref-one? (first v))))\n\n(defn ref? [schema attr]\n  (= (get (get schema attr) :db/valueType)\n     :db.type/ref))\n\n(defn cardinality-one? [schema attr]\n  (when-let [e (get schema attr)]\n    (not (= (:db/cardinality e) :db.cardinality/many))))\n\n(defn cardinality-many? [schema attr]\n  (when-let [e (get schema attr)]\n    (= (:db/cardinality e) :db.cardinality/many)))\n\n(defn tx-datoms-for-pull-map [schema entity-id pull-map]\n  (if (empty? pull-map)\n    []\n    (let [[k v] (first pull-map)\n          r?    (reverse-lookup? k)\n          k     (if r? (reverse-lookup k) k)]\n      (cond\n       (= k :db/id)\n       (tx-datoms-for-pull-map schema entity-id (rest pull-map))\n\n       (ref? schema k)\n       (concat\n        (cond\n         (and (not r?) (cardinality-one? schema k))\n         (concat\n          [[entity-id k (:db/id v)]]\n          (tx-datoms-for-pull-map schema (:db/id v) v))\n\n         (or r? (cardinality-many? schema k))\n         (concat\n          (when (not r?)\n            (mapcat #(vector [entity-id k (:db/id %)]) v))\n          (mapcat #(tx-datoms-for-pull-map\n                    schema\n                    (:db/id %)\n                    (merge (when r? {k {:db/id entity-id}}) %))\n                  v))\n\n         :else [[entity-id k v]])\n        (tx-datoms-for-pull-map schema entity-id (rest pull-map)))\n\n       :else\n       (concat\n        (if (cardinality-many? schema k)\n          (mapcat #(vector [entity-id k %]) v)\n          [[entity-id k v]])\n        (tx-datoms-for-pull-map schema entity-id (rest pull-map)))))))\n\n(defn generate-affected-tx-datoms-for-pull [schema affected-pull]\n  (tx-datoms-for-pull-map schema (:db/id affected-pull) affected-pull))\n\n\n;;;;; pull pattern generator ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(comment\n  ;; perhaps will use later to reduce the pull pattern verbosity\n  (defn count-avs [patterns]\n    (if (empty? patterns)\n      {}\n      (merge-with + {(let [[e a v] (first patterns)] [a v]) 1}\n                  (count-avs (rest patterns)))))\n\n  (defn count-eas [patterns]\n    (if (empty? patterns)\n      {}\n      (merge-with + {(let [[e a] (first patterns)] [e a]) 1}\n                  (count-eas (rest patterns)))))\n\n  (defn reducible-patterns [pattern-counts]\n    (remove nil? (map (fn [[k v]] (when (> v 1) v) k) pattern-counts)))\n\n  (defn combine-ents [patterns])\n\n  (defn combine-patterns [patterns]\n    (let [avs (reducible-patterns (count-avs patterns))\n          eas (reducible-patterns (count-eas patterns))])))\n\n\n(defn limit-spec? [x]\n  (and (seq? x) (#{'limit \"limit\"} (first x))))\n\n(defn limit-attr [limit-spec]\n  (second limit-spec))\n\n(def remove-limits\n  (partial\n   clojure.walk/postwalk (fn [x] (if (limit-spec? x) (limit-attr x) x))))\n\n(defn recursive-val? [v]\n  (or (number? v) (= v '...)))\n\n(defn tx-pattern-for-pull [schema pull-pattern affected-pull refs-only?]\n  (let [entity-keys (remove #(or (map? %) (= :db/id %)) pull-pattern)\n        val-keys    (remove #(or (reverse-lookup? %) (ref? schema %)) entity-keys)\n        ref-keys    (->> entity-keys\n                         (remove (set val-keys))\n                         (map (fn [k] {k [:db/id]})))\n        starred?    (some #{'*} val-keys)\n        pull-maps   (reduce merge (concat ref-keys (filter map? pull-pattern)))]\n    (when (:db/id affected-pull)\n      (concat\n       (when (not (or refs-only? (empty? val-keys)))\n         [[(:db/id affected-pull) (if starred? '_ (set val-keys)) '_]])\n       (mapcat (fn [[ref-key ref-pull]]\n                 (let [r? (reverse-lookup? ref-key)\n                       unrev-key (if r? (reverse-lookup ref-key) ref-key)]\n                   (concat\n                    (if r?\n                      [['_ unrev-key (:db/id affected-pull)]]\n                      [[(:db/id affected-pull) ref-key '_]])\n                    (cond\n                     (recursive-val? ref-pull)\n                     (when (ref-key affected-pull)\n                       (mapcat #(tx-pattern-for-pull schema pull-pattern % refs-only?)\n                               (ref-key affected-pull)))\n\n                     (or r? (cardinality-many? schema unrev-key))\n                     (mapcat #(tx-pattern-for-pull schema ref-pull % refs-only?)\n                             (ref-key affected-pull))\n                     :else\n                     (tx-pattern-for-pull schema ref-pull (ref-key affected-pull refs-only?))))))\n               pull-maps)))))\n\n\n;; retrieve :datoms, :patterns, or :results\n;; db should be {:db db :schema schema :db-id db-id}\n(defn pull-analyze [dcfg retrieve {:keys [db db-id schema]} pull-pattern ent-id]\n  (when (and ent-id (seq retrieve))\n    (let [affected-datoms\n          (pull-affected-datoms (:pull dcfg) db pull-pattern ((:entid dcfg) db ent-id))]\n      (merge\n       (when (some #{:results} retrieve)\n         {:results affected-datoms})\n       (when (some #{:datoms :datoms-t} retrieve)\n         (let [datoms (generate-affected-tx-datoms-for-pull schema affected-datoms)]\n           (merge\n            (when (some #{:datoms} retrieve)\n              {:datoms {db-id datoms}})\n            (when (some #{:datoms-t} retrieve)\n              {:datoms-t {db-id (util/t-for-datoms (:q dcfg) db datoms)}}))))\n       (when (some #{:patterns :ref-patterns} retrieve)\n         (let [prepped-pull-pattern (insert-dbid (remove-limits pull-pattern))]\n           (merge\n            (when (some #{:patterns} retrieve)\n              {:patterns\n               {db-id\n                (dm/reduce-patterns\n                 (concat\n                  (when (vector? ent-id)\n                    [['_ (first ent-id) (second ent-id)]])\n                  (tx-pattern-for-pull\n                   schema\n                   prepped-pull-pattern\n                   affected-datoms\n                   false)))}})\n            (when (some #{:ref-patterns} retrieve)\n              {:ref-patterns\n               {db-id\n                (dm/reduce-patterns\n                 (tx-pattern-for-pull\n                  schema\n                  prepped-pull-pattern\n                  affected-datoms\n                  true))}}))))))))\n\n(defn pull-many-analyze [dcfg retrieve {:keys [db schema db-id]} pull-pattern ent-ids]\n  (when-not (empty? retrieve)\n    (let [resolved-ent-ids (map #((:entid dcfg) db %) ent-ids)\n          affected-datoms (pull-affected-datoms (:pull-many dcfg) db pull-pattern ent-ids)]\n      (merge\n       (when (some #{:results} retrieve)\n         {:results affected-datoms})\n       (when (some #{:datoms :datoms-t} retrieve)\n         (let [datoms (mapcat #(generate-affected-tx-datoms-for-pull schema %)\n                              affected-datoms)]\n           (merge\n            (when (some #{:datoms} retrieve)\n              {:datoms {db-id datoms}})\n            (when (some #{:datoms-t} retrieve)\n              {:datoms-t {db-id (util/t-for-datoms (:q dcfg) db datoms)}}))))\n       (when (some #{:patterns} retrieve)\n         {:patterns\n          {db-id\n           (let [patterns\n                 (map\n                  #(tx-pattern-for-pull\n                    schema\n                    (insert-dbid (remove-limits pull-pattern)) %\n                    false)\n                  affected-datoms)]\n             (cons\n              (vec (cons (set resolved-ent-ids) (rest (ffirst patterns))))\n              (mapcat rest patterns))\n             (dm/reduce-patterns (apply concat patterns)))}})))))\n"]}