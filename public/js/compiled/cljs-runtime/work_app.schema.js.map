{"version":3,"sources":["work_app/schema.cljc"],"mappings":"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","names":["work-app.schema/endpoint","name","opts","pred","base-map","cljs.core.keyword","cljs.core.merge","work-app.schema/map-id-check","m","cljs.core/every?","p__62337","vec__62338","cljs.core.nth","map__62341","cljs.core/--destructure-map","cljs.core.get","k","id","cljs.core._EQ_","work-app.schema/schema-check-unique-names","schema","work-app.schema/enumerate","col","cljs.core.map","cljs.core/vector","cljs.core.range","work-app.schema/stringify-path","path","cljs.core.reduce","p__62342","vec__62343","acc","i","v","cljs.core/Keyword","cljs.core.conj","malli.core.properties","malli.util.get_in","cljs.core.subvec","work-app.schema/get-in-props","temp__5802__auto__","?entry","malli.util.find","cljs.core/butlast","cljs.core/last","cljs.core/vector?","cljs.core/second","work-app.schema/get-paths-with-endpoints","malli.util.subschemas","s","cljs.core.assoc","p1__62346#","cljs.core.filter","p__62347","map__62348","entry-props","work-app.schema/time-schema","malli.core.schema","cljs.core/uuid?","cljs.core/int?","cljs.core/string?","cljs.core/boolean?","cljs.core/inst?","cljs.core/integer?","work-app.schema/matters-schema","work-app.schema/cal-schema","work-app.schema/app-schema","cljs.core/any?","cljs.core/float?","cljs.core/keyword?","work-app.schema/find-indexes","coll","p__62349","vec__62350","cljs.core/first","work-app.schema/inject-path-properties","p__62354","vec__62355","p1__62353#","work-app.schema/path-map","p__62366","vec__62367","p__62362","vec__62363","cljs.core.mapv","item","p__62358","vec__62359","work-app.schema/path","$","p","work-app.schema/replace-strings","args","G__62376","vec__62378","seq__62379","cljs.core/seq","first__62380","cljs.core/next","G__62377","vec__62381","seq__62382","first__62383","vec__62390","seq__62391","first__62392","vec__62393","seq__62394","first__62395","path-head","path-rest","args-head","args-rest","a","new","work-app.schema/throw-mismatch","arg-len","placeholder-len","place-holders","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","work-app.schema/schema-get","seq62396","G__62397","G__62398","self__5754__auto__","db","cljs.core/filterv","cljs.core/count","cljs.core.not_EQ_","cljs.core.get_in","work-app.schema/schema-update","p__62403","map__62404","seq62399","G__62400","G__62401","G__62402","f","fn-args","sub-args","cljs.core.apply","cljs.core.partial","cljs.core/update-in","work-app.schema/schema-assoc","seq62405","G__62406","G__62407","G__62408","val","cljs.core/assoc-in","work-app.schema/schema-assoc-map-of","p__62414","map__62415","seq62409","G__62410","G__62411","G__62412","G__62413","work_app.schema.schema_update","cljs.core/assoc","work-app.schema/schema-next-order","seq62416","G__62417","G__62418","path-args","or__5045__auto__"],"sourcesContent":["#? (:clj (ns work-app.schema\n           (:require\n            [malli.core :as m]\n            [malli.error :as me]\n            [malli.generator :as mg]\n            [malli.provider :as mp]\n            [malli.util :as mu]))\n    :cljs (ns work-app.schema\n           (:require\n            [malli.core :as m]\n            [malli.error :as me]\n            [malli.generator :as mg]\n            [malli.provider :as mp]\n            [malli.util :as mu])))\n\n(defn endpoint [name opts pred]\n  (let [base-map {:endpoint true :name (str name)}]\n    [(keyword name)\n     (merge base-map opts)\n     pred]))\n\n(defn map-id-check [m]\n  (every? (fn [[k {:keys [id]}]] (= k id)) m))\n\n(defn schema-check-unique-names [schema]\n  true)\n\n(defn enumerate [col]\n  (map vector (range) col))\n\n(defn stringify-path [schema path]\n  \"take a schema and path and return a path that replaces '0 1' entries\n   (typically for map-of elements) with the props from that map\"\n  (->> path\n       enumerate\n       (reduce (fn [acc [i v]]\n                 (cond\n                   (keyword? v) (conj acc v)\n                   (= 0 v) (conj acc (m/properties (mu/get-in schema (subvec path 0 (inc i)))))\n                   :else acc)))))\n\n(defn get-in-props [schema path]\n            (if-let [?entry (mu/find (mu/get-in schema (butlast path)) (last path))]\n              (when (vector? ?entry) (second ?entry))))\n\n(defn get-paths-with-endpoints [schema]\n  (->> schema\n       mu/subschemas\n       (map (fn [s] (assoc s :entry-props (get-in-props schema (:path s)))))\n       (filter #(-> % :entry-props :endpoint))\n       (reduce (fn [acc {:keys [entry-props path]}]\n                 (assoc acc (:name entry-props) path)) {})))\n\n(def time-schema\n  (m/schema\n   [:map\n    [:time-matters {:endpoint true :name \"time-matters\"}\n     [:and\n      [:map-of {:param-name \"matter-id\"}\n       uuid?\n       [:map {:optional true :endpoint true :name \"time-matter\"}\n        [:id {:endpoint true :name \"matter-id\"} uuid?]\n        [:order {:endpoint true :name \"matter-order\"} int?]\n        [:groups {:endpoint true :name \"matter-group-map\"}\n               [:and\n                [:map-of\n                 {:param-name \"group-id\"}\n                 uuid?\n                 [:map\n                  [:id {:optional true\n                        :endpoint true\n                        :name     \"group-id\"} uuid?]\n                  [:order {:endpoint true :name \"group-order\"} int?]\n                  [:tasks {:endpoint true :name \"group-tasks\"}\n                   [:map-of {:param-name \"task-id\"}\n                    uuid? [:map\n                           [:id {:endpiont true :name \"task-id\"}  uuid?]\n                           (endpoint \"task-date\" {} string?)\n                           [:order {:endpoint true :name \"task-order\"} int?]\n                           [:description {:endpoint true :name \"task-description\"} string?]\n                           ;; (endpoint \"task-description\" {} string?)\n                     ;; [:description {:endpoint true :name \"task-description\"} string?]\n                           [:time {:endpoint true :name \"task-time\"} int?]\n                           [:ephem [:map\n                                    (endpoint \"task-slider-locked\" {} boolean?)\n                                    (endpoint \"task-already-focused\" {} boolean?)\n                                    (endpoint \"task-checked\" {} boolean?)]]]]]\n                  [:ephem\n                   [:map\n                    (endpoint \"group-selected-code\" {:optional true} string?)\n                    (endpoint \"group-tiered-menu-ref\" {:optional true} inst?)\n                    (endpoint \"group-dialog-visible\" {} boolean?)\n                    (endpoint \"group-slider-locked\" {} boolean?)\n                    (endpoint \"group-sliders-showing\" {} boolean?)]]]]\n                [:fn map-id-check]]]\n        [:ephem\n           [:map\n            (endpoint \"matter-last-active-task\" {} uuid?)\n            [:matter-name-edit {:endpoint true :name \"matter-name-edit\"} boolean?]]]]]\n      [:fn map-id-check]]]\n    [:ephem [:map\n             (endpoint \"time-selected-code-key-and-id\" {:optional true} [:tuple string? integer?])\n             (endpoint \"cm-dropdown-val\" {} uuid?)\n             (endpoint \"time-selected-date\" {:optional true} string?)]]]))\n\n(def matters-schema\n  (m/schema\n   [:map\n    [:clients {:endpoint true :name \"clients\"}\n     [:and\n      [:map-of {:param-name \"client-id\"}\n       uuid? [:map {:param-name \"client-id2\"}\n              [:id uuid?]\n              [:name {:endpoing true :name \"client-name\"} string?]\n              [:number {:endpoing true :name \"client-number\"} [:re \"[0-9]{6}\"]]\n              [:order {:endpoing true :name \"client-order\"} integer?]\n              [:matters {:endpoint true :name \"client-matters\"}\n               [:and\n                [:map-of {:param-name \"matter-id\"}\n                 uuid?\n                 [:map\n                  [:id {:endpoint true :name \"matter-id\"} uuid?]\n                  [:name {:endpoint true :name \"matter-name\"} string?]\n                  [:number {:endpoint true :name \"matter-number\"} [:re \"[0-9]{6}\"]]\n                  [:ephem\n                   [:map\n                    [:matters-edit-dialog-showing\n                     {:endpoint true :name \"matter-edit-dialog-showing\"} boolean?]]]]]\n                [:fn map-id-check]]]]]]\n     [:fn map-id-check]]\n    [:ephem\n     [:map\n      [:matters-new-cm-dialog-showing\n       {:endpoint true :name \"matters-new-cm-dialog-showing\"} boolean?]]]]))\n\n(def cal-schema\n  (m/schema\n   [:map\n    [:cal-date {:endpoint true :name \"cal-date\"} inst?]]))\n\n(def app-schema\n  (m/schema\n   [:map\n    [:ds\n     [:map\n      [:gen [:map-of {:param-name \"e-id\"}\n             integer? [:map\n                       (endpoint \"collapsed\" {} boolean?)\n                       (endpoint \"slider-dialog-visible\" {} boolean?)\n                       (endpoint \"slider-dialog-locked\" {} boolean?)\n                       (endpoint \"draggable\" {} boolean?)]]]\n      [:tasks\n       [:map-of {:param-name \"t-id\"}\n        integer? [:map\n                   (endpoint \"task-debouncer\" {} any?)\n                   (endpoint \"t-already-focused\" {} boolean?)\n                   (endpoint \"t-checked\" {:optional true} boolean?)\n                   (endpoint \"t-slider-locked\" {:optional true} boolean?)\n                   (endpoint \"drag-over-position\" {} float?)]]]\n      [:matters\n       [:map-of {:param-name \"m-id\"}\n        integer?\n        [:map\n         (endpoint \"matter-collapsed\" {} boolean?)\n         (endpoint \"matter-last-active-timer\" {} integer?)]]]\n      [:codes {:endpoint true :name \"code-map\"}\n         [:map-of  {:param-name \"code-id\"}\n          integer? [:map ;{:endpoint true :name \"code-map\"}\n                   (endpoint \"code-edit-mode\" {} boolean?)\n                   (endpoint \"code-collapsed\" {} boolean? )\n                   (endpoint \"code-slider-visible\" {} any?)\n                   (endpoint \"code-sliders-locked\" {} boolean?)]]]\n      [:time\n       [:map\n        (endpoint \"time-selected-code\" {} integer?)\n        (endpoint \"move-dialog-visible\" {} boolean?)\n        (endpoint \"dragged-task\" {} integer?)\n        (endpoint \"active-timer-t-id\" {} integer?)\n        (endpoint \"active-timer-m-id\" {} integer?)\n        (endpoint \"sidebar-filter\" {} string?)\n        (endpoint \"edit-mode\" {} boolean?)]]]]\n    [:matters matters-schema]\n    [:cal {:optional true} cal-schema]\n    (endpoint \"nrls\" {:optional true} [:vector any?])\n    [:time {:optional true} time-schema]\n    [:ephem {:optional true}\n     [:map\n      [:db-dialog-visible {:endpoint true :name \"db-dialog-visible\"} boolean?]\n      (endpoint \"task-id-map\" {:optional true} [:map-of uuid? [:vector uuid?]])\n      (endpoint \"matter-id-map\" {:optional true} [:map-of uuid? uuid?])\n      [:group-id-map {:optional true} [:map-of uuid? [:vector uuid?]]]\n      [:dialog-body {:endpoint true :name \"dialog-body\"} string?]\n      [:dialog-visible {:endpoint true :name \"dialog-visible\"} boolean?]\n      [:dialog-confirm-event {:endpoint true :name \"dialog-confirm-event\"} [:vector any?]]\n      ;; TODO: make vector for \"dialog-confirm-event\" one that starts with keyword then has any\n      [:elapsed {:endpoint true :name \"elapsed\"} integer?]\n      [:toast {:endpoint true :name \"toast\"} inst?]\n      [:ticker-tasks {:endpoint true :name \"ticker-tasks\"}\n       [:map\n        [:active-timer {:endpoint true :name \"active-timer\"}\n         [:map\n          [:id keyword?]\n          [:interval integer?]\n          [:task-id {:endpoint true :name \"timer-id\"} integer?]\n          [:event any?]]]]]]]]))\n\n(defn find-indexes [pred coll]\n  (->> coll\n       (map pred)\n       enumerate\n       (filter (fn [[i v]] v))\n       (map first)))\n\n(defn inject-path-properties [schema path]\n  (->> path\n       enumerate\n       (reduce (fn [acc [i v]]\n                 (cond\n                     (keyword? v) (conj acc v)\n                     (#(= 1 %) v) (conj acc (m/properties (mu/get-in schema (subvec path 0 i))))\n                     :else acc))\n               [])))\n\n(def path-map\n  (->> (get-paths-with-endpoints app-schema)\n       (map (fn [[k v]] [k (inject-path-properties app-schema v)]))\n       (map (fn [[k v]] [k (mapv (fn [item] (if-let [name (:param-name item)] name item)) v)]))\n       (reduce (fn [acc [k v]] (assoc acc k v)) {})))\n\n(defn path [name]\n  (get path-map name))\n\n(as-> (mu/subschemas app-schema) $\n     (map :path $)\n     (filter (fn [p] (= :time (first p))) $))\n\n(defn replace-strings [path args]\n  (if (nil? args)\n    path\n    (loop [[path-head & path-rest :as p] path\n          [args-head & args-rest :as a] args\n          new []]\n     (if (nil? path-head)\n       new\n       (if (string? path-head)\n         (recur path-rest args-rest (conj new args-head))\n         (recur path-rest a (conj new path-head)))))))\n\n(defn throw-mismatch [name arg-len placeholder-len place-holders]\n  (throw (str name\n              \":: args (\"\n              arg-len\n              \") and place-holders (\"\n              placeholder-len\n              \") not same lenghth. Need to pass in: \"\n              place-holders)))\n\n(defn schema-get [db name & args]\n  (let [p (path name)\n        place-holders (filterv string? p)\n        arg-len (count args)\n        placeholder-len (count place-holders)]\n    (if (not= arg-len placeholder-len)\n      (throw-mismatch name arg-len placeholder-len place-holders)\n      (get-in db (replace-strings p args)))))\n\n(defn schema-update [db name f & {:keys [fn-args sub-args]}]\n  ;; #? (:cljs (js/console.log (str \"updating: \" name \\newline \"fn-args: \" (if fn-args fn-args \"Nada\") \\newline \"sub-args: \" (if sub-args sub-args \"Nada\"))))\n  (let [p (replace-strings (path name) sub-args)]\n    (apply (partial update-in db p f) fn-args))\n  ;; (let [p ])\n  ;; [fn-args sub-args]\n  )\n\n(defn schema-assoc [db name val & args]\n  ;; #? (:cljs (js/console.log (str \"Assoc-in Args: \" args)))\n  (let [p (-> name path (replace-strings args))]\n    ;; #? (:cljs (js/console.log (str \"Path: \"  p)))\n    (assoc-in db p val)))\n\n(defn schema-assoc-map-of [db name k val & {:keys [sub-args] :as args}]\n  (schema-update db name assoc (merge {:fn-args [k val]} args)))\n\n(defn schema-next-order [db name & path-args]\n  (let [p (-> name path (replace-strings path-args))]\n    (or  (->> (get-in db p)\n          count\n          inc)\n         1)))\n\n(comment\n  (inject-path-properties app-schema [:time :timers 0 1 :groups 0 1 :id])\n  (->> (get-paths-with-endpoints app-schema)\n       (map (fn [[k v]] [k (inject-path-properties app-schema v)]))\n       (map (fn [[k v]] [k (mapv (fn [item] (if-let [name (:param-name item)] name item)) v)]))\n       (reduce (fn [acc [k v]] (assoc acc k v)) {}))\n  ;;  C-c C-p to pretty-print to a buffer\n\n  (m/properties\n   (mu/get-in app-schema\n              (subvec [:time :timers 0 1 :groups 0 1 :id] 0 6)))\n\n  (m/properties (mu/get-in app-schema [:time :timers 0 1 :groups 0 1 :id]))\n  )\n"]}