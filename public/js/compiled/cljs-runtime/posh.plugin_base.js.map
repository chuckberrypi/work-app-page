{"version":3,"sources":["posh/plugin_base.cljc"],"mappings":"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","names":["posh.plugin-base/missing-pull-result","dcfg","pull-expr","cljs.core/some","posh.plugin-base/safe-pull","db","query","id","cljs.core/integer?","fexpr__25105","cljs.core/vector?","temp__5802__auto__","eid","fexpr__25106","fexpr__25107","posh.plugin-base/set-conn-listener!","posh-atom","conn","db-id","posh-vars","G__25116","G__25117","G__25118","fexpr__25115","var","cljs.core/Keyword","cljs.core.get","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_","cljs.core.swap_BANG_","cljs.core/assoc-in","G__25125","G__25126","G__25127","fexpr__25124","tx-report","map__25128","cljs.core/--destructure-map","ratoms","changed","posh.core/after-transact","seq__25129","cljs.core/seq","chunk__25130","count__25131","i__25132","vec__25139","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__25142","cljs.core/first","cljs.core/next","k","v","cljs.core/reset!","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","posh.plugin-base/posh!","seq25145","G__25146","self__5754__auto__","conns","cljs.core.atom","n","posh-tree","posh.core/empty-tree","cljs.core.assoc","cljs.core/empty?","cljs.core/rest","cljs.core.keyword","posh.core.add_db","cljs.core/deref","posh.plugin-base/get-conn-var","fexpr__25150","cljs.core/meta","posh.plugin-base/get-posh-atom","poshdb-or-conn","fexpr__25153","posh.stateful/get-posh-atom","posh.plugin-base/get-db","fexpr__25156","cljs.core/with-meta","posh.plugin-base/rm-posh-item","storage-key","posh-atom-val","posh.core/remove-item","cljs.core.dissoc","G__25160","posh.plugin-base/make-query-reaction","js/Error","add-query-fn","options","r","cljs.core.get_in","posh-atom-with-query","query-result","query-ratom","or__5045__auto__","fexpr__25164","query-reaction","G__25166","G__25167","G__25168","fexpr__25165","cljs.core._EQ_","posh.plugin_base.make_query_reaction","G__25172","posh.plugin-base/pull","poshdb","pull-pattern","true-poshdb","p1__25170#","posh.core/add-pull","posh.plugin_base.pull","posh.plugin-base/pull-info","posh.lib.update/update-pull","G__25191","posh.plugin-base/pull-many","eids","p1__25188#","posh.core/add-pull-many","posh.plugin_base.pull_many","posh.plugin-base/pull-tx","tx-patterns","cljs.core.println","posh.plugin-base/parse-q-query","cljs.core.reduce","p__25192","vec__25193","parsed-query","last-key","query-item","cljs.core.update","cljs.core/conj","posh.plugin-base/q-args-count","in-clause","posh.plugin-base/q","seq25199","G__25200","G__25201","args","vec__25202","n-query-args","cljs.core/butlast","cljs.core/last","true-poshdb-args","p1__25196#","cljs.core.map","fexpr__25205","cljs.core.remove","cljs.core/nil?","p1__25197#","p1__25198#","cljs.core.apply","cljs.core.partial","posh.core/add-q","posh.plugin-base/q-info","seq25208","G__25209","G__25210","p1__25206#","fexpr__25221","p1__25207#","posh.lib.update/update-q","posh.plugin-base/q-tx","seq25233","G__25234","G__25235","G__25236","posh.plugin-base/filter-tx","posh.stateful/add-filter-tx","posh.plugin-base/filter-pull","posh.stateful/add-filter-pull","posh.plugin-base/filter-q","seq25248","G__25249","G__25250","p1__25247#","fexpr__25254","posh.stateful/add-filter-q","posh.plugin-base/transact!","txs","G__25256","G__25257","fexpr__25255","fexpr__25258","posh.stateful/poshdb->conn"],"sourcesContent":["(ns posh.plugin-base\n  (:require [posh.core :as p]\n            [posh.stateful :as ps]\n            [posh.lib.db :as db]\n            [posh.lib.update :as u]))\n\n(defn missing-pull-result\n  [dcfg pull-expr]\n  (when (some #{:db/id} pull-expr)\n    {:db/id nil}))\n\n(defn safe-pull\n  [dcfg db query id]\n  (cond\n    (integer? id)\n    ((:pull* dcfg) db query id)\n    (vector? id)\n    (if-let [eid ((:entid dcfg) db id)]\n      ((:pull* dcfg) db query eid)\n      (missing-pull-result dcfg query))\n    (nil? id)\n    (missing-pull-result dcfg query)))\n\n;; need to set last-tx-t in conn so that it doesn't try the same tx twice\n(defn set-conn-listener! [dcfg posh-atom conn db-id]\n  (let [posh-vars {:posh-atom posh-atom\n                   :db-id db-id}]\n    (do\n      ((:listen! dcfg) conn :posh-dispenser\n        (fn [var]\n          (when (keyword? var)\n            (get posh-vars var))))\n      (add-watch conn :posh-schema-listener\n        (fn [_ _ old-state new-state]\n          (when (not= (:schema old-state) (:schema new-state))\n            (swap! posh-atom assoc-in [:schema db-id] (:schema new-state)))))\n            ;; Update posh conn\n      ((:listen! dcfg) conn :posh-listener\n        (fn [tx-report]\n          ;;(println \"CHANGED: \" (keys (:changed (p/after-transact @posh-atom {conn tx-report}))))\n          (let [{:keys [ratoms changed]}\n                (swap! posh-atom p/after-transact {conn tx-report})]\n            (doseq [[k v] changed]\n              (reset! (get ratoms k) (:results v))))))\n      conn)))\n\n(defn posh! [dcfg & conns]\n  (let [posh-atom (atom {})]\n    (reset! posh-atom\n            (loop [n 0\n                   conns conns\n                   posh-tree (-> (p/empty-tree dcfg [:results])\n                                 (assoc :ratoms {}\n                                        :reactions {}))]\n              (if (empty? conns)\n                posh-tree\n                (recur (inc n)\n                       (rest conns)\n                       (let [db-id (keyword (str \"conn\" n))]\n                         (p/add-db posh-tree\n                                   db-id\n                                   (set-conn-listener! dcfg posh-atom (first conns) db-id)\n                                   (:schema @(first conns))))))))))\n\n\n;; Posh's state atoms are stored inside a listener in the meta data of\n;; the datascript conn\n(defn get-conn-var [dcfg conn var]\n  ((:posh-dispenser @(:listeners (meta conn))) var))\n\n(defn get-posh-atom [dcfg poshdb-or-conn]\n  (if ((:conn? dcfg) poshdb-or-conn)\n    (get-conn-var dcfg poshdb-or-conn :posh-atom)\n    (ps/get-posh-atom poshdb-or-conn)))\n\n(defn get-db [dcfg poshdb-or-conn]\n  (if ((:conn? dcfg) poshdb-or-conn)\n    (with-meta\n      [:db (get-conn-var dcfg poshdb-or-conn :db-id)]\n      {:posh (get-conn-var dcfg poshdb-or-conn :posh-atom)})\n    poshdb-or-conn))\n\n(defn rm-posh-item [dcfg posh-atom storage-key]\n  (swap! posh-atom\n         (fn [posh-atom-val]\n           (assoc (p/remove-item posh-atom-val storage-key)\n             :ratoms (dissoc (:ratoms posh-atom-val) storage-key)\n             :reactions (dissoc (:reactions posh-atom-val) storage-key)))))\n\n(defn make-query-reaction\n  ([dcfg posh-atom storage-key add-query-fn options]\n   (if-let [r (get-in @posh-atom [:reactions storage-key])]\n     r\n     (->\n      (swap!\n       posh-atom\n       (fn [posh-atom-val]\n         (let [posh-atom-with-query (add-query-fn posh-atom-val)\n               query-result         (:results (get (:cache posh-atom-with-query) storage-key))\n               query-ratom          (or (get (:ratoms posh-atom-with-query) storage-key)\n                                        ((:ratom dcfg) query-result))\n               query-reaction       ((:make-reaction dcfg)\n                                     (fn []\n                                       ;;(println \"RENDERING: \" storage-key)\n                                       @query-ratom)\n                                     :on-dispose\n                                     (fn [_ _]\n                                       ;;(println \"no DISPOSING: \" storage-key)\n                                       (when-not (= (:cache options) :forever)\n                                         (swap! posh-atom\n                                                (fn [posh-atom-val]\n                                                  (assoc (p/remove-item posh-atom-val storage-key)\n                                                         :ratoms (dissoc (:ratoms posh-atom-val) storage-key)\n                                                         :reactions (dissoc (:reactions posh-atom-val) storage-key)))))))]\n           (assoc posh-atom-with-query\n                  :ratoms (assoc (:ratoms posh-atom-with-query) storage-key query-ratom)\n                  :reactions (assoc (:reactions posh-atom-with-query) storage-key query-reaction)))))\n      :reactions\n      (get storage-key))))\n  ([dcfg posh-atom storage-key add-query-fn]\n   (make-query-reaction dcfg posh-atom storage-key add-query-fn {})))\n\n(defn pull\n  \"Returns a reaction of a pull expression. The options argument may specify `:cache :forever`, which keeps query results\n  cached indefinitely, even if the reaction is disposed.\"\n  ([dcfg poshdb pull-pattern eid options]\n   (let [true-poshdb (get-db dcfg poshdb)\n         storage-key [:pull true-poshdb pull-pattern eid]\n         posh-atom   (get-posh-atom dcfg poshdb)]\n     (make-query-reaction dcfg\n                          posh-atom\n                          storage-key\n                          #(p/add-pull % true-poshdb pull-pattern eid)\n                          options)))\n  ([dcfg poshdb pull-pattern eid]\n   (pull dcfg poshdb pull-pattern eid {})))\n\n(defn pull-info [dcfg poshdb pull-pattern eid]\n  (let [true-poshdb (get-db dcfg poshdb)\n        storage-key [:pull true-poshdb pull-pattern eid]\n        posh-atom   (get-posh-atom dcfg poshdb)]\n    (dissoc\n     (u/update-pull @posh-atom storage-key)\n     :reload-fn)))\n\n(defn pull-many\n  ([dcfg poshdb pull-pattern eids options]\n   (let [true-poshdb (get-db dcfg poshdb)\n         storage-key [:pull-many true-poshdb pull-pattern eids]\n         posh-atom   (get-posh-atom dcfg poshdb)]\n     (make-query-reaction dcfg\n                          posh-atom\n                          storage-key\n                          #(p/add-pull-many % true-poshdb pull-pattern eids)\n                          options)))\n  ([dcfg poshdb pull-pattern eids]\n   (pull-many dcfg poshdb pull-pattern eids {})))\n\n(defn pull-tx [dcfg tx-patterns poshdb pull-pattern eid]\n  (println \"pull-tx is deprecated. Calling pull without your tx-patterns.\")\n  (pull dcfg poshdb pull-pattern eid))\n\n;;; q needs to find the posh-atom, go through args and convert any\n;;; conn's to true-poshdb's, generate the storage-key with true dbs\n\n(defn parse-q-query\n  [dcfg query]\n  (first\n    (reduce\n      (fn [[parsed-query last-key] query-item]\n        (if (keyword? query-item)\n          [(assoc parsed-query query-item [])\n           query-item]\n          (do\n            (assert last-key)\n            [(update parsed-query last-key conj query-item)\n             last-key])))\n      [{} nil]\n      query)))\n\n(defn q-args-count\n  ;; Really should be conforming to a spec for this... :-/\n  [dcfg query]\n  (let [parsed-query (parse-q-query dcfg query)]\n    (if-let [in-clause (:in parsed-query)]\n      (count in-clause)\n      1)))\n\n(defn q\n  \"Returns a datalog query reaction. If args count doens't match the query's input count, a final options map argument\n  is accepted. This options map may specify `:cache :forever`, which keeps query results cached even if the reaction is\n  disposed.\"\n  [dcfg query & args]\n  (let [n-query-args     (q-args-count dcfg query)\n        [args options]   (cond\n                           (= n-query-args (count args))\n                           [args {}]\n                           (= (inc n-query-args) (count args))\n                           [(butlast args) (last args)]\n                           :else\n                           (throw \"Incorrect number of args passed to posh query\"))\n        true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)\n        posh-atom        (first (remove nil? (map #(get-posh-atom dcfg %) args)))\n        storage-key      [:q query true-poshdb-args]]\n    (make-query-reaction dcfg\n                         posh-atom\n                         storage-key\n                         #(apply (partial p/add-q % query) true-poshdb-args)\n                         options)))\n\n(defn q-info [dcfg query & args]\n  (let [true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)\n        posh-atom        (first (remove nil? (map #(get-posh-atom dcfg %) args)))\n        storage-key      [:q query true-poshdb-args]]\n    (dissoc\n     (u/update-q @posh-atom storage-key)\n     :reload-fn)))\n\n(defn q-tx [dcfg tx-patterns query & args]\n  (println \"q-tx is deprecated. Calling q without your tx-patterns.\")\n  (apply q dcfg query args))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn filter-tx [dcfg poshdb tx-patterns]\n  (ps/add-filter-tx (get-db dcfg poshdb) tx-patterns))\n\n(defn filter-pull [dcfg poshdb pull-pattern eid]\n  (ps/add-filter-pull (get-db dcfg poshdb) pull-pattern eid))\n\n(defn filter-q [dcfg query & args]\n  (let [true-poshdb-args (map #(if ((:conn? dcfg) %) (get-db dcfg %) %) args)]\n    (apply ps/add-filter-q query true-poshdb-args)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn transact! [dcfg poshdb-or-conn txs]\n  ((:transact! dcfg)\n   (if ((:conn? dcfg) poshdb-or-conn)\n     poshdb-or-conn\n     (ps/poshdb->conn poshdb-or-conn))\n   txs))\n\n#?(:clj\n(defmacro add-plugin [dcfg]\n  `(do (def ~'missing-pull-result (partial posh.plugin-base/missing-pull-result ~dcfg))\n       (def ~'safe-pull           (partial posh.plugin-base/safe-pull           ~dcfg))\n       (def ~'set-conn-listener!  (partial posh.plugin-base/set-conn-listener!  ~dcfg))\n       (def ~'posh!               (partial posh.plugin-base/posh!               ~dcfg))\n       (def ~'get-conn-var        (partial posh.plugin-base/get-conn-var        ~dcfg))\n       (def ~'get-posh-atom       (partial posh.plugin-base/get-posh-atom       ~dcfg))\n       (def ~'get-db              (partial posh.plugin-base/get-db              ~dcfg))\n       (def ~'rm-posh-item        (partial posh.plugin-base/rm-posh-item        ~dcfg))\n       (def ~'make-query-reaction (partial posh.plugin-base/make-query-reaction ~dcfg))\n       (def ~'pull                (partial posh.plugin-base/pull                ~dcfg))\n       (def ~'pull-info           (partial posh.plugin-base/pull-info           ~dcfg))\n       (def ~'pull-tx             (partial posh.plugin-base/pull-tx             ~dcfg))\n       (def ~'pull-many           (partial posh.plugin-base/pull-many           ~dcfg))\n       (def ~'parse-q-query       (partial posh.plugin-base/parse-q-query       ~dcfg))\n       (def ~'q-args-count        (partial posh.plugin-base/q-args-count        ~dcfg))\n       (def ~'q                   (partial posh.plugin-base/q                   ~dcfg))\n       (def ~'q-info              (partial posh.plugin-base/q-info              ~dcfg))\n       (def ~'q-tx                (partial posh.plugin-base/q-tx                ~dcfg))\n\n       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n       (def ~'filter-tx           (partial posh.plugin-base/filter-tx           ~dcfg))\n       (def ~'filter-pull         (partial posh.plugin-base/filter-pull         ~dcfg))\n       (def ~'filter-q            (partial posh.plugin-base/filter-q            ~dcfg))\n\n       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n       (def ~'transact!           (partial posh.plugin-base/transact!           ~dcfg)))))\n"]}