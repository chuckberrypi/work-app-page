{"version":3,"sources":["work_app/time_entry.cljs"],"mappings":"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","names":["p__35867","map__35868","cljs.core/--destructure-map","cljs.core.get","work-app.time-entry/task-slider-ds","t-id","unlocked-tids","group-locked?","map__35869","p1__35866#","description","time","work-app.shared/<sub","tenths","locked","js/module$node_modules$primereact$panel$panel_cjs.Panel","G__35870","work-app.events/>evt","js/module$node_modules$primereact$slider$slider_cjs.Slider","secs","js/Math.round","G__35872","G__35873","work-app.time-entry/task-ds-new","work-app.time-entry/task-ds","_","bouncer","cljs.core.atom","map__35880","vec__35881","cljs.core.nth","p1__35874#","p1__35875#","p1__35876#","p1__35877#","p1__35878#","p1__35879#","order","name-val","set-name","js/module$node_modules$react$index.useState","m-id","checked","timer-active?","task-matter","default-task","timer-is-default?","cljs.core._EQ_","already-focused","time-string","draggable","dragging?","dragged-task","dragged-over-position","class","clojure.string.join","dragged-over-class","G__35884","G__35887","G__35888","js/console.log","e","bounding-rect","relative-pos","G__35889","G__35890","G__35891","G__35892","G__35893","G__35894","js/module$node_modules$primereact$checkbox$checkbox_cjs.Checkbox","G__35895","js/module$node_modules$primereact$button$button_cjs.Button","or__5045__auto__","G__35896","js/module$node_modules$primereact$progressspinner$progressspinner_cjs.ProgressSpinner","js/module$node_modules$primereact$inputtext$inputtext_cjs.InputText","v","debo","js/setTimeout","G__35897","cljs.core.swap_BANG_","old-debo","js/clearTimeout","G__35901","js/module$node_modules$primereact$inputnumber$inputnumber_cjs.InputNumber","G__35902","work-app.time-entry/task-span","map__35903","G__35904","G__35905","p__35906","map__35907","work-app.time-entry/slider-dialog","header","t-ids","parent-id","map__35911","task-tenths","locked-tids","dialog-visible","js/module$node_modules$primereact$dialog$dialog_cjs.Dialog","G__35912","G__35913","cljs.core.doall","iter__5523__auto__","s__35915","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__35917","cljs.core/chunk-buffer","i__35916","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35914","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","t","work-app.time-entry/code-group","c-id","code-text","code-collapsed","code-string","code-group-id","sliders-visible","code-checked","code-tenths","code-str","edit-mode","active-t-id","G__35921","js/module$node_modules$primereact$splitbutton$splitbutton_cjs.SplitButton","G__35922","G__35923","G__35924","G__35925","cljs.core.filter","el","G__35929","s__35931","b__35933","i__35932","iter__35930","G__35934","js/module$node_modules$primereact$multistatecheckbox$multistatecheckbox_cjs.MultiStateCheckbox","G__35935","s__35937","b__35939","i__35938","iter__35936","work-app.time-entry/matter-ds-old","matters-tasks-on-date","map__35940","total-time-tenths","cm-num-str","cm-name","task-codes","all-matter-code-eids","matters-and-codes","cljs.core.reduce","cljs.core/into","cljs.core/keys","expanded","collapsed","expando-map","active?","default-timer","checked-tasks","matter-collapsed","active-timer-t-id","G__35941","cljs.core/not","G__35942","s__35944","b__35946","i__35945","vec__35947","iter__35943","vec__35950","code","tasks","cljs.core.sort","cljs.core/vec","work-app.time-entry/matter-ds","tasks-by-code","non-code-tasks","G__35955","G__35956","s__35958","b__35960","i__35959","vec__35961","iter__35957","vec__35964","work-app.time-entry/key->code-id","code-opts","key","cljs.core.js__GT_clj","cljs.core.map","x","cljs.core/tree-seq","cljs.core.comp","cljs.core/flatten","cljs.core.drop_while","opt","cljs.core.not_EQ_","work-app.time-entry/move-dialog-task","map__35967","G__35968","work-app.time-entry/move-dialog","visible","G__35969","cljs.core/PersistentVector","s__35971","b__35973","i__35972","iter__35970","c","work-app.time-entry/time-entry","vec__35988","map__35991","p1__35974#","p1__35975#","p1__35976#","p1__35977#","p1__35978#","date","G__35992","cm-opts","selected-m-id","G__35993","clj-code-opts","default-code","selected-key","selected-code","task-codes-all","checked-on-date","codes-in-edit-mode","G__35994","js/module$node_modules$primereact$calendar$calendar_cjs.Calendar","G__35995","js/module$node_modules$primereact$dropdown$dropdown_cjs.Dropdown","G__35996","G__35997","js/module$node_modules$primereact$treeselect$treeselect_cjs.TreeSelect","G__36001","G__36002","G__36003","G__36004","G__36005","cljs.core/clj->js","G__36007","G__36008","G__36009","G__36010","G__36011","work-app.shared/allow-drop","G__36012","s__36014","b__36016","i__36015","vec__36017","iter__36013","vec__36020","cljs.core/chunk-first"],"sourcesContent":[";; (c) David F Stearns 2023\n\n(ns work-app.time-entry\n  (:require\n   [\"react\" :refer [useState] :as rct]\n   [\"primereact/accordion\" :refer [Accordion AccordionTab]]\n   [\"primereact/button\" :refer [Button]]\n   [\"primereact/calendar\" :refer [Calendar]]\n   [\"primereact/checkbox\" :refer [Checkbox]]\n   [\"primereact/dialog\" :refer [Dialog]]\n   [\"primereact/divider\" :refer [Divider]]\n   [\"primereact/dropdown\" :refer [Dropdown]]\n   [\"primereact/inplace\" :refer [Inplace InplaceContent InplaceDisplay]]\n   [\"primereact/inputnumber\" :refer [InputNumber]]\n   [\"primereact/inputtext\" :refer [InputText]]\n   [\"primereact/inputtextarea\" :refer [InputTextarea]]\n   [\"primereact/menu\" :refer [Menu]]\n   [\"primereact/multistatecheckbox\" :refer [MultiStateCheckbox]]\n   [\"primereact/panel\" :refer [Panel]]\n   [\"primereact/progressspinner\" :refer [ProgressSpinner]]\n   [\"primereact/radiobutton\" :refer [RadioButton]]\n   [\"primereact/scrollpanel\" :refer [ScrollPanel]]\n   [\"primereact/slider\" :refer [Slider]]\n   [\"primereact/speeddial\" :refer [SpeedDial]]\n   [\"primereact/splitbutton\" :refer [SplitButton]]\n   [\"primereact/toolbar\" :refer [Toolbar]]\n   [\"primereact/tree\" :refer [Tree]]\n   [\"primereact/treeselect\" :refer [TreeSelect]]\n   [\"primereact/tieredmenu\" :refer [TieredMenu]]\n\n   [reagent.core :as r]\n   [re-dnd.events]\n   [re-dnd.views]\n   [re-dnd.subs]\n\n   [work-app.events :as e :refer [>evt >evt]]\n   [work-app.macs :as mcr :include-macros true :refer [show-div]]\n   [work-app.matter-subs :as ms]\n   [work-app.shared :as shared :refer [<sub]]\n   [work-app.subs :as s]\n   [work-app.time-events :as te]\n   [work-app.time-subs :as ts]\n\n   [re-frame.core :as rf]))\n\n\n(defn task-slider-ds [{:keys [t-id unlocked-tids group-locked?]}]\n  (let [{:task/keys [description time]} (<sub [:work-app.subs/pull-entity t-id])\n        tenths                          (<sub [:work-app.time-subs/time-tenths t-id])\n        locked                          (<sub [:work-app.subs/t-slider-locked t-id])]\n    [:> Panel\n     [:div [:i {:class    (if locked \"pi pi-lock\" \"pi pi-lock-open\")\n                :style    {:margin-right \"5px\"}\n                :on-click #(>evt [::te/time-task-slider-lock-toggle t-id])}]\n      (str description \" (\" tenths \")\")\n      [:p]\n      [:> Slider {:value     tenths\n                  :min       0\n                  :max       10\n                  :step      0.1\n                  :disabled  locked\n                  :on-change #(let [secs (js/Math.round (* 3600 (.-value %)))]\n                                (if group-locked?\n                                  (>evt [::te/slider-change-locked-ds {:t-id t-id :time secs :unlocked unlocked-tids}])\n                                  (>evt [::te/time-set-task-time-ds   {:t-id t-id :time secs}])))}]]]))\n\n(defn task-ds-new [t-id]\n  [:div (str \"ID: \" t-id)])\n\n(defn task-ds [_]\n  (let [bouncer (atom nil)]\n    (fn [t-id]\n      (let [{:task/keys [description time order]} (<sub [::s/pull-entity t-id])\n            [name-val set-name]                   (useState description)\n            m-id                                  (<sub [::ts/m-id-by-t-id t-id])\n            checked                               (<sub [::s/t-checked t-id])\n            timer-active?                         (<sub [::ts/timer-active? t-id])\n            task-matter                           (<sub [::ts/m-id-by-t-id t-id])\n            default-task                          (<sub [::ts/default-next-task-timer task-matter])\n            timer-is-default?                     (= t-id default-task)\n            already-focused                       (<sub [::s/t-already-focused t-id])\n            tenths                                (<sub [::ts/time-tenths t-id])\n            time-string                           (<sub [::ts/time-string t-id])\n            draggable                             (<sub [::s/draggable t-id])\n            dragging?                             (<sub [::ts/dragging? t-id])\n            dragged-task                          (<sub [::s/dragged-task])\n            dragged-over-position                 (<sub [::s/drag-over-position t-id])\n            class                                 (clojure.string/join\n                                                   \" \"\n                                                   [\"dfs-task\"\n                                                    (if dragging? \"dfs-dragging\")])\n            dragged-over-class                    (if dragged-over-position\n                                                    (if (< dragged-over-position 0.5)\n                                                      \"dfs-drop-target-top\"\n                                                      \"dfs-drop-target-bottom\"))]\n        [:span {:class class\n                :draggable              draggable\n                :id              t-id\n                :on-drag-start              #(>evt [::te/set-dragged-task t-id])\n                :on-drag-end              #(do\n                                   (.preventDefault %)\n                                 (>evt [::te/set-draggable t-id false])\n                                 (>evt [::te/set-dragged-task false])\n                                 (js/console.log \"Drag End\"))\n                :on-drag-over              (fn [e]\n                                  (.preventDefault e)\n                                    (let [bounding-rect (.getBoundingClientRect (.-target e))\n                                          relative-pos (/ (- (.-clientY e) (.-top bounding-rect))\n                                                       (.-height bounding-rect))]\n                                    (>evt [::te/set-drag-over-position t-id relative-pos])))\n                :on-drag-leave              #(>evt [::te/set-drag-over-position t-id false])\n                :on-drop              #(do\n                                   (>evt [::te/task-drop t-id dragged-over-position %])\n                                 (>evt [::te/set-drag-over-position t-id false]))}\n         [:span {:class (str \"dfs-edit-task-container \" dragged-over-class)}\n          [:i {:class \"pi pi-bars cursor-pointer \"\n               :style             {:vertical-align \"middle\"}\n               :on-mouse-down             #(>evt [::te/set-draggable t-id true])\n               :on-mouse-up             #(>evt [::te/set-draggable t-id false])}]\n          [:> Checkbox {:style {:margin \"4px\"}\n                        :checked                      checked\n                        :on-change                      #(>evt [::te/toggle-check t-id])}]\n          [:> Button {:class    (str \"dfs-button \" (if (or\n                                                        timer-is-default?\n                                                       timer-active?)\n                                                     \"p-button-info\"))\n                      :icon     (if timer-active? \"\" \"pi pi-clock\")\n                      :on-click #(>evt (if timer-active?\n                                         [::te/stop-task-timer]\n                                         [::te/start-task-timer t-id]))}\n          (when timer-active?\n            [:> ProgressSpinner {:stroke-width \"3\"\n                                     :style {:width \"20px\"\n                                                    :height \"20px\"\n                                                    :vertical-align \"middle\"}}])]\n\n          [:> InputText {:class     \"dfs-task-input-text\"\n                         :on-focus  #(js/console.log %)\n                         :on-change #(let [v    (.. % -target -value)\n                                           debo (js/setTimeout\n                                                 (fn []\n                                                   (>evt [::te/task-set-desc {:task-id t-id :desc v}]))\n                                                 2000)]\n                                        (swap! bouncer (fn [old-debo]\n                                                         (js/clearTimeout old-debo)\n                                                         debo))\n                                        (set-name v))\n                         :value      (or name-val \"\")\n                         :matterid   m-id\n                         :taskid     t-id\n                         :targettype \"task-text-input\"\n                         :ref        #(>evt [::e/focus-task-if-new t-id %])\n                         }]\n\n          [:> InputNumber {:value               tenths\n                           :disabled            timer-active?\n                           :class               \"dfs-time-num-input\"\n                           :style               {:width \"90px\"}\n                           :mode                \"decimal\"\n                           :show-buttons        true\n                           :min-fraction-digits 1\n                           :max-fraction-digits 1\n                           :step                0.1\n                           :on-change           #(>evt [::te/time-set-task-time-ds\n                                                        {:t-id t-id\n                                                         :time (-> %\n                                                                   .-value\n                                                                   (* 60 60)\n                                                                   js/Math.round)}])}]]\n         [:span {:class (if timer-active? \"dfs-task-time-str\" \"dfs-task-time-str-hidden\")}\n         (str \"   \" time-string)]]))))\n\n(defn task-span [t-id]\n    (let [{:task/keys [description time]} (<sub [::s/pull-entity t-id])\n          m-id                            (<sub [::ts/m-id-by-t-id t-id])\n          ;; checked                         (<sub [::s/t-checked t-id])\n          task-matter                     (<sub [::ts/m-id-by-t-id t-id])\n          timer-is-default?               (= t-id (<sub [::ts/default-next-task-timer task-matter]))\n          timer-active?                   (<sub [::ts/timer-active? t-id])\n          already-focused                 (<sub [::s/t-already-focused t-id])\n          tenths                          (<sub [::ts/time-tenths t-id])\n          time-string                     (<sub [::ts/time-string t-id])\n          draggable                       (<sub [::s/draggable t-id])]\n      [:span {:on-click #(>evt (if timer-active? [::te/stop-task-timer] [::te/start-task-timer t-id]))}\n       (if timer-active?\n         [:> ProgressSpinner {:stroke-width \"3\"\n                              :on-click     #(>evt [::te/stop-task-timer t-id])\n                              :style        {:width          \"20px\"\n                                             :margin         \"4px\"\n                                             :height         \"20px\"\n                                             :vertical-align \"middle\"}}]\n         [:i {:class \"pi pi-clock dfs-inplace-button\"\n              }])\n       [:span {:class \"dfs-task-span-description\"\n               :style {:text-decoration (if timer-is-default? \"underline\" \" \")}} description]\n       [:span (str \". (\" tenths \")\")] ]\n      ))\n\n(defn slider-dialog [{:keys [header t-ids parent-id]}]\n  (let [task-tenths                            (<sub [::ts/tasks-tenths t-ids])\n        locked                                 (<sub [::s/slider-dialog-locked parent-id])\n        {locked-tids true unlocked-tids false} (<sub [::ts/locked-unlocked-tids t-ids])\n        dialog-visible                         (<sub [::s/slider-dialog-visible parent-id])]\n    [:> Dialog {:header  header\n                :visible dialog-visible\n                :style   {:width \"70%\"}\n                :on-hide #(>evt [::e/gen-toggle-slider-dialog-visible parent-id])}\n     [:div [:span [:i {:style    {:margin-right \"5px\"}\n                       :class    (if locked\n                                   \"pi pi-lock\"\n                                   \"pi pi-lock-open\")\n                       :on-click #(>evt [::e/slider-dialog-toggle-lock parent-id])}]\n            (str \"Total: \" task-tenths)]]\n\n     (doall (for [t t-ids]\n              ^{:key t} [task-slider-ds {:t-id          t\n                                         :group-locked? locked\n                                         :unlocked-tids unlocked-tids}]))]))\n\n(defn code-group [m-id c-id t-ids]\n  (let [code-text       (:code/label (<sub [::s/pull-entity c-id]))\n        code-collapsed  (<sub [::s/collapsed c-id])\n        code-string     (<sub [::ts/tasks-string t-ids])\n        code-group-id   [m-id c-id]\n        sliders-visible (<sub [::s/code-slider-visible code-group-id])\n        code-checked    (<sub [::ts/tasks-filter-checked t-ids])\n        code-tenths     (<sub [::ts/tasks-tenths t-ids])\n        code-str        (str \" \" code-text \" (\" code-tenths \")\")\n        edit-mode       (<sub [::s/code-edit-mode c-id])\n        active-t-id     (<sub [::s/active-timer-t-id])\n        dragged-task    (<sub [::s/dragged-task])\n        ]\n    [:div {:style {:margin-left \"50px\"}}\n     [slider-dialog {:header    code-text\n                     :parent-id code-group-id\n                     :t-ids     t-ids}]\n     [:h3 {:class \"dfs-h3\"\n           :style {:margine \"0px\"}}\n      [:i {:class    (str \"dfs-chevron \" (if code-collapsed \"pi pi-chevron-right\" \"pi pi-chevron-down\"))\n           :on-click #(>evt [::e/toggle-collapsed c-id])}]\n      [:span\n       [:> SplitButton {:icon     \"pi pi-plus\"\n                        :on-click #(do\n                                     (if code-collapsed (>evt [::e/toggle-collapsed c-id]))\n                                     (>evt [::te/add-task {:matter-id m-id :c c-id}]))\n                        :model    [{:label   \"Adjust\"\n                                    :items   [{:label \"Test\" :icon \"pi pi-stop\"}]\n                                    :icon    \"pi pi-sliders-h\"\n                                    :command #(>evt [::e/gen-toggle-slider-dialog-visible code-group-id])}\n                                   {:label   \"Copy\"\n                                    :icon    \"pi pi-copy\"\n                                    :command #(>evt [::e/copy-text code-string])}]}]\n       code-str]\n      ]\n     (if code-collapsed\n       (if (< 0 (count (filter (fn [el] (= el active-t-id)) t-ids)))\n           [task-span active-t-id])\n       [:div {:style {:margin-top \"10px\"}}\n        (if edit-mode\n          [:div {:class \"col-10\"}\n           [:i {:class    \"pi pi-list\"\n                :style    {:margin-right \"10px\"\n                           :margin-left  \"3px\"}\n                :on-click #(>evt [::te/toggle-code-edit c-id])}]\n           (for [t t-ids]\n             ^{:key t} [task-span t])]\n          [:div {:class \"col-10\"}\n           ;; [:span (str \"t-ids: \" t-ids)]\n           [:span\n            [:i {:class    \"pi pi-eye\"\n                 :style    {:margin-right \"10px\"\n                            :margin-left  \"3px\"}\n                 :on-click #(>evt [::te/toggle-code-edit c-id])}]\n            [:> MultiStateCheckbox {:options      [{:value \"some\" :icon \"pi pi-minus\"}\n                                                   {:value \"all\" :icon \"pi pi-check\"}]\n                                    :option-value \"value\"\n                                    :value        (cond\n                                                    (= (count code-checked) (count t-ids)) \"all\"\n                                                    (= 0 (count code-checked))             false\n                                                    :else                                  \"some\")\n                                    :on-change    #(>evt (if (= (count code-checked) (count t-ids))\n                                                           [::te/check-tasks t-ids :uncheck]\n                                                           [::te/check-tasks t-ids]))}]]\n           ;; (when-let [t (<sub [::s/pull-entity 220])] [:f> task-ds 220])\n           (doall\n            (for [t t-ids]\n              ^{:key t}\n              [:div\n               ^{:key t}  [:f> task-ds t]]\n              ))]\n          )])]))\n\n(defn matter-ds-old [m-id matters-tasks-on-date]\n  (let [total-time-tenths     (<sub [::ts/time-matter-total-time m-id])\n        cm-num-str            (<sub [::ts/cm-number-str m-id])\n        cm-name               (<sub [::ts/cm-name m-id])\n        task-codes            (<sub [::ts/task-codes m-id])\n        ;; task-codes-all       (<sub [::ts/task-codes (keys matters-tasks-on-date)])\n        all-matter-code-eids  (<sub [::ts/selected-date-matters-codes])\n        matters-and-codes (reduce into [] [(keys matters-tasks-on-date) (keys task-codes)])\n        {:keys [expanded collapsed]\n         :as   expando-map}   (<sub [::ts/expanded-map matters-and-codes])\n        active?               (<sub [::ts/matter-active? m-id])\n        default-timer         (<sub [::ts/default-next-task-timer m-id])\n        checked-tasks         (<sub [::ts/matter-checked-tasks-ds m-id])\n        matter-collapsed      (<sub [::s/collapsed m-id])\n        active-timer-t-id     (<sub [::s/active-timer-t-id])]\n    [:<>\n     ;; [:div (str \"matters-tasks-on-date: \" matters-tasks-on-date)]\n     [:div (str \"task-codes: \" task-codes)]\n     [:div (str \"matters-and-codes: \" matters-and-codes)]\n     [:div {:style {:width \"100%\" :display \"block\"}}\n      [:h2 {:class \"dfs-h3\"\n            :style {\n                    :margin \"0px\"\n                    :width  \"100%\"}}\n       [:span {:style {:width   \"100%\"\n                       :display \"block\"\n                       :padding \"4px\"}}\n        [:i {:class    (str \"dfs-chevron \" (if matter-collapsed \"pi pi-chevron-right\" \"pi pi-chevron-down\"))\n             :on-click #(>evt [::e/toggle-collapsed m-id])}]\n        [:> Button {:icon     \"pi pi-clock\"\n                    :style    {:margin-right \"4px\"}\n                    :disabled (not default-timer)\n                    :class    (str \"dfs-button \"\n                                   (if active?\n\n                                     \"p-button-info\"\n                                     \"p-button\"))\n                    :on-click #(>evt (if active?\n                                       [::te/stop-task-timer]\n                                       [::te/start-task-timer default-timer]))}]\n        [:span (str cm-name \"     (\"  total-time-tenths \") \")]\n        (comment [:span.dfs-inplace\n          (str c-name \" - \" m-name)])]]\n      (if (not matter-collapsed)\n        (doall\n         (for [[code tasks] (sort task-codes)]\n           ^{:key code} [code-group m-id code (vec tasks)]))\n        (when active? [task-span active-timer-t-id]))]\n     [slider-dialog {:header \"Sliders\" :t-ids checked-tasks :parent-id m-id}]]))\n\n(defn matter-ds [m-id t-ids]\n  (let [total-time-tenths (<sub [::ts/time-matter-total-time m-id])\n        cm-name           (<sub [::ts/cm-name m-id])\n        task-codes        (<sub [::ts/task-codes m-id])\n        tasks             (<sub [::s/pull-entities t-ids])\n        tasks-by-code     (<sub [::ts/tasks-by-code t-ids])\n        non-code-tasks    (get tasks-by-code nil)\n        active?           (<sub [::ts/matter-active? m-id])\n        default-timer     (<sub [::ts/default-next-task-timer m-id])\n        checked-tasks     (<sub [::ts/checked-tasks t-ids])\n        matter-collapsed  (<sub [::s/collapsed m-id])\n        active-timer-t-id (<sub [::s/active-timer-t-id])\n        ]\n    [:<>\n     (comment\n       (mcr/show-div cm-name)\n       (mcr/show-div m-id)\n       (mcr/show-div t-ids)\n       (mcr/show-div tasks)\n       (mcr/show-div task-codes)\n       (mcr/show-div tasks-by-code)\n       (mcr/show-div non-code-tasks))\n     [:div {:style {:width \"100%\" :display \"block\"}}\n      [:h2 {:class \"dfs-h3\"\n            :style {\n                    :margin \"0px\"\n                    :width  \"100%\"}}\n       [:span {:style {:width   \"100%\"\n                       :display \"block\"\n                       :padding \"4px\"}}\n        [:i {:class    (str \"dfs-chevron \" (if matter-collapsed \"pi pi-chevron-right\" \"pi pi-chevron-down\"))\n             :on-click #(>evt [::e/toggle-collapsed m-id])}]\n        [:> Button {:icon     \"pi pi-clock\"\n                    :style    {:margin-right \"4px\"}\n                    :disabled (not default-timer)\n                    :class    (str \"dfs-button \"\n                                   (if active?\n\n                                     \"p-button-info\"\n                                     \"p-button\"))\n                    :on-click #(>evt (if active?\n                                       [::te/stop-task-timer]\n                                       [::te/start-task-timer default-timer]))}]\n        [:span (str cm-name \"     (\"  total-time-tenths \") \")]]]\n      (if (not matter-collapsed)\n        (doall\n         (for [[code tasks] (sort task-codes)]\n           ^{:key code} [code-group m-id code (vec tasks)]))\n        (when active? [task-span active-timer-t-id]))]\n     [slider-dialog {:header \"Sliders\" :t-ids checked-tasks :parent-id m-id}]]))\n\n(defn key->code-id [code-opts key]\n  (->> (js->clj code-opts :keywordize-keys true)\n       (map (fn [x] (tree-seq (comp not :leaf) :children x)))\n       flatten\n       (drop-while (fn [opt] (not= key (:key opt))))\n       first\n       :data))\n\n(defn move-dialog-task [t-id]\n  (let [{:task/keys [description] :as t} (<sub [::s/pull-entity t-id])]\n    [:div {:style {:margin-top \"3px\"}}\n     [:span\n      [:> Checkbox {:checked   (<sub [::s/t-checked t-id])\n                   :on-change #(>evt [::te/toggle-check t-id])}]\n      [:span description]]\n     ]))\n\n(defn move-dialog [checked]\n  (let [visible (<sub [::s/move-dialog-visible])]\n    [:> Dialog {:header  \"Confirm\"\n                :visible visible\n                :style   {:width \"70%\"}\n                :on-hide #(>evt [::te/toggle-move-dialog-visible])}\n     [:div \"Howdyhowdyhowdy\"]\n     (show-div checked)\n     [:h3 \"Move: \"]\n     (doall\n      (for [c checked]\n       ^{:key c} [move-dialog-task c]))\n     [:span\n      [:> Button {;:class \"dfs-button\"\n                  :label \"Update\"\n                  :icon \"pi pi-refresh\"}]\n      [:> Button {;:class \"dfs-button\"\n                  :label \"Delete\"\n                  :severity \"danger\"\n                  :icon \"pi pi-times\"}]]]))\n\n(defn time-entry []\n  (let [date                         (or (<sub [::s/time-selected-date])\n                                  (>evt [::te/time-set-selected-date-today]))\n        cm-opts                      (<sub [::ts/client-matter-opts])\n        selected-m-id                (or (<sub [::s/cm-dropdown-val])\n                                  (>evt [::e/time-set-cm-dropdown (-> cm-opts first :value)]))\n        code-opts                    (<sub [:work-app.matter-subs/matter-code-menu-opts selected-m-id]) ;(<sub [::ts/matter-codes-opts selected-m-id])\n        clj-code-opts                (js->clj code-opts :keywordize-keys true)\n        all-matter-code-eids         (<sub [::ts/selected-date-matters-codes])\n        default-code                 (<sub [::ts/default-key-and-code selected-m-id])\n        [selected-key selected-code] (or (<sub [::s/time-selected-code-key-and-id])\n                                         (<sub [::ts/default-key-and-code selected-m-id]))\n        matters-tasks-on-date        (<sub [::ts/matter->task-selected-date])\n        task-codes-all               (<sub [::ts/task-codes (keys matters-tasks-on-date)])\n        matters-and-codes            (reduce into [] [(keys matters-tasks-on-date) (keys task-codes-all)])\n        checked-on-date              (<sub [::ts/checked-on-date])\n        {:keys [expanded collapsed]\n         :as   expando-map}          (<sub [::ts/expanded-map matters-and-codes])\n        codes-in-edit-mode           (<sub [::ts/codes-in-edit-mode]) ;(<sub [::s/edit-mode])\n        edit-mode                    (= (count task-codes-all) (count codes-in-edit-mode))]\n    [:div  {:style {:width \"100%\" :height \"100%\"}}\n     [move-dialog checked-on-date]\n     [:> Button {:label \"Action!\"\n                 :on-click #(>evt [::te/toggle-move-dialog-visible])}]\n     [slider-dialog {:header    \"Checked\"\n                     :parent-id \"time-entry\"\n                     :t-ids     checked-on-date}]\n     [:div {:class \"grid\"}\n      [:div {:class \"col-2\"}\n       [:> Calendar {:value           date\n                     :show-icon       true\n                     :on-change       #(>evt [::te/time-set-selected-date (.-value %)])\n                     :style           {:width \"100%\"}\n                     :show-button-bar true}]]\n      [:div {:class \"col-3\"}\n       [:> Dropdown {:options   cm-opts\n                     :style     {:width \"100%\"}\n                     :value     selected-m-id\n                     :on-change #(do\n                                   (>evt [::e/set-matter-selected-code selected-m-id false])\n                                   (>evt [::e/time-set-cm-dropdown (.-value %)]))\n                     :filter    true}]]\n      [:div {:class \"col-3\"}\n       [:> TreeSelect {:options   code-opts\n                       :style     {:width \"100%\"}\n                       :filter    true\n                       :value     selected-key\n                       :on-change #(let [key  (.-value %)\n                                         c-id (key->code-id code-opts key)]\n                                     (>evt [::te/set-selected-code key c-id])\n                                     (>evt [::e/log (str \"code-id: \" (key->code-id code-opts (.-value %)))])\n                                     (>evt [::e/log (.-value %)])\n                                     ;; (>evt [::e/set-matter-selected-code selected-m-id (.-value %)])\n                                     )}]]\n      [:div {:class \"col-2\"}\n       [:> Button {:icon     \"pi pi-plus\"\n                   :label    \"Task\"\n                   :style    {:margin \"2px\"\n                              :width  \"100%\"}\n                   :on-click #(do\n                                (js/console.log (str \"selected-m-id: \" selected-m-id))\n                                (js/console.log (str \"selected-code: \" selected-code))\n                                (>evt [::te/add-task {:matter-id selected-m-id\n                                                      :date      date\n                                                      :c         selected-code}]))\n                   }]]\n      [:div {:class \"col-2\"}\n       [:> SplitButton {:label    \"Action\"\n                        :disabled (< (count checked-on-date) 1)\n                        :style    {:margin \"2px\"\n                                   :width  \"100%\"}\n                        :on-click #(>evt [::te/toggle-move-dialog-visible])\n                        :model    (clj->js\n                                   [{:icon    \"pi pi-directions\"\n                                     :label   \"Move Checked\"\n                                     :command #(>evt [::e/move-tasks {:tids checked-on-date\n                                                                      :code selected-code\n                                                                      :m-id selected-m-id}])}\n                                    {:icon    \"pi pi-sliders-h\"\n                                     :label   \"Adjust Checked\"\n                                     :command #(>evt [::e/gen-toggle-slider-dialog-visible \"time-entry\"])}\n                                    {:icon    \"pi pi-times\"\n                                     :label   \"Delete Checked\"\n                                     :command #(>evt [::te/delete-tasks checked-on-date])}])}]]]\n     (when (< 0 (count expando-map))\n         [:span\n          [:i {:class    (if edit-mode \"pi pi-list\" \"pi pi-eye\")\n               :style    {:margin-right \"5px\"}\n               :on-click #(>evt [::te/set-edit-mode (keys task-codes-all) (not edit-mode)])}]\n          [:span {:style    {:font-size       \"small\"\n                             :text-decoration \"underline\"\n                             :font-style      \"italic\"}\n                  :on-click #(>evt [::e/set-collapsed-all\n                                    all-matter-code-eids\n                                    (if collapsed :expand :collapse)])}\n           (if collapsed \"expand all\" \"collapse all\")]])\n     [:div  {:id            \"matter-csv-dropzone\"\n             :on-drag-enter shared/allow-drop\n             :on-drag-over  shared/allow-drop\n             :on-drag-start #(.setData (.-dataTransfer %) \"text/plain\" \"\")\n             :on-drop       #(do\n                               (.preventDefault %)\n                               (>evt [::e/time-drop-csv %]))\n             :style         {:width      \"100%\"\n                             :min-height \"300px\"}}\n      (doall (for [[m-id t-ids] matters-tasks-on-date]\n               ^{:key m-id} [:f> matter-ds m-id t-ids]))]]))\n"]}