{"version":3,"sources":["work_app/shared.cljs"],"mappings":";AAKA,6BAAA,7BAAMA,kEAAYC;AAAlB,AACE,OAAiBA;;AAEnB,iCAAA,jCAAMC,0EAAgBC;AAAtB,AACE,IAAMC,WAAS,WAAKH;AAAL,AACE,AAAiBA;;AACjB,wBAAA,xBAAU,AAAiBA,oCAAeE;;AAC1C,+BAAA,xBAAU,AAAiBF,qCAAgBE;;AAH5D,AAIE,0BAAA,1BAAmBE,iCAAmBD;;AACtC,qBAAA,rBAAcC;;AACd,oCAAA,7BAAsBA,oCAAmBD;;AAE7C,gCAAA,hCAAME;AAAN,AACE,IAAMF,WAAS,WAAKH;AAAL,AACE,AAAiBA;;AACjB,AAACM,YAAe,CAAA,0DAAmB,wBAAA,xBAAU,AAAiBN;;AAC9D,OAACM,YAAe,CAAA,2DAAoB,wBAAA,xBAAU,AAAiBN;;AAHhF,AAIE,0BAAA,1BAAmBI,+BAAiBD;;AACpC,qBAAA,rBAAcC;;AACd,oCAAA,7BAAsBA,kCAAiBD;;AAE3C,iCAAA,jCAAMI,0EAAgBC;AAAtB,AAAA,0FAAA,mDAAA,mFAAA,mDAES,iBAAAC,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AAAA,iDAAIR,jDAAKU;UAAT,AAAA,CAAAJ,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;;AAET,AAAKU,0BAAK,AAACC,6CAAKC,gBAAMC","names":["work-app.shared/allow-drop","e","work-app.shared/copy-rich-text","text","listener","js/document","work-app.shared/log-clipboard","js/console.log","work-app.shared/formatted-area","data","sb__5690__auto__","goog.string/StringBuffer","*print-newline*-orig-val__41622","cljs.core/*print-newline*","*print-fn*-orig-val__41623","cljs.core/*print-fn*","*print-newline*-temp-val__41624","*print-fn*-temp-val__41625","x__5691__auto__","cljs.pprint.pprint","work-app.shared/<sub","cljs.core.comp","cljs.core/deref","re-frame.core/subscribe"],"sourcesContent":[";; (c) David F Stearns 2023\n(ns work-app.shared\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]))\n\n(defn allow-drop [e]\n  (.preventDefault e))\n\n(defn copy-rich-text [text]\n  (let [listener (fn [e]\n                   (.preventDefault e)\n                   (.setData (.-clipboardData e) \"text/html\" text)\n                   (.setData (.-clipboardData e) \"text/plain\" text))]\n    (.addEventListener js/document \"copy\" listener)\n    (.execCommand js/document \"copy\")\n    (.removeEventListener js/document \"copy\" listener)))\n\n(defn log-clipboard []\n  (let [listener (fn [e]\n                   (.preventDefault e)\n                   (js/console.log (str \"Text/html: \" (.getData (.-clipboardData e) \"text/html\")))\n                   (js/console.log (str \"Text/plain: \" (.getData (.-clipboardData e) \"text/plain\"))))]\n    (.addEventListener js/document \"do\" listener)\n    (.execCommand js/document \"do\")\n    (.removeEventListener js/document \"do\" listener)))\n\n(defn formatted-area [data]\n  [:div\n   [:pre (-> data cljs.pprint/pprint with-out-str)]])\n\n(def <sub (comp deref rf/subscribe))\n"]}