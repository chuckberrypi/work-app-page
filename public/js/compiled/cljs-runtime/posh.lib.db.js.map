{"version":3,"sources":["posh/lib/db.cljc"],"mappings":"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","names":["posh.lib.db/get-parent-db","poshdb","G__23960","cljs.core/Keyword","js/Error","cljs.core/first","cljs.core/second","cljs.core.nth","posh.lib.db/get-db-path","path","pdb","cljs.core/cons","posh.lib.db/db-id->conn","posh-tree","db-id","cljs.core.get","posh.lib.db/db-id->schema","posh.lib.db/db-id->db","posh.lib.db/poshdb->db-id","cljs.core._EQ_","posh.lib.db/db-id->attrs","posh.lib.db/poshdb->attrs","posh.lib.db/make-filter-pred","tx-patterns","_","datom","posh.lib.datom-matcher/datom-match?","var_args","G__23975","posh.lib.db/generate-initial-db","dcfg","conn","filters","posh.lib.db.generate_initial_db","db","map__23982","cljs.core/--destructure-map","filter","as-of","since","with","or__5045__auto__","fexpr__23986","fexpr__23987","fexpr__23988","fexpr__23992","G__23994","G__23995","fexpr__23993","cljs.core/Symbol","p__24005","map__24006","posh.lib.db/poshdb->db","cache","G__24008","G__24009","fexpr__24007","G__24013","G__24014","posh.lib.db/poshdb->analyze-db"],"sourcesContent":["(ns posh.lib.db\n  (:require [posh.lib.datom-matcher :as dm]))\n\n(defn get-parent-db [poshdb]\n  (case (first poshdb)\n    :db nil\n    :filter-tx (second poshdb)\n    :filter-pull (second poshdb)\n    :filter-q (first (nth poshdb 2))))\n\n(defn get-db-path [poshdb]\n  (loop [path []\n         pdb  poshdb]\n    (if pdb\n      (recur (cons pdb path) (get-parent-db pdb))\n      path)))\n\n(defn db-id->conn [posh-tree db-id]\n  (get (:conns posh-tree) db-id))\n\n(defn db-id->schema [posh-tree db-id]\n  (get (:schemas posh-tree) db-id))\n\n(defn db-id->db [posh-tree db-id]\n  (get (:dbs posh-tree) db-id))\n\n(defn poshdb->db-id [poshdb]\n  (if (= (first poshdb) :db)\n    (second poshdb)\n    (recur (get-parent-db poshdb))))\n\n(defn db-id->attrs [posh-tree db-id]\n  {:conn    (db-id->conn posh-tree db-id)\n   :schema  (db-id->schema posh-tree db-id)\n   :db      (db-id->db posh-tree db-id)\n   :db-id db-id})\n\n(defn poshdb->attrs [posh-tree poshdb]\n  (db-id->attrs posh-tree (poshdb->db-id poshdb)))\n\n(defn make-filter-pred [tx-patterns]\n  (fn [_ datom]\n    (dm/datom-match? tx-patterns datom)))\n\n(defn generate-initial-db\n  ([dcfg conn filters] (generate-initial-db dcfg conn filters nil))\n  ([dcfg conn filters db]\n     (let [{:keys [filter as-of since with]} filters\n           ;; generate db (order matters, or I would use reduce)\n           db (or db ((:db dcfg) conn)) ;; create initial db\n           db (if since ((:since dcfg) db since) db)  ;; since t\n           db (if as-of ((:as-of dcfg) db as-of) db)  ;; as-of t\n           db (if with (:db-after ((:with dcfg) db with)) db)  ;; with tx-data\n           db (if filter\n                ((:filter dcfg) db (if (symbol? filter)\n                                     #?(:clj (resolve filter) :cljs nil)\n                                     filter))\n                db) ;; filter pred-sym\n           ]\n       db)))\n\n(defn poshdb->db [{:keys [dcfg cache] :as posh-tree}  poshdb]\n  (if (= (first poshdb) :db)\n    (db-id->db posh-tree (second poshdb))\n    ((:filter dcfg)\n     (poshdb->db posh-tree (get-parent-db poshdb))\n     (make-filter-pred (:pass-patterns (get cache poshdb))))))\n\n\n(defn poshdb->analyze-db [posh-tree poshdb]\n  (let [db-id (poshdb->db-id poshdb)]\n    {:db (poshdb->db posh-tree poshdb)\n     :conn (db-id->conn posh-tree db-id)\n     :schema (db-id->schema posh-tree db-id)\n     :db-id db-id}))\n"]}