{"version":3,"sources":["work_app/events.cljs"],"mappings":"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","names":["work-app.events/>evt","re-frame.core/dispatch","work-app.events/>evt-sync","re-frame.core/dispatch-sync","work-app.events/next-order","maps","r","cljs.core.map","cljs.core.apply","cljs.core/max","js/isNaN","work-app.events/next-order-in","m","ks","cljs.core.get_in","cljs.core/vals","work-app.events/re-order-map","cljs.core.sort_by","cljs.core/vector","cljs.core.drop","cljs.core.range","cljs.core.reduce","p__35318","vec__35319","cljs.core.nth","acc","o","v","cljs.core.assoc","re-frame.core/reg-fx","p__35322","vec__35323","map__35326","cljs.core/--destructure-map","cljs.core.get","toast","severity","summary","detail","cljs.core/clj->js","or__5045__auto__","p__35327","vec__35328","text","js/navigator.clipboard","db","cljs.pprint.pprint","entry","js/console.log","el","re_frame.core.reg_event_fx","p__35331","vec__35332","_","item","re-frame.core/reg-cofx","coeffects","js/Date","cljs.core/random-uuid","num","cljs.core.into","cljs.core.repeat","work-app.events/random-task","cljs.core/rand-int","cofx","p__35341","map__35342","p__35343","map__35344","elapsed","work-app.schema/schema-get","ready-events","cljs.core/flatten","cljs.core.filter","p__35347","map__35348","interval","offset","cljs.core._EQ_","cljs.core/mod","cljs.core.mapv","p__35345","map__35346","event","work-app.schema/schema-update","cljs.core/inc","p__35352","p__35353","map__35354","vec__35355","name-key","interval-id","js/setInterval","G__35358","p__35359","p__35360","map__35361","vec__35362","e","temp__5802__auto__","target-type","G__35368","matter-id","js/parseInt","task-id","p__35369","p__35370","map__35371","vec__35372","G__35375","p__35379","p__35380","map__35381","vec__35382","G__35385","js/Error","vec__35386","selection-start","selection-end","point?","keep","split","clojure.string/join","cljs.core/split-at","beg","clojure.string/trim","cljs.core.subs","end","clojure.string.join","p__35395","p__35396","map__35397","vec__35398","G__35401","group-id","cljs.core/uuid","p__35402","p__35403","map__35404","vec__35405","key","ctrl","alt","shift","G__35412","re_frame.core.reg_event_db","cljs.core.update_in","cljs.core/not","p__35416","vec__35417","message","next-event","work-app.schema/schema-assoc","p__35420","map__35421","p__35422","p__35423","map__35424","vec__35425","seq__35426","cljs.core/seq","first__35427","cljs.core/first","cljs.core/next","vec__35428","map__35431","client-name","client-num","matter-name","matter-num","cm","data","work-app.schema/path","work_app.schema.schema_update","p__35432","vec__35433","seq__35434","first__35435","vec__35436","map__35439","c-num","c-name","m-num","m-name","p__35440","p__35441","map__35442","vec__35443","map__35446","new","old","diffs","cljs.core/keys","k","cljs.core.not_EQ_","re_frame.core.inject_cofx","p__35447","p__35448","map__35449","vec__35450","map__35453","uuid","info","new-client","work_app.schema.schema_assoc","G__35454","G__35455","re-posh.core/reg-event-ds","p__35456","vec__35457","ds","name","number","client-id","p__35460","p__35461","map__35462","vec__35463","map__35466","args","cljs.core/count","work_app.schema.schema_get","cljs.core/dissoc","p__35467","vec__35468","map__35471","id","evt","new-event","p__35472","vec__35473","p__35476","vec__35477","ticker-id","p__35480","map__35481","now","p__35482","p__35483","map__35484","vec__35485","G__35488","G__35489","G__35490","re-posh.core/reg-event-fx","re-posh.core/inject-cofx","p__35491","map__35492","random-tasks","p__35493","vec__35494","t","p__35497","p__35498","map__35499","vec__35500","toast-map","p__35503","vec__35504","new-date","p__35507","vec__35508","p__35511","vec__35512","nrls","cljs.core/filterv","nrl","p__35515","vec__35516","cljs.core.conj","work-app.events/time-get-matter","work-app.events/time-get-group","work-app.events/time-get-task","work-app.events/time-line->task","line","num-paren-re","time-re","times","cljs.core/re-seq","total-time","js/parseFloat","cljs.core/+","description","$","clojure.string.split","clojure.string/replace","work-app.events/move-keys-and-reorder","from-path","to-path","keys","p__35519","vec__35520","cljs.core/assoc-in","work-app.events/m-id-by-t-id","t-id","G__35523","G__35524","G__35525","datascript.core/q","G__35526","G__35527","G__35528","p__35529","p__35530","map__35531","vec__35532","map__35535","tids","code","m-id","matter-tasks","tid","cljs.core/into","cljs.core/vec","p__35536","vec__35537","p__35540","vec__35541","c-ids","expand-or-collapse","p__35544","vec__35545","p__35548","vec__35549","p__35552","vec__35553","p__35556","vec__35557","p__35560","vec__35561","val","p__35564","map__35565","work-app.events/code-unpack","children","work-app.events/matter-code-maps","G__35566","G__35567","G__35568","datascript.core/pull","clojure.set/union","p__35569","map__35570","G__35571","G__35572","G__35573","p__35574","p__35575","map__35576","vec__35577","map__35580","ek","ke","code-eid","p__35581","vec__35582","p-id","p__35585","vec__35586","G__35589","G__35590","G__35591","p__35592","p__35593","map__35594","vec__35595","map__35598","d","task-ids","G__35599","G__35600","G__35601","G__35602","p__35603","p__35604","map__35605","vec__35606","p__35609","p__35610","map__35611","vec__35612","p__35615","p__35616","map__35617","vec__35618","p__35621","vec__35622","p__35625","vec__35626","p__35629","vec__35630","p__35633","p__35634","map__35635","vec__35636","time-secs","js/Math.round","p__35640","p__35641","map__35642","vec__35643","checked-tasks","p1__35639#","p__35646","vec__35647","menu-ref","p__35650","p__35651","map__35652","vec__35653","p__35656","p__35657","map__35658","vec__35659","p__35662","p__35663","map__35664","vec__35665","p__35668","p__35669","map__35670","vec__35671","checked-set","p__35674","p__35675","map__35676","vec__35677","group-to-id","group-from-id","checked","work_app.schema.schema_next_order","task-map","p__35680","p__35681","map__35682","vec__35683","p__35686","p__35687","map__35688","vec__35689","code-id","p__35692","p__35693","map__35694","vec__35695","G__35698","G__35699","p__35700","p__35701","map__35702","vec__35703","tenths","secs","work-app.events/get-all-group-map","p__35710","vec__35711","p__35706","vec__35707","cljs.core/merge","work-app.events/get-all-task-map","p__35714","map__35715","p__35720","vec__35721","p__35716","vec__35717","p__35725","p__35726","map__35727","vec__35728","files","file","p1__35724#","freader","js/FileReader","G__35731","work-app.events/csv-lines->map","lines","p__35732","vec__35733","date-str","status","hours","timer","client","matter","narrative","task-code","code-description","activity","u3-name","u5-name","work-location","time-card-id","vec__35736","task","t-list","cljs.core/empty?","p__35739","vec__35740","map__35743","work-app.events/client->txs","matters","c-id","G__35744","G__35745","G__35746","base","work-app.events/lines->txs","G__35756","vec__35758","seq__35759","first__35760","vec__35761","G__35757","vec__35764","seq__35765","first__35766","vec__35790","seq__35791","first__35792","vec__35793","vec__35796","seq__35797","first__35798","l","rest-lines","txs","new-clients","new-matters","new-codes","new-client-id","new-m-id","new-code-id","new-t-id","rest-ids","work_app.time_events.range_step","vec__35799","code-str","date","time","c-id-ds","G__35802","G__35803","G__35804","c-id-news","m-id-ds","G__35805","G__35806","G__35807","m-id-news","new-txs","p__35808","vec__35809","action","eid","att","G__35812","G__35813","G__35814","G__35815","p__35816","p__35817","map__35818","vec__35819","vec__35822","row","vec__35825","c-num-cont","m-num-cont","G__35828","G__35829","G__35830","G__35831","G__35832","G__35833","G__35834","cljs.core.update","G__35835","G__35836","G__35837","p__35838","p__35839","map__35840","vec__35841","csv-contents","temp__5804__auto__","matter-lines","goog.labs.format.csv/parse","cm-map","cljs.core.doall","iter__5523__auto__","s__35845","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__35847","cljs.core/chunk-buffer","i__35846","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35844","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cs","p__35848","p__35849","map__35850","vec__35851","vec__35854","client-number","matter-number","cljs.core/some","clojure.string/blank?","cljs.core.take","work-app.schema/schema-assoc-map-of","work_app.schema.schema_assoc_map_of","p__35857","vec__35858","p__35861","map__35862","work-app.schema/schema-next-order","cljs.core/chunk-first"],"sourcesContent":[";; (c) David F Stearns 2023\n;; (c) David Stearns 2023\n(ns work-app.events\n  (:require\n   [work-app.schema :as schema :refer [schema-get schema-update schema-assoc schema-assoc-map-of schema-next-order]]\n   [work-app.subs :as s :refer [<sub]]\n   [work-app.db :as db]\n   [work-app.matter-events :as me]\n   [work-app.time-events :as te]\n\n   [goog.labs.format.csv :as csv]\n   [goog.string :as gstr]\n   [datascript.core :refer [q]]\n   [re-frame.core :as rf]\n   [re-posh.core :as rp :refer [reg-event-ds]]\n   [cljs.core.async :refer [chan close!]]\n   [clojure.set :refer [union]]\n   [datascript.core :as ds]\n   [reagent.core :as r]\n))\n\n(comment\n\n  (rf/dispatch [::ds-add-task {:description \"This is a mask\" :number \"984571\" :date (js/Date.) }])\n\n  (<sub [::ds-db])\n\n  )\n\n(comment\n  (let [cid (uuid \"ad524b3e-1c77-4ff5-92b6-2c4e95f3b300\")]\n   (ds/q '[:find ?e . :in $ ?id :where [?e :client/id ?id]] @work-app.core/conn cid)\n   (:db/id (ds/entity @work-app.core/conn 2))\n   ;; (get-eid-by-id @work-app.core/conn cid :client/id)\n   ;; (:matter/name (ds/entity @work-app.core/conn 2))\n   )\n\n  )\n\n(def >evt rf/dispatch)\n(def >evt-sync rf/dispatch-sync)\n\n(defn next-order [maps]\n  (let [r  (->> maps\n                (map :order)\n                (apply max)\n                inc)]\n    (if (js/isNaN r)\n      1\n      r)))\n\n(defn next-order-in [m ks]\n  \"Takes a map and gets the next available :order at the map at (get-in m ks)\"\n  (-> m\n      (get-in ks)\n      vals\n      next-order))\n\n(defn re-order-map [m]\n  \"re-orders a map of format {#id {:id #id :order x} #id {:id #id :order y}}\n   to prevent large gaps from forming\"\n  (->> m\n       vals\n       (sort-by :order)\n       (map vector (drop 1 (range)))\n       (reduce (fn [acc [o v]]\n                 (assoc acc (:id v) (assoc v :order o)))\n               {})))\n\n(rf/reg-fx ::toast-show\n           (fn [[toast {:keys [severity summary detail]}]]\n             (.show toast (clj->js {:severity (or severity \"success\")\n                                    :summary summary\n                                    :detail detail}))))\n\n(rf/reg-fx ::copy-text\n           (fn [[text]]\n             (.writeText js/navigator.clipboard text)))\n\n(rf/reg-fx ::pprint-db\n           (fn [db]\n             (cljs.pprint/pprint db)))\n\n(rf/reg-fx ::log\n           (fn [entry]\n             (js/console.log entry)))\n\n(rf/reg-fx ::focus\n           (fn [el]\n             (.focus el)))\n\n(rf/reg-event-fx ::log\n                 (fn [_ [_ item]]\n                   {:fx [[::log item]]}))\n\n(rf/reg-cofx ::now\n             (fn [coeffects _]\n               (assoc coeffects :now (js/Date.))))\n\n(rf/reg-cofx ::uuid\n             (fn [coeffects _]\n               (assoc coeffects :uuid (random-uuid))))\n\n(rf/reg-cofx ::uuids\n             (fn [coeffects num]\n               (assoc coeffects :uuids (into [] (repeat num (random-uuid))))))\n\n(defn random-task []\n  {:task/date (js/Date. (- 2023 (rand-int 4)) (- 11 (rand-int 11)) (- 28 (rand-int 28)))\n   :task/description (str (random-uuid))\n   :task/time (/ (rand-int 82) 10)})\n\n(rf/reg-cofx ::random-tasks\n             (fn [cofx num]\n               (assoc cofx :random-tasks (repeat num (random-task)))))\n\n(rf/reg-event-fx ::db-pprint\n                 (fn [{:keys [db]} _]\n                   {:db db\n                    :fx [[::pprint-db db]]}))\n\n:schema\n(rf/reg-event-fx ::tick\n                 (fn [{:keys [db]} _]\n                   (let [elapsed (schema-get db \"elapsed\")\n                         ready-events (->> (schema-get db \"ticker-tasks\")\n                                           vals\n                                           flatten\n                                           (filter (fn [{:keys [interval offset]}]\n                                                     (= 0\n                                                        (mod\n                                                         (- elapsed offset)\n                                                         interval))))\n                                           (mapv (fn [{:keys [event]}]\n                                                   [:dispatch event])))]\n                     {:db (schema-update db \"elapsed\" inc)\n                      :fx ready-events})))\n\n;; TODO: Assess whether interval-id is doing...\n(rf/reg-event-fx ::start-ticker\n                 (fn [{:keys [db]} [_ name-key interval]]\n                   (let [interval-id (js/setInterval #(>evt [::tick interval]))])))\n\n(rf/reg-event-fx ::enter-pressed\n                 (fn [{:keys [db]} [_ ^js/KeyboardEvent e]]\n                   (js/console.log \"::enter-pressed\")\n                   (if-let [target-type  (.. e -target -attributes -targettype -nodeValue)]\n                     (case target-type\n                       \"task-text-input\" (let [matter-id  (js/parseInt (.. e -target -attributes -matterid -nodeValue))\n                                               task-id    (js/parseInt (.. e -target -attributes -taskid -nodeValue))]\n                                           {:fx [[:dispatch [::te/add-task-after {:before-t-id task-id}]]]})\n                       {})\n                     {})))\n\n(rf/reg-event-fx ::enter-ctrl-pressed\n                 (fn [{:keys [db]} [_ ^js/KeyboardEvent e]]\n                   (js/console.log \"::enter-ctrl-pressed\")\n                   (if-let [target-type  (.. e -target -attributes -targettype -nodeValue)]\n                     (case target-type\n                       \"task-text-input\" (let [matter-id (js/parseInt (.. e -target -attributes -matterid -nodeValue))\n                                               task-id   (js/parseInt (.. e -target -attributes -taskid -nodeValue))]\n                                           {:fx [[:dispatch [::te/add-task-after {:before-t-id task-id :start? true}]]]})\n                       {})\n                     {})))\n\n(rf/reg-event-fx ::enter-shift-pressed\n                 (fn [{:keys [db]} [_ ^js/KeyboardEvent e]]\n                   (js/console.log (str \"::enter-shift-pressed\"))\n                   (if-let [target-type (.. e -target -attributes -targettype -nodeValue)]\n                     (case target-type\n                       \"task-text-input\" (let [matter-id (js/parseInt (.. e -target -attributes -matterid -nodeValue))\n                                               task-id (js/parseInt (.. e -target -attributes -taskid -nodeValue))\n                                               text (.. e -target -attributes -value -nodeValue)\n                                               selection-start (.. e -target -selectionStart)\n                                               selection-end (.. e -target -selectionEnd)\n                                               point? (= selection-start selection-end)\n                                               [keep split] (if point?\n                                                              (map clojure.string/join (split-at selection-end text))\n                                                              [(let [beg (clojure.string/trim (subs text 0 selection-start))\n                                                                     end (clojure.string/trim (subs text selection-end))]\n                                                                 (clojure.string/join \" \" [beg end]))\n                                                               (subs text selection-start selection-end)])]\n                                           (js/console.log (str \"selection-start: \" selection-start))\n                                           (js/console.log (str \"selection-end: \" selection-end))\n                                           (js/console.log (str \"keep: \" keep))\n                                           (js/console.log (str \"split: \" split))\n                                           {:fx [[:dispatch [:work-app.time-events/task-set-desc {:task-id task-id\n                                                                                                  :desc keep}]]\n                                                 [:dispatch [:work-app.time-events/add-task-after {:before-t-id task-id\n                                                                                                   :description split}]]]})))))\n\n(rf/reg-event-fx ::space-shift-pressed\n                 (fn [{:keys [db]} [_ ^js/KeyboardEvent e]]\n                   (js/console.log \"::space-shift-pressed\")\n                   (if-let [target-type  (.. e -target -attributes -targettype -nodeValue)]\n                     (case target-type\n                       \"task-text-input\"\n                       (let [matter-id (.. e -target -attributes -matterid -nodeValue)\n                             group-id (uuid  (.. e -target -attributes -groupid -nodeValue))\n                             task-id (uuid (.. e -target -attributes -taskid -nodeValue))]\n                         (.preventDefault e)\n                         {:fx [[::log matter-id] [:dispatch [::time-toggle-task-timer matter-id group-id task-id]]]})\n                       {})\n                     {})))\n\n(rf/reg-event-fx ::key-press\n                 (fn [{:keys [db]} [_ ^js/KeyboardEvent e]]\n                   (let [key   (.-keyCode e)\n                         ctrl  (.-ctrlKey e)\n                         alt   (.-altKey e)\n                         shift (.-shiftKey e)]\n                     {:fx (into\n                           [[::log (str \"::keyppress (key, ctrl, alt, shift): (\"\n                                        (.join #js [key ctrl alt shift] \", \") \")\")]]\n                           (case [key ctrl alt shift]\n                             [13 false false false] [[:dispatch [::enter-pressed e]]\n                                                     [::log e]]\n                             [13 true false false]  [[:dispatch [::enter-ctrl-pressed e]]]\n                             [13 false false true]   [[:dispatch [::enter-shift-pressed e]]]\n                             [32 false false true]  [[:dispatch [::space-shift-pressed e]]]\n                             []\n                             ))})))\n\n(rf/reg-event-db ::dialog-toggle\n                 (fn [db _]\n                   ;; (schema-update db \"dialog-visible\" not)\n                   (update-in db [:ephem :dialog-visible] not)\n\n                   ))\n\n:schema\n(rf/reg-event-db ::dialog-confirm-then\n                 (fn [db [_ message next-event]]\n                   (-> db\n                       (schema-assoc \"dialog-body\" message)\n                       (schema-assoc \"dialog-confirm-event\" next-event)\n                       (schema-update \"dialog-visible\" not)\n                       )))\n\n:schema\n(rf/reg-event-fx ::dialog-confirmed\n                 (fn [{:keys [db]} _]\n                   {:fx [[:dispatch (schema-get db \"dialog-confirm-event\") ;(get-in db [:ephem :dialog-confirm-event])\n                          ]]}))\n\n(rf/reg-event-fx ::matters-toggle-edit-dialog-showing\n                 (fn [{:keys [db]} [_ & [{:keys [client-name client-num matter-name matter-num cm] :as data}]]]\n                   (js/console.log (str \"Data: \" data))\n                   (schema/path \"matter-new-cm-dialog-showing\")\n                   {:db (schema-update db \"matter-new-cm-dialog-showing\" not {:sub-args [client-num matter-num]})\n                                        ;; (update-in db [:matters client-num :matters matter-num :ephem :edit-dialog-visible] not)\n                    :fx []}))\n\n(rf/reg-event-db ::matters-toggle-new-or-existing-cm\n                 (fn [db [_ & [{:keys [c-num c-name m-num m-name]}]]]\n                   ;; TODO: Write this\n                   (update-in db [:app :matters :new-dialog-cm?] not)))\n\n(rf/reg-event-fx ::matters-edit-matter\n                 ;; TODO:\n                 (fn [{:keys [db]} [_ {:keys [new old]}]]\n                   (let [diffs (->> new\n                                    keys\n                                    (filter (fn [k] (not= (get new k) (get old k)))))]\n                     (js/console.log (str diffs))\n                     {:db db\n                      :fx []})))\n\n:data\n:schema\n(rf/reg-event-fx ::new-client\n                 [(rf/inject-cofx ::uuid)]\n                 (fn [{:keys [db uuid]} [_ {:keys [c-name c-num] :as info :or {c-name \"Client\" c-num \"111111\"}}]]\n                   (let [new-client {:id uuid\n                                     :name c-name\n                                     :c-num c-num\n                                     :matters []}]\n                     {:db (schema-assoc db \"clients\" new-client uuid)\n                      :fx [[:dispatch [::new-client-ds c-name c-num uuid]]]}\n                     )))\n\n(reg-event-ds ::new-client-ds\n              (fn [ds [_ name number client-id]]\n                [{:client/id client-id\n                  :client/name name\n                  :client/number number}\n                 ]))\n\n\n;; :data\n;; :schema\n;; (rf/reg-event-fx ::new-client-and-matter\n;;                  [(rf/inject-cofx ::uuid)]\n;;                  (fn [{:keys [db uuid]}\n;;                       [_ {:keys [c-name c-num m-name m-num]\n;;                           :or {c-name \"Client\" c-num \"111111\" m-name \"Matter\" m-num \"111111\"}}]]\n;;                    (let [new-client {:id uuid\n;;                                      :name c-name\n;;                                      :number c-num\n;;                                      :matters {}}]\n;;                      {:db (-> db\n;;                               (schema-update \"clients\" assoc {:fn-args [uuid new-client]}))\n;;                       :fx [[:dispatch [::new-client-matter {:client-id uuid :m-num m-num :m-name m-name}]]]\n;;                       }\n;;                      )))\n\n(comment\n  (>evt [::new-client-and-matter {:c-name \"Mel Clent\" :c-num \"777456\" :m-num \"555555\" :m-name \"NNNNAAAAMMMEEE\"}])\n  )\n\n\n:data\n:schema\n(rf/reg-event-fx ::matters-delete-matter\n                 (fn [{:keys [db]} [_ {:keys [client-id matter-id] :as args}]]\n                   (js/console.log (str \"client id: \" client-id \"\\nmatter id: \" matter-id))\n                   {:db (if (< 1 (count (schema-get db \"client-matters\" client-id)))\n                          (schema-update db \"client-matters\" dissoc {:fn-args  [matter-id]\n                                                                     :sub-args [client-id]})\n                          (schema-update db \"clients\" dissoc {:fn-args [client-id]}))\n                    :fx [[:dispatch [::matters-delete-matter-ds args]]]}))\n\n(rf/reg-event-db ::ticker-set-timed-event\n                 (fn [db [_ {:keys [id interval event] :as evt}]]\n                   (let [new-event (assoc evt :offset (schema-get db \"elapsed\") )]\n                     (-> db\n                         ;; TODO: delete assoc-in vestige\n                         ;; (assoc-in [:ticker-tasks id] new-event)\n                         (schema-assoc \"active-timer\" new-event)))))\n\n(rf/reg-event-db ::ticker-clear-events\n                 (fn [db [_]]\n                   (-> db\n                       (schema-assoc \"ticker-tasks\" {})\n                       ;; (assoc :ticker-tasks {})\n                       )))\n\n(rf/reg-event-db ::ticker-clear-event\n                 (fn [db [_ ticker-id]]\n                   (-> db\n                       ;; (update-in [:ticker-tasks] dissoc ticker-id)\n                       (schema-update \"ticker-tasks\" dissoc {:fn-args [ticker-id]}))))\n\n(rf/reg-event-fx ::initialize-db\n                 [(rf/inject-cofx ::now)]\n                 (fn [{:keys [db now]} _]\n                   {:db (-> db\n                            (schema-assoc \"cal-date\" now)\n                            (schema-assoc \"nrls\" []))\n                    :fx [[:dispatch [::me/add-default-codes]]\n                         [:dispatch [::me/add-new-client-matter {:c-num  \"123456\"\n                                                                 :c-name \"Sven B\u00f8rgensson\"\n                                                                 :m-num  \"654321\"\n                                                                 :m-name \"Recipe Trademark\"}]]\n                         [:dispatch [::me/add-new-client-matter {:c-num  \"122222\"\n                                                                 :c-name \"Mega Corp.\"\n                                                                 :m-num  \"655555\"\n                                                                 :m-name \"Child 'Death' Litigation\"}]]\n                         [:dispatch [::me/add-new-client-matter {:c-num  \"888444\"\n                                                                 :c-name \"Abe's Lube Shop\"\n                                                                 :m-num  \"434343\"\n                                                                 :m-name \"Slip and Fall Case\"}]]\n                         [:dispatch [::initialize-ds]]]}))\n\n(rf/reg-event-fx ::set-sidebar-filter\n                 (fn [{:keys [db]} [_ v]]\n                   {:db (schema-assoc db \"sidebar-filter\" v)}))\n\n(rp/reg-event-fx ::initialize-ds\n                 [(rp/inject-cofx ::random-tasks 5000)\n                  (rp/inject-cofx :ds)]\n                 (fn [{:keys [ds random-tasks]} _]\n                   ;; (js/console.log (str \"random-tasks: \" random-tasks) )\n                   ;; (let [new-randoms (mapv #(assoc %1 :db/id %2) random-tasks (range -1 -5000 -1))\n                   ;;       txes (into new-randoms [])]\n                   ;;   (js/console.log (str \"new-randoms:  \" new-randoms))\n                   ;;   [{:db/id -5001\n                   ;;     :client/name \"Impact\"\n                   ;;     :client/number \"123456\"\n                   ;;     :client/matters [-2 -3 -4]}\n                   ;;    {:db/id -5\n                   ;;     :matter/name \"Litigate\"}])\n                   {}))\n\n(rf/reg-event-db ::set-toast\n                 (fn [db [_ t]]\n                   (schema-assoc db \"toast\" t)))\n\n(rf/reg-event-fx ::toast\n                 ;; toast-map is of the form {:summary \" \" :detail \" \" :severity \"optional\"}\n                 (fn [{:keys [db]} [_ toast-map]]\n                   {:fx [[::toast-show [(schema-get db \"toast\") toast-map]\n                          ]]}))\n\n(rf/reg-event-db ::cal-set-date\n                 (fn [db [_ new-date]]\n                   (schema-assoc db \"cal-date\" new-date)))\n\n(rf/reg-event-fx ::copy-text\n                 (fn [_ [_ t]]\n                   {:fx [[::copy-text [t]]\n                         [:dispatch [::toast {:detail \"copied\" :summary t}]]]}))\n\n;schema\n(rf/reg-event-db ::nrl-remove-all\n                 (fn [db _]\n                   (schema-assoc db \"nrls\" [])\n                   ))\n:schema\n;; TODO: Debug. For some reason this causes an error\n(rf/reg-event-db ::nrl-remove\n                 (fn [db [_ id]]\n                   (schema-update db \"nrls\"\n                                  (fn [nrls]\n                                    (filterv (fn [nrl] (not= id (:id nrl))) nrls)))))\n\n:schema\n(rf/reg-event-db ::nrl-add\n                 (fn [db [_ nrl]]\n                   (schema-update db \"nrls\"\n                              (fn [nrls]\n                                (conj nrls nrl)))))\n\n(defn time-get-matter [db matter-id]\n  (get-in db [:time :matters matter-id]))\n\n(defn time-get-group [db matter-id group-id]\n  (-> db\n      (time-get-matter matter-id)\n      (get-in [:groups group-id])))\n\n(defn time-get-task [db matter-id group-id task-id]\n  (-> db\n      (time-get-group matter-id group-id)\n      (get-in [:tasks task-id])))\n\n(defn time-line->task [line]\n  (let [num-paren-re #\"\\(\\d+\\.?\\d*\\)\"\n        time-re #\"(?<=\\()\\d+\\.?\\d*(?=\\))\"\n        times (re-seq time-re line)\n        total-time (->> times\n                        (map js/parseFloat)\n                        (reduce +)\n                        (* 60 60))\n        description (as-> line $\n                    (clojure.string/split $ num-paren-re)\n                    (clojure.string/join \" \" $)\n                    (clojure.string/replace $ #\"\\s+\" \" \")\n                    (clojure.string/trim $))]\n    {:not-yet-focused false\n     :time total-time\n     :description description}))\n\n(defn move-keys-and-reorder [m from-path to-path keys]\n  (->> keys\n       (map vector (drop (next-order-in m to-path) (range)))\n       (reduce (fn [acc [o v]]\n                 (-> acc\n                     (assoc-in (conj to-path v) (assoc (get-in acc (conj from-path v)) :order o))\n                     (update-in from-path dissoc v))))))\n\n(defn m-id-by-t-id [ds t-id]\n  (ds/q\n   '[:find ?m-id .\n     :in $ ?t-id\n     :where [?m-id :matter/tasks ?t-id]]\n   ds t-id))\n\n(rp/reg-event-fx ::move-tasks\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds]} [_ {:keys [tids code m-id]}]]\n                   (let [matter-tasks (->> tids\n                                              (map (fn [tid]\n                                                     [[:db/retract (m-id-by-t-id ds tid) :matter/tasks tid]\n                                                      [:db/add m-id :matter/tasks tid]\n                                                      [:db/add tid :task/code code]]))\n                                              (reduce into [])\n                                              vec)]\n                     {:transact matter-tasks\n                      :fx       (mapv (fn [t-id]\n                                        [:dispatch [:work-app.time-events/t-task-toggle-check  t-id]])\n                                      tids)})))\n\n(rf/reg-event-db ::toggle-collapsed\n                 (fn [db [_ id]]\n                   (schema-update db \"collapsed\" not {:sub-args [id]})))\n\n(rf/reg-event-db ::set-collapsed-all\n                 (fn [db [_ c-ids expand-or-collapse]]\n                   (let []\n                     (js/console.log (str \"c-ids: \" c-ids))\n                      (reduce\n                      (fn [acc v]\n                        (schema-assoc acc \"collapsed\" (= expand-or-collapse :collapse) v))\n                      db\n                      c-ids))))\n\n:schema\n(rf/reg-event-db ::time-matter-toggle-name-edit\n                 (fn [db [_ matter-id]]\n                   (-> db\n                       (schema-update \"matter-name-edit\" not {:sub-args [matter-id]})\n                       )))\n\n:schema\n(rf/reg-event-db ::time-delete-matter\n                 (fn [db [_ matter-id]]\n                   (schema-update db \"time-matters\" dissoc {:fn-args [matter-id]})))\n\n:schema\n(rf/reg-event-db ::group-set-code\n                 (fn [db [_ matter-id group-id code]]\n                   (schema-assoc db \"group-selected-code\" code matter-id group-id)\n                   ))\n\n:schema\n(rf/reg-event-db ::time-task-toggle-check\n                 (fn [db [_ matter-id group-id task-id]]\n                   (schema-update db \"task-checked\" not {:sub-args [matter-id group-id task-id]})))\n\n(rf/reg-event-db ::set-matter-selected-code-old\n                 (fn [db [_ m-id val]]\n                   (schema-assoc db \"matter-selected-code\" val m-id)))\n\n(defn code-unpack [{:code/keys [key children]\n                    :db/keys   [id]\n                    :as m}]\n  (reduce (fn [acc v] (into acc (code-unpack v))) #{{:id id :key key}} children))\n\n(defn matter-code-maps [ds m-id]\n  (let [m (ds/pull ds\n                   '[:db/id :code/key {:matter/codes ...} {:code/children ...}]\n                   m-id)]\n    (->> m\n        :matter/codes\n        (map code-unpack)\n        (reduce clojure.set/union)\n        (reduce (fn [acc {:keys [id key]}]\n                  (-> acc\n                      (assoc-in [:ek id] key)\n                      (assoc-in [:ke key] id)))\n                {})\n        )))\n\n(comment\n\n  (matter-code-maps @@re-posh.db/store 2)\n\n)\n\n(rp/reg-event-fx ::set-matter-selected-code\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ m-id k]]\n                   (let [{:keys [ek ke]} (matter-code-maps ds m-id)\n                         code-eid (get ke k)]\n                     {:db (schema-assoc db \"matter-selected-code\" code-eid m-id)})))\n\n(rf/reg-event-db ::gen-toggle-slider-dialog-visible\n                 (fn [db [_ p-id]]\n                   (schema-update db \"slider-dialog-visible\" not {:sub-args [p-id]})))\n\n(rf/reg-event-db ::slider-dialog-toggle-lock\n                 (fn [db [_ p-id]]\n                   (schema-update db \"slider-dialog-locked\" not {:sub-args [p-id]})))\n\n;; TODO: add code\n(rp/reg-event-fx ::delete-tasks\n                 [(rp/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ {:keys [matter-id group-id]}]]\n                   (let [d (schema-get db \"time-selected-date\")\n                         task-ids (ds/q '[:find [?t ...]\n                                          :in $ ?m-id ?d ; ?code\n                                          :where\n                                          [?m :matter/id ?m-id]\n                                          ; [?t :task/code group-id]\n                                          [?m :matter/tasks ?t]\n                                          [?t :task/date ?d]\n                                          ]\n                                        ds matter-id d)]\n                     {:transact (mapv (fn [tid] [:db/retractEntity tid]) task-ids)})))\n\n(rf/reg-event-fx ::time-matter-start-last-timer\n                 (fn [{:keys [db]} [_ matter-id]]\n                   {:fx [[:dispatch (into [::time-task-start-timer] (schema-get db \"matter-last-active-task\" matter-id))]]}))\n\n(rf/reg-event-fx ::time-task-start-timer\n                 (fn [{:keys [db]} [_ matter-id group-id task-id]]\n                   {:db (schema-assoc db \"matter-last-active-task\" [matter-id group-id task-id] matter-id) ;(assoc-in db [:time :matters matter-id :last-timed-task] [matter-id group-id task-id])\n                    :fx [[:dispatch [::ticker-set-timed-event\n                                     {:id :active-timer\n                                      :interval 1\n                                      :task-id task-id\n                                      :event [::time-task-tick matter-id group-id task-id]}]]]}))\n\n(rf/reg-event-fx ::time-toggle-task-timer\n                 (fn [{:keys [db]} [_ matter-id group-id task-id]]\n                   {:fx [[:dispatch (if (= task-id (schema-get db \"active-timer-task-id\")\n                                           ;; (get-in db [:ticker-tasks :active-timer :task-id])\n                                           )\n                                      [::time-task-stop-timer]\n                                      [::time-task-start-timer matter-id group-id task-id])]]}))\n\n:schema\n(rf/reg-event-db ::time-group-toggle-dialog\n                 (fn [db [_ matter-id group-id]]\n                   (schema-update db \"group-dialog-visible\" not {:sub-args [matter-id group-id]})))\n\n(rf/reg-event-db ::time-delete-group\n                 (fn [db [_ matter-id group-id]]\n                   (update-in db [:time :matters matter-id :groups] dissoc group-id)))\n\n(rf/reg-event-db ::time-delete-task\n                 (fn [db [_ matter-id group-id task-id]]\n                   ;; (update-in db [:time :matters matter-id :groups group-id :tasks] dissoc task-id)\n                   (schema-update db \"group-tasks\" dissoc {:sub-args [matter-id group-id]\n                                                           :fn-args [task-id]})))\n\n:data\n:schema\n(rf/reg-event-fx ::time-set-task-time\n                 (fn [{:keys [db]} [_ matter-id group-id task-id time-secs]]\n                   {:db (schema-assoc db \"task-time\" (js/Math.round time-secs) matter-id group-id task-id)\n                    :fx [[:dispatch [::time-set-task-time-ds {:t-id task-id :time time-secs}]]]}))\n\n:data\n:schema\n(rf/reg-event-fx ::time-group-delete-checked-tasks\n                 (fn [{:keys [db]} [_ matter-id group-id checked-tasks]]\n                   {:db (schema-update db\n                                   \"group-tasks\"\n                                   #(apply dissoc % (map :id checked-tasks))\n                                   {:sub-args [matter-id group-id]})\n                    :fx [[:dispatch [::time-delete-group-if-empty matter-id group-id]]\n                         [:dispatch [::time-delete-checked-tasks-ds checked-tasks]]]}))\n\n:schema\n(rf/reg-event-db ::time-group-set-tiered-menu\n                 (fn [db [_ matter-id group-id menu-ref]]\n                   ;; 'if' avoids reappearing groups due to the button menu tieredmenu :ref\n                   (if (schema-get db \"group-id\" matter-id group-id)\n                     (schema-assoc db \"group-tiered-menu-ref\" menu-ref matter-id group-id)\n                     db)))\n\n(rf/reg-event-fx ::time-focus-task-if-new\n                 (fn [{:keys [db]} [_ matter-id group-id task-id el]]\n                   (if (schema-get db \"task-already-focused\" matter-id group-id task-id)\n                     {}\n                     {:db (schema-update db \"task-already-focused\" not {:sub-args [matter-id group-id task-id]})\n                      :fx [[::focus el]]}\n                     )))\n\n(rf/reg-event-fx ::focus-task-if-new\n                 (fn [{:keys [db]} [_ t-id el]]\n                   (if (schema-get db \"t-already-focused\" t-id)\n                     {}\n                     {:db (schema-update db \"t-already-focused\" not {:sub-args [t-id]})\n                      :fx [[::focus el]]})))\n\n:data ;does not need -ds version because tasks will be filtered by date and grouped by group. No deleting necessary\n:schema\n(rf/reg-event-fx ::time-delete-group-if-empty\n                 (fn [{:keys [db]} [_ matter-id group-id]]\n                   {:db\n                    (if (= 0 (count (schema-get db \"group-tasks\" matter-id group-id)))\n                      (schema-update db \"matter-group-map\" dissoc {:fn-args [group-id]\n                                                                   :sub-args [matter-id]})\n                      db)}))\n\n:schema\n(rf/reg-event-fx ::time-move-tasks-to-new-group\n                 (fn [{:keys [db]} [_ matter-id group-id checked-set]]\n                   {:db (-> db\n                            (schema-update \"group-tasks\" dissoc {:sub-args [matter-id group-id] :fn-args (mapv :id checked-set)})\n                            (schema-update \"group-tasks\" re-order-map {:sub-args [matter-id group-id]}))\n                    :fx [[:dispatch [::time-add-group matter-id checked-set]]\n                         [:dispatch [::time-delete-group-if-empty matter-id group-id]]]}))\n\n;; TODO: Fix ordering\n:schema\n(rf/reg-event-fx ::time-move-tasks-to\n                 (fn [{:keys [db]} [_ checked-tasks group-to-id matter-id group-from-id]]\n                   (let [checked (->> checked-tasks\n                                      (map (fn [o t] (assoc t :order o))\n                                           (drop\n                                            (schema-next-order \"matter-group-map\" matter-id group-to-id)\n                                            (range)))\n                                      (map (fn [t]\n                                             (assoc-in t [:ephem :task-checked] false))))]\n                     {:db (-> db\n                              (schema-update \"group-tasks\" dissoc {:sub-args [matter-id group-from-id] :fn-args (mapv :id checked)})\n                              (schema-update \"group-tasks\" re-order-map {:sub-args [matter-id group-from-id]})\n                              (schema-update \"group-tasks\" (fn [task-map]\n                                                             (reduce (fn [acc v]\n                                                                       (assoc acc (:id v) v))\n                                                                     task-map\n                                                                     checked))\n                                             {:sub-args [matter-id group-to-id]}))\n                      :fx [[:dispatch [::time-delete-group-if-empty matter-id group-from-id]]]})))\n\n:schema\n(rf/reg-event-fx ::time-group-toggle-slider\n                 (fn [{:keys [db]} [_ matter-id group-id]]\n                   {:db (schema-update db \"group-sliders-showing\" not {:sub-args [matter-id group-id]})\n                    }))\n\n(rf/reg-event-fx ::code-slider-visible-toggle\n                 (fn [{:keys [db]} [_ code-id]]\n                   {:db (schema-update db \"code-slider-visible\" not {:sub-args [code-id]})}))\n\n:schema\n(rf/reg-event-fx ::time-group-slider-lock-toggle\n                  (fn [{:keys [db]} [_ matter-id group-id]]\n                    {:db\n                     (schema-update db \"group-slider-locked\" not {:sub-args [matter-id group-id]})\n                     }))\n\n(rp/reg-event-fx ::time-task-slide-change-ds\n                 (fn [{:keys [db]} [_ t-id tenths]]\n                   (let [secs (js/Math.round (* 3600 tenths))]\n                     {:fx [[::log (str \"Secs: \" secs)]\n                           [:dispatch [::time-set-task-time-ds {:task-id t-id :time secs}]]]})))\n\n(defn get-all-group-map [db]\n  (->> (schema-get db \"time-matters\")\n       keys\n       (map (fn [matter-id]\n              (->> (schema-get db \"matter-group-map\" matter-id)\n                   (map (fn [[k v]]\n                          [k (assoc v :matter-id matter-id)]))\n                   (reduce (fn [acc [k v]] (assoc acc k v)) {}))))\n       (apply merge)))\n\n(defn get-all-task-map [db]\n  (->> db\n    get-all-group-map\n    vals\n    (map (fn [{:keys [id matter-id]}]\n           (->> (schema-get db \"group-tasks\" matter-id id)\n                (map (fn [[k v]]\n                       [k (assoc v :matter-id matter-id :group-id id)]))\n                (reduce (fn [acc [k v]] (assoc acc k v)) {}))))\n    (apply merge)))\n\n(rf/reg-event-fx ::time-drop-csv\n                 (fn [{:keys [db]} [_ e]]\n                   (let [files (.. e -dataTransfer -files)]\n                     (if-let [file (first (map #(.item files %) (range (.-length files))))]\n                       (let [freader (js/FileReader.)]\n                         (set! (.-onload freader)\n                               #(>evt [::time-load-matters-csv (.-result freader)]))\n                         (.readAsBinaryString freader file))\n                       {:fx [[:dispatch [::log \"No acceptable file\"]]]}))))\n\n\n(defn csv-lines->map [lines]\n  (reduce\n   (fn [acc [date-str client-name status hours timer client\n             matter matter-name narrative task-code code-description\n             activity u3-name u5-name work-location time-card-id]]\n     (let [code          (clojure.string/join \" \" [task-code code-description])\n           [c-num m-num] (clojure.string/split matter #\"-\")\n           task          {:desc        narrative\n                          :date        (js/Date. date-str)\n                          :code        code\n                          :location    work-location\n                          :time        (-> hours js/parseFloat (* 3600) js/Math.round)\n                          :client-name client-name\n                          :c-num       c-num\n                          :m-num       m-num\n                          }]\n       (-> acc\n           (assoc-in [c-num :name] client-name)\n           (assoc-in [c-num :matters m-num :name] matter-name)\n           (update-in [c-num :matters m-num code :tasks]\n                      (fn [t-list]\n                        (if (empty? t-list)\n                          [task]\n                          (conj t-list task)))))))\n   {}\n   lines))\n\n(defn client->txs [ds [c-num {:keys [name matters]}]]\n  (let [c-id (or (:db/id (ds/pull ds '[:db/id] [:client/number c-num])) -1)\n        base [{:db/id         c-id\n               :client/number c-num\n               :client/name   name\n               :client/matters []}]\n        ]\n    (js/console.log (str c-num \" c-id: \" c-id))\n    (js/console.log (str \"adding c-num: \" c-num \"\\nc-name: \" name \"\\nbase: \" base))\n    ))\n\n(defn lines->txs [ds lines]\n  (loop [[[date-str client-name status hours timer client\n           matter matter-name narrative task-code code-description\n           activity u3-name u5-name work-location time-card-id :as l] & rest-lines] lines\n         txs                                                                        []\n         new-clients                                                                {}\n         new-matters                                                                {}\n         new-codes                                                                  {}\n         [new-client-id new-m-id new-code-id new-t-id & rest-ids]                   (work-app.time-events/range-step -1 -1)]\n    (if (nil? l)\n        txs\n        (let [code-str      (clojure.string/join \" \" [task-code code-description])\n              [c-num m-num] (clojure.string/split matter #\"-\")\n              date          (js/Date. date-str)\n              time          (-> hours js/parseFloat (* 3600) js/Math.round)\n              task          {:desc        narrative\n                             :date        (js/Date. date-str)\n                             :code        code-str\n                             :location    work-location\n                             :time        time\n                             :client-name client-name\n                             :c-num       c-num\n                             :m-num       m-num\n                             }\n              c-id-ds       (:db/id (ds/pull ds '[:db/id] [:client/number c-num]))\n              c-id-news     (get new-clients c-num)\n              c-id          (or c-id-ds\n                                c-id-news\n                                new-client-id)\n              m-id-ds       (:db/id (ds/pull ds '[:db/id] [:matter/id m-num]))\n              m-id-news     (get new-matters m-num)\n              m-id          (or m-id-ds\n                                m-id-news\n                                new-m-id)\n              new-txs       (mapv\n                             (fn [[action eid att v]]\n                               [action eid att (or v \"placeholder\")])\n                             (cond-> txs\n                               (and (not c-id-ds)\n                                    (not c-id-news)) (conj [:db/add c-id :client/name client-name]\n                                                           [:db/add c-id :client/number c-num])\n                               (and (not m-id-ds)\n                                    (not m-id-news)) (conj [:db/add c-id :client/matters m-id]\n                                                           [:db/add m-id :matter/name matter-name]\n                                                           [:db/add m-id :matter/number m-num])\n                               :and                  (conj [:db/add m-id :matter/tasks new-t-id]\n                                                           [:db/add new-t-id :task/date date]\n                                                           [:db/add new-t-id :task/description narrative]\n                                                           [:db/add new-t-id :task/work-location work-location]\n                                                           [:db/add new-t-id :task/time time])))]\n          (recur\n           rest-lines\n           new-txs\n           (assoc new-clients c-num c-id)\n           (assoc new-matters m-num m-id)\n           (assoc new-codes :a 1)\n           rest-ids\n           )))))\n\n(comment\n  (cond-> {}\n    (> 3 1) (assoc :a 1)\n    (and 8 0) (assoc :b 2)\n    :and (assoc :c 3))\n  (conj [] [1] [2] [3])\n  (loop [[a & r :as l] '(1 2 3)\n        acc []]\n   (if (nil? (first l));(nil? a)\n     (conj acc \"nil\")\n     (recur r (conj acc a))))\n  )\n\n(rp/reg-event-fx ::time-load-csv-line\n                 [(rf/inject-cofx :ds)]\n                 (fn [{:keys [ds db]} [_ [date-str client-name status hours timer client\n                                          matter matter-name narrative task-code code-description\n                                          activity u3-name u5-name work-location time-card-id :as row]]]\n                   (let [[c-num-cont m-num-cont] (mapv clojure.string/trim (clojure.string/split matter #\"-\"))\n                         c-num                   (or c-num-cont \"x\")\n                         m-num                   (or m-num-cont \"y\")\n                         c-id                    (or (:db/id (ds/pull ds '[:db/id] [:client/number client])) -1)\n                         m-id                    (or (:db/id (ds/pull ds '[:db/id] [:matter/number matter])) -2)\n                         secs                    (js/parseFloat hours)\n                         txs                     (cond-> []\n                                                   (neg? c-id) (into [[:db/add c-id :client/name client-name]\n                                                                      [:db/add c-id :client/number c-num]])\n                                                   (neg? m-id) (into [[:db/add c-id :client/matters m-id]\n                                                                      [:db/add m-id :matter/name matter-name]\n                                                                      [:db/add m-id :matter/number m-num]])\n                                                   true        (into [[:db/add m-id :matter/tasks -3]\n                                                                      [:db/add -3 :task/date (js/Date. date-str)]\n                                                                      [:db/add -3 :task/description narrative]\n                                                                      [:db/add -3 :task/code 3] ;TODO fix code\n                                                                      [:db/add -3 :task/time secs]]))]\n                     ;; (js/console.log (str \"Date-str: \" date-str \"\\nclient-name: \" client-name))\n                     ;; (js/console.log (str \"matter: \" matter))\n                     ;; (js/console.log (str \"client: \" client))\n                     ;; (js/console.log (str \"c-num: \" c-num))\n                     ;; (js/console.log (str \"m-num: \" m-num))\n                     ;; (js/console.log (str \"txs: \" txs))\n                     {:transact txs\n                      :db (update db :lines-processed inc)})))\n\n(rp/reg-event-fx ::time-load-matters-csv\n                 [(rf/inject-cofx :ds)]\n                 (fn [{:keys [db ds]} [_ csv-contents]]\n                   (when-let [matter-lines (drop 1 (csv/parse csv-contents))]\n                     (let [cm-map (csv-lines->map matter-lines)\n                           txs    (lines->txs ds matter-lines) ;(mapv (fn [el] [:dispatch [::add-matter-tasks ]]) cm-map)\n                           ]\n                       ;; (js/console.log (str \"ds is db?: \" (ds/db? ds)))\n                       ;; (js/console.log (-> cm-map clj->js))\n                       (js/console.log (clj->js txs))\n                       (doall (for [cs cm-map]\n                                (client->txs ds cs)))\n                       {:fx [];(mapv (fn [line] [:dispatch [::time-load-csv-line line]]) matter-lines)\n                        :transact txs\n                        :db (-> db (assoc :lines-total (count matter-lines) :lines-processed 0 :progress-visible true))}))))\n\n(comment\n  (reduce\n   (fn [acc v]\n     )\n   []\n   (ds/pull @@re-posh.db/store\n            '[:db/id {:matter/codes ...} {:code/children ...} :code/label]\n            [:matter/number \"654321\"])\n   )\n\n  )\n\n:schema\n(rf/reg-event-fx ::time-add-known-matter\n                 (fn [{:keys [db uuid]} [_ [client-name matter-name client-number matter-number :as line]]]\n                   (js/console.log line)\n                   (if (some clojure.string/blank? (take 4 line))\n                     {:fx [[:dispatch [::log \"Bad line\"]]]}\n                     {:db (-> db\n                              (schema-assoc-map-of \"time-matters\"\n                                                   uuid\n                                                   {:id uuid :name client-name :number client-number})\n                              ;; TODO get another uuid here for the key\n                              (schema-assoc-map-of \"matter-group-map\"\n                                                   matter-name\n                                                   {:name matter-name\n                                                    :number matter-number}\n                                                   {:sub-args [uuid]}))})))\n\n:schema\n(rf/reg-event-db ::time-set-cm-dropdown\n                 (fn [db [_ v]]\n                   (schema-assoc db \"cm-dropdown-val\" v)))\n\n:schema\n(rf/reg-event-fx ::test\n                 (fn [{:keys [db]} _]\n                   {:fx [[::log (str (schema/schema-next-order db \"time-matters\"))]]}))\n"]}