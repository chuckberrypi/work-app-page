{"version":3,"sources":["posh/lib/graph.cljc"],"mappings":";AASA,2BAAA,3BAAMA;AAAN,AAAA;;AAIA,0BAAA,1BAAMC,4DAAUC,MAAMC;AAAtB,AACE,8GAAA,uDAAA,2CAAA,wDAAA,kCAAA,4DAAA,/VAACC,uJAAOD,oPACDD;;AAGT,2BAAA,3BAAMG,8DAAWH,MAAMC,OAAOG;AAA9B,AACE,+DAAA,0FAAA,lJAACC,kDAAUL,yFAAOC,uEAAgBK,eAAKF;;AAGzC,4BAAA,5BAAMG,gEAAYP,MAAMC,OAAOO;AAA/B,AACE,+DAAA,0FAAA,lJAACH,kDAAUL,yFAAOC,2EAAiBK,eAAKE;;AAE1C,+BAAA,/BAAMC,sEAAeT,MAAMC,OAAOS,OAAOC;AAAzC,AACE,OAACC,+CAAO,WAAKC,GAAGT;AAAR,AAAe,OAACD,yBAAUU,GAAGZ,OAAOG;GACpC,AAACQ,+CAAO,WAAKC,GAAGL;AAAR,AAAgB,OAACD,0BAAWM,GAAGZ,OAAOO;GACtC,AAACT,wBAASC,MAAMC,QAChBU,SACRD;;AAGV,kCAAA,lCAAMI,4EAAkBd,MAAMC,OAAOS;AAArC,AACE,OAACE,+CAAO,WAAKC,GAAGT;AAAR,0DACMS,zBACA,AAACV,4BAAUF,OAAOG,pEAClB,OAACG,oEAAWH,MAAMH;GACxB,AAACF,wBAASC,MAAMC,QAChBS;;AAGV,8BAAA,9BAAMK,oEAAcf,MAAMC,OAAOG;AAAjC,AACE,+DAAA,0FAAA,lJAACC,kDAAUL,yFAAOC,uEAAgBe,eAAKZ;;AAGzC,+BAAA,/BAAMa,sEAAejB,MAAMC,OAAOO;AAAlC,AACE,+DAAA,0FAAA,lJAACH,kDAAUL,yFAAOC,2EAAiBe,eAAKR;;AAG1C,4BAAA,5BAAMU,gEAAYlB,MAAMmB,EAAEC;AAA1B,AACE,8DAAA,WAAAC,lEAACC,+CAAOtB,MAAMmB;AAAd,AAAiB,oDAAAE,7CAACE,8DAAOH;;;AAG3B,6BAAA,7BAAMI,kEAAaxB,MAAMC;AAAzB,AACE,IAAAwB,qBAAkC,AAACG,4CAAI5B,MAAMC;AAA7C,AAAA,oBAAAwB;AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAAiBhB;cAAjB,AAAAkB,4CAAAF,eAAA,rEAAwBf;AAAxB,AACE,OAACkB,+CACA,AAACjB,+CAAO,WAAKC,GAAGiB;AAAR,AAAkB,OAACb,6BAAcJ,GAAGiB,SAAS7B;GAC7C,AAACW,+CAAOY,2BAAYxB,MAAMW,SAC1BD,QACRT;;AACDD;;;AAEJ","names":["posh.lib.graph/new-graph","posh.lib.graph/add-item","graph","item-k","cljs.core.merge","posh.lib.graph/add-input","input","cljs.core.update_in","cljs.core/conj","posh.lib.graph/add-output","output","posh.lib.graph/add-item-full","inputs","outputs","cljs.core.reduce","gr","posh.lib.graph/add-item-connect","posh.lib.graph/remove-input","cljs.core/disj","posh.lib.graph/remove-output","posh.lib.graph/remove-dep","k","dep-k","p1__23963#","cljs.core.update","cljs.core.disj","posh.lib.graph/remove-item","temp__5802__auto__","map__23971","cljs.core/--destructure-map","cljs.core.get","cljs.core.dissoc","output-k"],"sourcesContent":["(ns posh.lib.graph)\n\n\n;; graph-add-item\n\n\n;; data graph :: {key {:inputs #{keys} :outputs #{keys}}]\n\n;; new-graph :: graph\n(defn new-graph [] {})\n\n;; add-item :: graph -> key -> graph\n;; only adds if item doesn't exist\n(defn add-item [graph item-k]\n  (merge {item-k {:inputs #{} :outputs #{}}}\n         graph))\n\n;; add-item-input :: graph -> key -> key -> graph\n(defn add-input [graph item-k input]\n  (update-in graph [item-k :inputs] conj input))\n\n;; add-item-output :: graph -> key -> key -> graph\n(defn add-output [graph item-k output]\n  (update-in graph [item-k :outputs] conj output))\n\n(defn add-item-full [graph item-k inputs outputs]\n  (reduce (fn [gr input] (add-input gr item-k input))\n          (reduce (fn [gr output] (add-output gr item-k output))\n                  (add-item graph item-k)\n                  outputs)\n          inputs))\n\n;; connects item to output of inputs\n(defn add-item-connect [graph item-k inputs]\n  (reduce (fn [gr input]\n            (-> gr\n                (add-input item-k input)\n                (add-output input item-k)))\n          (add-item graph item-k)\n          inputs))\n\n;; remove-input :: graph -> key -> key -> graph\n(defn remove-input [graph item-k input]\n  (update-in graph [item-k :inputs] disj input))\n\n;; remove-output :: graph -> key -> key -> graph\n(defn remove-output [graph item-k output]\n  (update-in graph [item-k :outputs] disj output))\n\n;; rm-dep :: graph -> key -> key -> graph\n(defn remove-dep [graph k dep-k]\n  (update graph k #(disj % dep-k)))\n\n;; rm-item :: graph -> key -> graph\n(defn remove-item [graph item-k]\n  (if-let [{:keys [inputs outputs]} (get graph item-k)]\n    (dissoc\n     (reduce (fn [gr output-k] (remove-output gr output-k item-k))\n             (reduce remove-item graph outputs)\n             inputs)\n     item-k)\n    graph))\n\n(comment\n\n  (def patgraph\n    (-> (new-graph)\n        (add-item :db1)\n        (add-item :db2)\n        (add-item :query1)\n        (add-output :db2 :query1)\n        (add-item :filter1)\n        (add-item :filter2)\n        (add-input :filter2 :db1)\n        (add-output :db1 :filter1)\n        (add-output :db1 :filter2)\n        (add-output :filter2 :query2)\n        (add-item :query2)\n        (add-output :filter2 :query3)\n        (add-output :db2 :query3)\n        (add-item :query3)))\n\n  (remove-item patgraph :filter2)\n\n  )\n\n"]}